// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/agenttask"
	"github.com/gen0cide/laforge/ent/ansible"
	"github.com/gen0cide/laforge/ent/command"
	"github.com/gen0cide/laforge/ent/dnsrecord"
	"github.com/gen0cide/laforge/ent/filedelete"
	"github.com/gen0cide/laforge/ent/filedownload"
	"github.com/gen0cide/laforge/ent/fileextract"
	"github.com/gen0cide/laforge/ent/ginfilemiddleware"
	"github.com/gen0cide/laforge/ent/plan"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/provisionedhost"
	"github.com/gen0cide/laforge/ent/provisioningscheduledstep"
	"github.com/gen0cide/laforge/ent/scheduledstep"
	"github.com/gen0cide/laforge/ent/script"
	"github.com/gen0cide/laforge/ent/status"
	"github.com/google/uuid"
)

// ProvisioningScheduledStepQuery is the builder for querying ProvisioningScheduledStep entities.
type ProvisioningScheduledStepQuery struct {
	config
	limit                                            *int
	offset                                           *int
	unique                                           *bool
	order                                            []OrderFunc
	fields                                           []string
	predicates                                       []predicate.ProvisioningScheduledStep
	withProvisioningScheduledStepToStatus            *StatusQuery
	withProvisioningScheduledStepToScheduledStep     *ScheduledStepQuery
	withProvisioningScheduleStepToProvisionedHost    *ProvisionedHostQuery
	withProvisioningScheduledStepToScript            *ScriptQuery
	withProvisioningScheduledStepToCommand           *CommandQuery
	withProvisioningScheduledStepToDNSRecord         *DNSRecordQuery
	withProvisioningScheduledStepToFileDelete        *FileDeleteQuery
	withProvisioningScheduledStepToFileDownload      *FileDownloadQuery
	withProvisioningScheduledStepToFileExtract       *FileExtractQuery
	withProvisioningScheduledStepToAnsible           *AnsibleQuery
	withProvisioningScheduledStepToAgentTask         *AgentTaskQuery
	withProvisioningStepToPlan                       *PlanQuery
	withProvisioningScheduledStepToGinFileMiddleware *GinFileMiddlewareQuery
	withFKs                                          bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ProvisioningScheduledStepQuery builder.
func (pssq *ProvisioningScheduledStepQuery) Where(ps ...predicate.ProvisioningScheduledStep) *ProvisioningScheduledStepQuery {
	pssq.predicates = append(pssq.predicates, ps...)
	return pssq
}

// Limit adds a limit step to the query.
func (pssq *ProvisioningScheduledStepQuery) Limit(limit int) *ProvisioningScheduledStepQuery {
	pssq.limit = &limit
	return pssq
}

// Offset adds an offset step to the query.
func (pssq *ProvisioningScheduledStepQuery) Offset(offset int) *ProvisioningScheduledStepQuery {
	pssq.offset = &offset
	return pssq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pssq *ProvisioningScheduledStepQuery) Unique(unique bool) *ProvisioningScheduledStepQuery {
	pssq.unique = &unique
	return pssq
}

// Order adds an order step to the query.
func (pssq *ProvisioningScheduledStepQuery) Order(o ...OrderFunc) *ProvisioningScheduledStepQuery {
	pssq.order = append(pssq.order, o...)
	return pssq
}

// QueryProvisioningScheduledStepToStatus chains the current query on the "ProvisioningScheduledStepToStatus" edge.
func (pssq *ProvisioningScheduledStepQuery) QueryProvisioningScheduledStepToStatus() *StatusQuery {
	query := &StatusQuery{config: pssq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pssq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisioningscheduledstep.Table, provisioningscheduledstep.FieldID, selector),
			sqlgraph.To(status.Table, status.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, provisioningscheduledstep.ProvisioningScheduledStepToStatusTable, provisioningscheduledstep.ProvisioningScheduledStepToStatusColumn),
		)
		fromU = sqlgraph.SetNeighbors(pssq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisioningScheduledStepToScheduledStep chains the current query on the "ProvisioningScheduledStepToScheduledStep" edge.
func (pssq *ProvisioningScheduledStepQuery) QueryProvisioningScheduledStepToScheduledStep() *ScheduledStepQuery {
	query := &ScheduledStepQuery{config: pssq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pssq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisioningscheduledstep.Table, provisioningscheduledstep.FieldID, selector),
			sqlgraph.To(scheduledstep.Table, scheduledstep.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, provisioningscheduledstep.ProvisioningScheduledStepToScheduledStepTable, provisioningscheduledstep.ProvisioningScheduledStepToScheduledStepColumn),
		)
		fromU = sqlgraph.SetNeighbors(pssq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisioningScheduleStepToProvisionedHost chains the current query on the "ProvisioningScheduleStepToProvisionedHost" edge.
func (pssq *ProvisioningScheduledStepQuery) QueryProvisioningScheduleStepToProvisionedHost() *ProvisionedHostQuery {
	query := &ProvisionedHostQuery{config: pssq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pssq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisioningscheduledstep.Table, provisioningscheduledstep.FieldID, selector),
			sqlgraph.To(provisionedhost.Table, provisionedhost.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, provisioningscheduledstep.ProvisioningScheduleStepToProvisionedHostTable, provisioningscheduledstep.ProvisioningScheduleStepToProvisionedHostColumn),
		)
		fromU = sqlgraph.SetNeighbors(pssq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisioningScheduledStepToScript chains the current query on the "ProvisioningScheduledStepToScript" edge.
func (pssq *ProvisioningScheduledStepQuery) QueryProvisioningScheduledStepToScript() *ScriptQuery {
	query := &ScriptQuery{config: pssq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pssq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisioningscheduledstep.Table, provisioningscheduledstep.FieldID, selector),
			sqlgraph.To(script.Table, script.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, provisioningscheduledstep.ProvisioningScheduledStepToScriptTable, provisioningscheduledstep.ProvisioningScheduledStepToScriptColumn),
		)
		fromU = sqlgraph.SetNeighbors(pssq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisioningScheduledStepToCommand chains the current query on the "ProvisioningScheduledStepToCommand" edge.
func (pssq *ProvisioningScheduledStepQuery) QueryProvisioningScheduledStepToCommand() *CommandQuery {
	query := &CommandQuery{config: pssq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pssq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisioningscheduledstep.Table, provisioningscheduledstep.FieldID, selector),
			sqlgraph.To(command.Table, command.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, provisioningscheduledstep.ProvisioningScheduledStepToCommandTable, provisioningscheduledstep.ProvisioningScheduledStepToCommandColumn),
		)
		fromU = sqlgraph.SetNeighbors(pssq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisioningScheduledStepToDNSRecord chains the current query on the "ProvisioningScheduledStepToDNSRecord" edge.
func (pssq *ProvisioningScheduledStepQuery) QueryProvisioningScheduledStepToDNSRecord() *DNSRecordQuery {
	query := &DNSRecordQuery{config: pssq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pssq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisioningscheduledstep.Table, provisioningscheduledstep.FieldID, selector),
			sqlgraph.To(dnsrecord.Table, dnsrecord.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, provisioningscheduledstep.ProvisioningScheduledStepToDNSRecordTable, provisioningscheduledstep.ProvisioningScheduledStepToDNSRecordColumn),
		)
		fromU = sqlgraph.SetNeighbors(pssq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisioningScheduledStepToFileDelete chains the current query on the "ProvisioningScheduledStepToFileDelete" edge.
func (pssq *ProvisioningScheduledStepQuery) QueryProvisioningScheduledStepToFileDelete() *FileDeleteQuery {
	query := &FileDeleteQuery{config: pssq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pssq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisioningscheduledstep.Table, provisioningscheduledstep.FieldID, selector),
			sqlgraph.To(filedelete.Table, filedelete.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, provisioningscheduledstep.ProvisioningScheduledStepToFileDeleteTable, provisioningscheduledstep.ProvisioningScheduledStepToFileDeleteColumn),
		)
		fromU = sqlgraph.SetNeighbors(pssq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisioningScheduledStepToFileDownload chains the current query on the "ProvisioningScheduledStepToFileDownload" edge.
func (pssq *ProvisioningScheduledStepQuery) QueryProvisioningScheduledStepToFileDownload() *FileDownloadQuery {
	query := &FileDownloadQuery{config: pssq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pssq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisioningscheduledstep.Table, provisioningscheduledstep.FieldID, selector),
			sqlgraph.To(filedownload.Table, filedownload.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, provisioningscheduledstep.ProvisioningScheduledStepToFileDownloadTable, provisioningscheduledstep.ProvisioningScheduledStepToFileDownloadColumn),
		)
		fromU = sqlgraph.SetNeighbors(pssq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisioningScheduledStepToFileExtract chains the current query on the "ProvisioningScheduledStepToFileExtract" edge.
func (pssq *ProvisioningScheduledStepQuery) QueryProvisioningScheduledStepToFileExtract() *FileExtractQuery {
	query := &FileExtractQuery{config: pssq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pssq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisioningscheduledstep.Table, provisioningscheduledstep.FieldID, selector),
			sqlgraph.To(fileextract.Table, fileextract.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, provisioningscheduledstep.ProvisioningScheduledStepToFileExtractTable, provisioningscheduledstep.ProvisioningScheduledStepToFileExtractColumn),
		)
		fromU = sqlgraph.SetNeighbors(pssq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisioningScheduledStepToAnsible chains the current query on the "ProvisioningScheduledStepToAnsible" edge.
func (pssq *ProvisioningScheduledStepQuery) QueryProvisioningScheduledStepToAnsible() *AnsibleQuery {
	query := &AnsibleQuery{config: pssq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pssq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisioningscheduledstep.Table, provisioningscheduledstep.FieldID, selector),
			sqlgraph.To(ansible.Table, ansible.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, provisioningscheduledstep.ProvisioningScheduledStepToAnsibleTable, provisioningscheduledstep.ProvisioningScheduledStepToAnsibleColumn),
		)
		fromU = sqlgraph.SetNeighbors(pssq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisioningScheduledStepToAgentTask chains the current query on the "ProvisioningScheduledStepToAgentTask" edge.
func (pssq *ProvisioningScheduledStepQuery) QueryProvisioningScheduledStepToAgentTask() *AgentTaskQuery {
	query := &AgentTaskQuery{config: pssq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pssq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisioningscheduledstep.Table, provisioningscheduledstep.FieldID, selector),
			sqlgraph.To(agenttask.Table, agenttask.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, provisioningscheduledstep.ProvisioningScheduledStepToAgentTaskTable, provisioningscheduledstep.ProvisioningScheduledStepToAgentTaskColumn),
		)
		fromU = sqlgraph.SetNeighbors(pssq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisioningStepToPlan chains the current query on the "ProvisioningStepToPlan" edge.
func (pssq *ProvisioningScheduledStepQuery) QueryProvisioningStepToPlan() *PlanQuery {
	query := &PlanQuery{config: pssq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pssq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisioningscheduledstep.Table, provisioningscheduledstep.FieldID, selector),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, provisioningscheduledstep.ProvisioningStepToPlanTable, provisioningscheduledstep.ProvisioningStepToPlanColumn),
		)
		fromU = sqlgraph.SetNeighbors(pssq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisioningScheduledStepToGinFileMiddleware chains the current query on the "ProvisioningScheduledStepToGinFileMiddleware" edge.
func (pssq *ProvisioningScheduledStepQuery) QueryProvisioningScheduledStepToGinFileMiddleware() *GinFileMiddlewareQuery {
	query := &GinFileMiddlewareQuery{config: pssq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pssq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisioningscheduledstep.Table, provisioningscheduledstep.FieldID, selector),
			sqlgraph.To(ginfilemiddleware.Table, ginfilemiddleware.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, provisioningscheduledstep.ProvisioningScheduledStepToGinFileMiddlewareTable, provisioningscheduledstep.ProvisioningScheduledStepToGinFileMiddlewareColumn),
		)
		fromU = sqlgraph.SetNeighbors(pssq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ProvisioningScheduledStep entity from the query.
// Returns a *NotFoundError when no ProvisioningScheduledStep was found.
func (pssq *ProvisioningScheduledStepQuery) First(ctx context.Context) (*ProvisioningScheduledStep, error) {
	nodes, err := pssq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{provisioningscheduledstep.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pssq *ProvisioningScheduledStepQuery) FirstX(ctx context.Context) *ProvisioningScheduledStep {
	node, err := pssq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ProvisioningScheduledStep ID from the query.
// Returns a *NotFoundError when no ProvisioningScheduledStep ID was found.
func (pssq *ProvisioningScheduledStepQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = pssq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{provisioningscheduledstep.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pssq *ProvisioningScheduledStepQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := pssq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ProvisioningScheduledStep entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ProvisioningScheduledStep entity is found.
// Returns a *NotFoundError when no ProvisioningScheduledStep entities are found.
func (pssq *ProvisioningScheduledStepQuery) Only(ctx context.Context) (*ProvisioningScheduledStep, error) {
	nodes, err := pssq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{provisioningscheduledstep.Label}
	default:
		return nil, &NotSingularError{provisioningscheduledstep.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pssq *ProvisioningScheduledStepQuery) OnlyX(ctx context.Context) *ProvisioningScheduledStep {
	node, err := pssq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ProvisioningScheduledStep ID in the query.
// Returns a *NotSingularError when more than one ProvisioningScheduledStep ID is found.
// Returns a *NotFoundError when no entities are found.
func (pssq *ProvisioningScheduledStepQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = pssq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{provisioningscheduledstep.Label}
	default:
		err = &NotSingularError{provisioningscheduledstep.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pssq *ProvisioningScheduledStepQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := pssq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ProvisioningScheduledSteps.
func (pssq *ProvisioningScheduledStepQuery) All(ctx context.Context) ([]*ProvisioningScheduledStep, error) {
	if err := pssq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return pssq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (pssq *ProvisioningScheduledStepQuery) AllX(ctx context.Context) []*ProvisioningScheduledStep {
	nodes, err := pssq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ProvisioningScheduledStep IDs.
func (pssq *ProvisioningScheduledStepQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := pssq.Select(provisioningscheduledstep.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pssq *ProvisioningScheduledStepQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := pssq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pssq *ProvisioningScheduledStepQuery) Count(ctx context.Context) (int, error) {
	if err := pssq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return pssq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (pssq *ProvisioningScheduledStepQuery) CountX(ctx context.Context) int {
	count, err := pssq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pssq *ProvisioningScheduledStepQuery) Exist(ctx context.Context) (bool, error) {
	if err := pssq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return pssq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (pssq *ProvisioningScheduledStepQuery) ExistX(ctx context.Context) bool {
	exist, err := pssq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ProvisioningScheduledStepQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pssq *ProvisioningScheduledStepQuery) Clone() *ProvisioningScheduledStepQuery {
	if pssq == nil {
		return nil
	}
	return &ProvisioningScheduledStepQuery{
		config:                                pssq.config,
		limit:                                 pssq.limit,
		offset:                                pssq.offset,
		order:                                 append([]OrderFunc{}, pssq.order...),
		predicates:                            append([]predicate.ProvisioningScheduledStep{}, pssq.predicates...),
		withProvisioningScheduledStepToStatus: pssq.withProvisioningScheduledStepToStatus.Clone(),
		withProvisioningScheduledStepToScheduledStep:     pssq.withProvisioningScheduledStepToScheduledStep.Clone(),
		withProvisioningScheduleStepToProvisionedHost:    pssq.withProvisioningScheduleStepToProvisionedHost.Clone(),
		withProvisioningScheduledStepToScript:            pssq.withProvisioningScheduledStepToScript.Clone(),
		withProvisioningScheduledStepToCommand:           pssq.withProvisioningScheduledStepToCommand.Clone(),
		withProvisioningScheduledStepToDNSRecord:         pssq.withProvisioningScheduledStepToDNSRecord.Clone(),
		withProvisioningScheduledStepToFileDelete:        pssq.withProvisioningScheduledStepToFileDelete.Clone(),
		withProvisioningScheduledStepToFileDownload:      pssq.withProvisioningScheduledStepToFileDownload.Clone(),
		withProvisioningScheduledStepToFileExtract:       pssq.withProvisioningScheduledStepToFileExtract.Clone(),
		withProvisioningScheduledStepToAnsible:           pssq.withProvisioningScheduledStepToAnsible.Clone(),
		withProvisioningScheduledStepToAgentTask:         pssq.withProvisioningScheduledStepToAgentTask.Clone(),
		withProvisioningStepToPlan:                       pssq.withProvisioningStepToPlan.Clone(),
		withProvisioningScheduledStepToGinFileMiddleware: pssq.withProvisioningScheduledStepToGinFileMiddleware.Clone(),
		// clone intermediate query.
		sql:    pssq.sql.Clone(),
		path:   pssq.path,
		unique: pssq.unique,
	}
}

// WithProvisioningScheduledStepToStatus tells the query-builder to eager-load the nodes that are connected to
// the "ProvisioningScheduledStepToStatus" edge. The optional arguments are used to configure the query builder of the edge.
func (pssq *ProvisioningScheduledStepQuery) WithProvisioningScheduledStepToStatus(opts ...func(*StatusQuery)) *ProvisioningScheduledStepQuery {
	query := &StatusQuery{config: pssq.config}
	for _, opt := range opts {
		opt(query)
	}
	pssq.withProvisioningScheduledStepToStatus = query
	return pssq
}

// WithProvisioningScheduledStepToScheduledStep tells the query-builder to eager-load the nodes that are connected to
// the "ProvisioningScheduledStepToScheduledStep" edge. The optional arguments are used to configure the query builder of the edge.
func (pssq *ProvisioningScheduledStepQuery) WithProvisioningScheduledStepToScheduledStep(opts ...func(*ScheduledStepQuery)) *ProvisioningScheduledStepQuery {
	query := &ScheduledStepQuery{config: pssq.config}
	for _, opt := range opts {
		opt(query)
	}
	pssq.withProvisioningScheduledStepToScheduledStep = query
	return pssq
}

// WithProvisioningScheduleStepToProvisionedHost tells the query-builder to eager-load the nodes that are connected to
// the "ProvisioningScheduleStepToProvisionedHost" edge. The optional arguments are used to configure the query builder of the edge.
func (pssq *ProvisioningScheduledStepQuery) WithProvisioningScheduleStepToProvisionedHost(opts ...func(*ProvisionedHostQuery)) *ProvisioningScheduledStepQuery {
	query := &ProvisionedHostQuery{config: pssq.config}
	for _, opt := range opts {
		opt(query)
	}
	pssq.withProvisioningScheduleStepToProvisionedHost = query
	return pssq
}

// WithProvisioningScheduledStepToScript tells the query-builder to eager-load the nodes that are connected to
// the "ProvisioningScheduledStepToScript" edge. The optional arguments are used to configure the query builder of the edge.
func (pssq *ProvisioningScheduledStepQuery) WithProvisioningScheduledStepToScript(opts ...func(*ScriptQuery)) *ProvisioningScheduledStepQuery {
	query := &ScriptQuery{config: pssq.config}
	for _, opt := range opts {
		opt(query)
	}
	pssq.withProvisioningScheduledStepToScript = query
	return pssq
}

// WithProvisioningScheduledStepToCommand tells the query-builder to eager-load the nodes that are connected to
// the "ProvisioningScheduledStepToCommand" edge. The optional arguments are used to configure the query builder of the edge.
func (pssq *ProvisioningScheduledStepQuery) WithProvisioningScheduledStepToCommand(opts ...func(*CommandQuery)) *ProvisioningScheduledStepQuery {
	query := &CommandQuery{config: pssq.config}
	for _, opt := range opts {
		opt(query)
	}
	pssq.withProvisioningScheduledStepToCommand = query
	return pssq
}

// WithProvisioningScheduledStepToDNSRecord tells the query-builder to eager-load the nodes that are connected to
// the "ProvisioningScheduledStepToDNSRecord" edge. The optional arguments are used to configure the query builder of the edge.
func (pssq *ProvisioningScheduledStepQuery) WithProvisioningScheduledStepToDNSRecord(opts ...func(*DNSRecordQuery)) *ProvisioningScheduledStepQuery {
	query := &DNSRecordQuery{config: pssq.config}
	for _, opt := range opts {
		opt(query)
	}
	pssq.withProvisioningScheduledStepToDNSRecord = query
	return pssq
}

// WithProvisioningScheduledStepToFileDelete tells the query-builder to eager-load the nodes that are connected to
// the "ProvisioningScheduledStepToFileDelete" edge. The optional arguments are used to configure the query builder of the edge.
func (pssq *ProvisioningScheduledStepQuery) WithProvisioningScheduledStepToFileDelete(opts ...func(*FileDeleteQuery)) *ProvisioningScheduledStepQuery {
	query := &FileDeleteQuery{config: pssq.config}
	for _, opt := range opts {
		opt(query)
	}
	pssq.withProvisioningScheduledStepToFileDelete = query
	return pssq
}

// WithProvisioningScheduledStepToFileDownload tells the query-builder to eager-load the nodes that are connected to
// the "ProvisioningScheduledStepToFileDownload" edge. The optional arguments are used to configure the query builder of the edge.
func (pssq *ProvisioningScheduledStepQuery) WithProvisioningScheduledStepToFileDownload(opts ...func(*FileDownloadQuery)) *ProvisioningScheduledStepQuery {
	query := &FileDownloadQuery{config: pssq.config}
	for _, opt := range opts {
		opt(query)
	}
	pssq.withProvisioningScheduledStepToFileDownload = query
	return pssq
}

// WithProvisioningScheduledStepToFileExtract tells the query-builder to eager-load the nodes that are connected to
// the "ProvisioningScheduledStepToFileExtract" edge. The optional arguments are used to configure the query builder of the edge.
func (pssq *ProvisioningScheduledStepQuery) WithProvisioningScheduledStepToFileExtract(opts ...func(*FileExtractQuery)) *ProvisioningScheduledStepQuery {
	query := &FileExtractQuery{config: pssq.config}
	for _, opt := range opts {
		opt(query)
	}
	pssq.withProvisioningScheduledStepToFileExtract = query
	return pssq
}

// WithProvisioningScheduledStepToAnsible tells the query-builder to eager-load the nodes that are connected to
// the "ProvisioningScheduledStepToAnsible" edge. The optional arguments are used to configure the query builder of the edge.
func (pssq *ProvisioningScheduledStepQuery) WithProvisioningScheduledStepToAnsible(opts ...func(*AnsibleQuery)) *ProvisioningScheduledStepQuery {
	query := &AnsibleQuery{config: pssq.config}
	for _, opt := range opts {
		opt(query)
	}
	pssq.withProvisioningScheduledStepToAnsible = query
	return pssq
}

// WithProvisioningScheduledStepToAgentTask tells the query-builder to eager-load the nodes that are connected to
// the "ProvisioningScheduledStepToAgentTask" edge. The optional arguments are used to configure the query builder of the edge.
func (pssq *ProvisioningScheduledStepQuery) WithProvisioningScheduledStepToAgentTask(opts ...func(*AgentTaskQuery)) *ProvisioningScheduledStepQuery {
	query := &AgentTaskQuery{config: pssq.config}
	for _, opt := range opts {
		opt(query)
	}
	pssq.withProvisioningScheduledStepToAgentTask = query
	return pssq
}

// WithProvisioningStepToPlan tells the query-builder to eager-load the nodes that are connected to
// the "ProvisioningStepToPlan" edge. The optional arguments are used to configure the query builder of the edge.
func (pssq *ProvisioningScheduledStepQuery) WithProvisioningStepToPlan(opts ...func(*PlanQuery)) *ProvisioningScheduledStepQuery {
	query := &PlanQuery{config: pssq.config}
	for _, opt := range opts {
		opt(query)
	}
	pssq.withProvisioningStepToPlan = query
	return pssq
}

// WithProvisioningScheduledStepToGinFileMiddleware tells the query-builder to eager-load the nodes that are connected to
// the "ProvisioningScheduledStepToGinFileMiddleware" edge. The optional arguments are used to configure the query builder of the edge.
func (pssq *ProvisioningScheduledStepQuery) WithProvisioningScheduledStepToGinFileMiddleware(opts ...func(*GinFileMiddlewareQuery)) *ProvisioningScheduledStepQuery {
	query := &GinFileMiddlewareQuery{config: pssq.config}
	for _, opt := range opts {
		opt(query)
	}
	pssq.withProvisioningScheduledStepToGinFileMiddleware = query
	return pssq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Type provisioningscheduledstep.Type `json:"type,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ProvisioningScheduledStep.Query().
//		GroupBy(provisioningscheduledstep.FieldType).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (pssq *ProvisioningScheduledStepQuery) GroupBy(field string, fields ...string) *ProvisioningScheduledStepGroupBy {
	grbuild := &ProvisioningScheduledStepGroupBy{config: pssq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := pssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return pssq.sqlQuery(ctx), nil
	}
	grbuild.label = provisioningscheduledstep.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Type provisioningscheduledstep.Type `json:"type,omitempty"`
//	}
//
//	client.ProvisioningScheduledStep.Query().
//		Select(provisioningscheduledstep.FieldType).
//		Scan(ctx, &v)
func (pssq *ProvisioningScheduledStepQuery) Select(fields ...string) *ProvisioningScheduledStepSelect {
	pssq.fields = append(pssq.fields, fields...)
	selbuild := &ProvisioningScheduledStepSelect{ProvisioningScheduledStepQuery: pssq}
	selbuild.label = provisioningscheduledstep.Label
	selbuild.flds, selbuild.scan = &pssq.fields, selbuild.Scan
	return selbuild
}

func (pssq *ProvisioningScheduledStepQuery) prepareQuery(ctx context.Context) error {
	for _, f := range pssq.fields {
		if !provisioningscheduledstep.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pssq.path != nil {
		prev, err := pssq.path(ctx)
		if err != nil {
			return err
		}
		pssq.sql = prev
	}
	return nil
}

func (pssq *ProvisioningScheduledStepQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ProvisioningScheduledStep, error) {
	var (
		nodes       = []*ProvisioningScheduledStep{}
		withFKs     = pssq.withFKs
		_spec       = pssq.querySpec()
		loadedTypes = [13]bool{
			pssq.withProvisioningScheduledStepToStatus != nil,
			pssq.withProvisioningScheduledStepToScheduledStep != nil,
			pssq.withProvisioningScheduleStepToProvisionedHost != nil,
			pssq.withProvisioningScheduledStepToScript != nil,
			pssq.withProvisioningScheduledStepToCommand != nil,
			pssq.withProvisioningScheduledStepToDNSRecord != nil,
			pssq.withProvisioningScheduledStepToFileDelete != nil,
			pssq.withProvisioningScheduledStepToFileDownload != nil,
			pssq.withProvisioningScheduledStepToFileExtract != nil,
			pssq.withProvisioningScheduledStepToAnsible != nil,
			pssq.withProvisioningScheduledStepToAgentTask != nil,
			pssq.withProvisioningStepToPlan != nil,
			pssq.withProvisioningScheduledStepToGinFileMiddleware != nil,
		}
	)
	if pssq.withProvisioningScheduledStepToScheduledStep != nil || pssq.withProvisioningScheduleStepToProvisionedHost != nil || pssq.withProvisioningScheduledStepToScript != nil || pssq.withProvisioningScheduledStepToCommand != nil || pssq.withProvisioningScheduledStepToDNSRecord != nil || pssq.withProvisioningScheduledStepToFileDelete != nil || pssq.withProvisioningScheduledStepToFileDownload != nil || pssq.withProvisioningScheduledStepToFileExtract != nil || pssq.withProvisioningScheduledStepToAnsible != nil || pssq.withProvisioningScheduledStepToAgentTask != nil || pssq.withProvisioningStepToPlan != nil || pssq.withProvisioningScheduledStepToGinFileMiddleware != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, provisioningscheduledstep.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*ProvisioningScheduledStep).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &ProvisioningScheduledStep{config: pssq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pssq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := pssq.withProvisioningScheduledStepToStatus; query != nil {
		if err := pssq.loadProvisioningScheduledStepToStatus(ctx, query, nodes, nil,
			func(n *ProvisioningScheduledStep, e *Status) { n.Edges.ProvisioningScheduledStepToStatus = e }); err != nil {
			return nil, err
		}
	}
	if query := pssq.withProvisioningScheduledStepToScheduledStep; query != nil {
		if err := pssq.loadProvisioningScheduledStepToScheduledStep(ctx, query, nodes, nil,
			func(n *ProvisioningScheduledStep, e *ScheduledStep) {
				n.Edges.ProvisioningScheduledStepToScheduledStep = e
			}); err != nil {
			return nil, err
		}
	}
	if query := pssq.withProvisioningScheduleStepToProvisionedHost; query != nil {
		if err := pssq.loadProvisioningScheduleStepToProvisionedHost(ctx, query, nodes, nil,
			func(n *ProvisioningScheduledStep, e *ProvisionedHost) {
				n.Edges.ProvisioningScheduleStepToProvisionedHost = e
			}); err != nil {
			return nil, err
		}
	}
	if query := pssq.withProvisioningScheduledStepToScript; query != nil {
		if err := pssq.loadProvisioningScheduledStepToScript(ctx, query, nodes, nil,
			func(n *ProvisioningScheduledStep, e *Script) { n.Edges.ProvisioningScheduledStepToScript = e }); err != nil {
			return nil, err
		}
	}
	if query := pssq.withProvisioningScheduledStepToCommand; query != nil {
		if err := pssq.loadProvisioningScheduledStepToCommand(ctx, query, nodes, nil,
			func(n *ProvisioningScheduledStep, e *Command) { n.Edges.ProvisioningScheduledStepToCommand = e }); err != nil {
			return nil, err
		}
	}
	if query := pssq.withProvisioningScheduledStepToDNSRecord; query != nil {
		if err := pssq.loadProvisioningScheduledStepToDNSRecord(ctx, query, nodes, nil,
			func(n *ProvisioningScheduledStep, e *DNSRecord) { n.Edges.ProvisioningScheduledStepToDNSRecord = e }); err != nil {
			return nil, err
		}
	}
	if query := pssq.withProvisioningScheduledStepToFileDelete; query != nil {
		if err := pssq.loadProvisioningScheduledStepToFileDelete(ctx, query, nodes, nil,
			func(n *ProvisioningScheduledStep, e *FileDelete) { n.Edges.ProvisioningScheduledStepToFileDelete = e }); err != nil {
			return nil, err
		}
	}
	if query := pssq.withProvisioningScheduledStepToFileDownload; query != nil {
		if err := pssq.loadProvisioningScheduledStepToFileDownload(ctx, query, nodes, nil,
			func(n *ProvisioningScheduledStep, e *FileDownload) {
				n.Edges.ProvisioningScheduledStepToFileDownload = e
			}); err != nil {
			return nil, err
		}
	}
	if query := pssq.withProvisioningScheduledStepToFileExtract; query != nil {
		if err := pssq.loadProvisioningScheduledStepToFileExtract(ctx, query, nodes, nil,
			func(n *ProvisioningScheduledStep, e *FileExtract) { n.Edges.ProvisioningScheduledStepToFileExtract = e }); err != nil {
			return nil, err
		}
	}
	if query := pssq.withProvisioningScheduledStepToAnsible; query != nil {
		if err := pssq.loadProvisioningScheduledStepToAnsible(ctx, query, nodes, nil,
			func(n *ProvisioningScheduledStep, e *Ansible) { n.Edges.ProvisioningScheduledStepToAnsible = e }); err != nil {
			return nil, err
		}
	}
	if query := pssq.withProvisioningScheduledStepToAgentTask; query != nil {
		if err := pssq.loadProvisioningScheduledStepToAgentTask(ctx, query, nodes, nil,
			func(n *ProvisioningScheduledStep, e *AgentTask) { n.Edges.ProvisioningScheduledStepToAgentTask = e }); err != nil {
			return nil, err
		}
	}
	if query := pssq.withProvisioningStepToPlan; query != nil {
		if err := pssq.loadProvisioningStepToPlan(ctx, query, nodes, nil,
			func(n *ProvisioningScheduledStep, e *Plan) { n.Edges.ProvisioningStepToPlan = e }); err != nil {
			return nil, err
		}
	}
	if query := pssq.withProvisioningScheduledStepToGinFileMiddleware; query != nil {
		if err := pssq.loadProvisioningScheduledStepToGinFileMiddleware(ctx, query, nodes, nil,
			func(n *ProvisioningScheduledStep, e *GinFileMiddleware) {
				n.Edges.ProvisioningScheduledStepToGinFileMiddleware = e
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pssq *ProvisioningScheduledStepQuery) loadProvisioningScheduledStepToStatus(ctx context.Context, query *StatusQuery, nodes []*ProvisioningScheduledStep, init func(*ProvisioningScheduledStep), assign func(*ProvisioningScheduledStep, *Status)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*ProvisioningScheduledStep)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.Status(func(s *sql.Selector) {
		s.Where(sql.InValues(provisioningscheduledstep.ProvisioningScheduledStepToStatusColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.provisioning_scheduled_step_provisioning_scheduled_step_to_status
		if fk == nil {
			return fmt.Errorf(`foreign-key "provisioning_scheduled_step_provisioning_scheduled_step_to_status" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "provisioning_scheduled_step_provisioning_scheduled_step_to_status" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pssq *ProvisioningScheduledStepQuery) loadProvisioningScheduledStepToScheduledStep(ctx context.Context, query *ScheduledStepQuery, nodes []*ProvisioningScheduledStep, init func(*ProvisioningScheduledStep), assign func(*ProvisioningScheduledStep, *ScheduledStep)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ProvisioningScheduledStep)
	for i := range nodes {
		if nodes[i].provisioning_scheduled_step_provisioning_scheduled_step_to_scheduled_step == nil {
			continue
		}
		fk := *nodes[i].provisioning_scheduled_step_provisioning_scheduled_step_to_scheduled_step
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(scheduledstep.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "provisioning_scheduled_step_provisioning_scheduled_step_to_scheduled_step" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pssq *ProvisioningScheduledStepQuery) loadProvisioningScheduleStepToProvisionedHost(ctx context.Context, query *ProvisionedHostQuery, nodes []*ProvisioningScheduledStep, init func(*ProvisioningScheduledStep), assign func(*ProvisioningScheduledStep, *ProvisionedHost)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ProvisioningScheduledStep)
	for i := range nodes {
		if nodes[i].provisioning_scheduled_step_provisioning_schedule_step_to_provisioned_host == nil {
			continue
		}
		fk := *nodes[i].provisioning_scheduled_step_provisioning_schedule_step_to_provisioned_host
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(provisionedhost.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "provisioning_scheduled_step_provisioning_schedule_step_to_provisioned_host" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pssq *ProvisioningScheduledStepQuery) loadProvisioningScheduledStepToScript(ctx context.Context, query *ScriptQuery, nodes []*ProvisioningScheduledStep, init func(*ProvisioningScheduledStep), assign func(*ProvisioningScheduledStep, *Script)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ProvisioningScheduledStep)
	for i := range nodes {
		if nodes[i].provisioning_scheduled_step_provisioning_scheduled_step_to_script == nil {
			continue
		}
		fk := *nodes[i].provisioning_scheduled_step_provisioning_scheduled_step_to_script
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(script.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "provisioning_scheduled_step_provisioning_scheduled_step_to_script" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pssq *ProvisioningScheduledStepQuery) loadProvisioningScheduledStepToCommand(ctx context.Context, query *CommandQuery, nodes []*ProvisioningScheduledStep, init func(*ProvisioningScheduledStep), assign func(*ProvisioningScheduledStep, *Command)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ProvisioningScheduledStep)
	for i := range nodes {
		if nodes[i].provisioning_scheduled_step_provisioning_scheduled_step_to_command == nil {
			continue
		}
		fk := *nodes[i].provisioning_scheduled_step_provisioning_scheduled_step_to_command
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(command.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "provisioning_scheduled_step_provisioning_scheduled_step_to_command" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pssq *ProvisioningScheduledStepQuery) loadProvisioningScheduledStepToDNSRecord(ctx context.Context, query *DNSRecordQuery, nodes []*ProvisioningScheduledStep, init func(*ProvisioningScheduledStep), assign func(*ProvisioningScheduledStep, *DNSRecord)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ProvisioningScheduledStep)
	for i := range nodes {
		if nodes[i].provisioning_scheduled_step_provisioning_scheduled_step_to_dns_record == nil {
			continue
		}
		fk := *nodes[i].provisioning_scheduled_step_provisioning_scheduled_step_to_dns_record
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(dnsrecord.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "provisioning_scheduled_step_provisioning_scheduled_step_to_dns_record" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pssq *ProvisioningScheduledStepQuery) loadProvisioningScheduledStepToFileDelete(ctx context.Context, query *FileDeleteQuery, nodes []*ProvisioningScheduledStep, init func(*ProvisioningScheduledStep), assign func(*ProvisioningScheduledStep, *FileDelete)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ProvisioningScheduledStep)
	for i := range nodes {
		if nodes[i].provisioning_scheduled_step_provisioning_scheduled_step_to_file_delete == nil {
			continue
		}
		fk := *nodes[i].provisioning_scheduled_step_provisioning_scheduled_step_to_file_delete
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(filedelete.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "provisioning_scheduled_step_provisioning_scheduled_step_to_file_delete" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pssq *ProvisioningScheduledStepQuery) loadProvisioningScheduledStepToFileDownload(ctx context.Context, query *FileDownloadQuery, nodes []*ProvisioningScheduledStep, init func(*ProvisioningScheduledStep), assign func(*ProvisioningScheduledStep, *FileDownload)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ProvisioningScheduledStep)
	for i := range nodes {
		if nodes[i].provisioning_scheduled_step_provisioning_scheduled_step_to_file_download == nil {
			continue
		}
		fk := *nodes[i].provisioning_scheduled_step_provisioning_scheduled_step_to_file_download
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(filedownload.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "provisioning_scheduled_step_provisioning_scheduled_step_to_file_download" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pssq *ProvisioningScheduledStepQuery) loadProvisioningScheduledStepToFileExtract(ctx context.Context, query *FileExtractQuery, nodes []*ProvisioningScheduledStep, init func(*ProvisioningScheduledStep), assign func(*ProvisioningScheduledStep, *FileExtract)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ProvisioningScheduledStep)
	for i := range nodes {
		if nodes[i].provisioning_scheduled_step_provisioning_scheduled_step_to_file_extract == nil {
			continue
		}
		fk := *nodes[i].provisioning_scheduled_step_provisioning_scheduled_step_to_file_extract
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(fileextract.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "provisioning_scheduled_step_provisioning_scheduled_step_to_file_extract" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pssq *ProvisioningScheduledStepQuery) loadProvisioningScheduledStepToAnsible(ctx context.Context, query *AnsibleQuery, nodes []*ProvisioningScheduledStep, init func(*ProvisioningScheduledStep), assign func(*ProvisioningScheduledStep, *Ansible)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ProvisioningScheduledStep)
	for i := range nodes {
		if nodes[i].provisioning_scheduled_step_provisioning_scheduled_step_to_ansible == nil {
			continue
		}
		fk := *nodes[i].provisioning_scheduled_step_provisioning_scheduled_step_to_ansible
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(ansible.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "provisioning_scheduled_step_provisioning_scheduled_step_to_ansible" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pssq *ProvisioningScheduledStepQuery) loadProvisioningScheduledStepToAgentTask(ctx context.Context, query *AgentTaskQuery, nodes []*ProvisioningScheduledStep, init func(*ProvisioningScheduledStep), assign func(*ProvisioningScheduledStep, *AgentTask)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ProvisioningScheduledStep)
	for i := range nodes {
		if nodes[i].agent_task_agent_task_to_provisioning_scheduled_step == nil {
			continue
		}
		fk := *nodes[i].agent_task_agent_task_to_provisioning_scheduled_step
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(agenttask.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "agent_task_agent_task_to_provisioning_scheduled_step" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pssq *ProvisioningScheduledStepQuery) loadProvisioningStepToPlan(ctx context.Context, query *PlanQuery, nodes []*ProvisioningScheduledStep, init func(*ProvisioningScheduledStep), assign func(*ProvisioningScheduledStep, *Plan)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ProvisioningScheduledStep)
	for i := range nodes {
		if nodes[i].plan_plan_to_provisioning_scheduled_step == nil {
			continue
		}
		fk := *nodes[i].plan_plan_to_provisioning_scheduled_step
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(plan.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "plan_plan_to_provisioning_scheduled_step" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pssq *ProvisioningScheduledStepQuery) loadProvisioningScheduledStepToGinFileMiddleware(ctx context.Context, query *GinFileMiddlewareQuery, nodes []*ProvisioningScheduledStep, init func(*ProvisioningScheduledStep), assign func(*ProvisioningScheduledStep, *GinFileMiddleware)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ProvisioningScheduledStep)
	for i := range nodes {
		if nodes[i].gin_file_middleware_gin_file_middleware_to_provisioning_scheduled_step == nil {
			continue
		}
		fk := *nodes[i].gin_file_middleware_gin_file_middleware_to_provisioning_scheduled_step
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(ginfilemiddleware.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "gin_file_middleware_gin_file_middleware_to_provisioning_scheduled_step" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (pssq *ProvisioningScheduledStepQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pssq.querySpec()
	_spec.Node.Columns = pssq.fields
	if len(pssq.fields) > 0 {
		_spec.Unique = pssq.unique != nil && *pssq.unique
	}
	return sqlgraph.CountNodes(ctx, pssq.driver, _spec)
}

func (pssq *ProvisioningScheduledStepQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := pssq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (pssq *ProvisioningScheduledStepQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   provisioningscheduledstep.Table,
			Columns: provisioningscheduledstep.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: provisioningscheduledstep.FieldID,
			},
		},
		From:   pssq.sql,
		Unique: true,
	}
	if unique := pssq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := pssq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, provisioningscheduledstep.FieldID)
		for i := range fields {
			if fields[i] != provisioningscheduledstep.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := pssq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pssq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pssq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pssq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pssq *ProvisioningScheduledStepQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pssq.driver.Dialect())
	t1 := builder.Table(provisioningscheduledstep.Table)
	columns := pssq.fields
	if len(columns) == 0 {
		columns = provisioningscheduledstep.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pssq.sql != nil {
		selector = pssq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pssq.unique != nil && *pssq.unique {
		selector.Distinct()
	}
	for _, p := range pssq.predicates {
		p(selector)
	}
	for _, p := range pssq.order {
		p(selector)
	}
	if offset := pssq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pssq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ProvisioningScheduledStepGroupBy is the group-by builder for ProvisioningScheduledStep entities.
type ProvisioningScheduledStepGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pssgb *ProvisioningScheduledStepGroupBy) Aggregate(fns ...AggregateFunc) *ProvisioningScheduledStepGroupBy {
	pssgb.fns = append(pssgb.fns, fns...)
	return pssgb
}

// Scan applies the group-by query and scans the result into the given value.
func (pssgb *ProvisioningScheduledStepGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := pssgb.path(ctx)
	if err != nil {
		return err
	}
	pssgb.sql = query
	return pssgb.sqlScan(ctx, v)
}

func (pssgb *ProvisioningScheduledStepGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range pssgb.fields {
		if !provisioningscheduledstep.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := pssgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pssgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (pssgb *ProvisioningScheduledStepGroupBy) sqlQuery() *sql.Selector {
	selector := pssgb.sql.Select()
	aggregation := make([]string, 0, len(pssgb.fns))
	for _, fn := range pssgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(pssgb.fields)+len(pssgb.fns))
		for _, f := range pssgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(pssgb.fields...)...)
}

// ProvisioningScheduledStepSelect is the builder for selecting fields of ProvisioningScheduledStep entities.
type ProvisioningScheduledStepSelect struct {
	*ProvisioningScheduledStepQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (psss *ProvisioningScheduledStepSelect) Scan(ctx context.Context, v interface{}) error {
	if err := psss.prepareQuery(ctx); err != nil {
		return err
	}
	psss.sql = psss.ProvisioningScheduledStepQuery.sqlQuery(ctx)
	return psss.sqlScan(ctx, v)
}

func (psss *ProvisioningScheduledStepSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := psss.sql.Query()
	if err := psss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
