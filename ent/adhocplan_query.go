// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/adhocplan"
	"github.com/gen0cide/laforge/ent/agenttask"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/status"
	"github.com/google/uuid"
)

// AdhocPlanQuery is the builder for querying AdhocPlan entities.
type AdhocPlanQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.AdhocPlan
	// eager-loading edges.
	withPrevAdhocPlan        *AdhocPlanQuery
	withNextAdhocPlan        *AdhocPlanQuery
	withAdhocPlanToBuild     *BuildQuery
	withAdhocPlanToStatus    *StatusQuery
	withAdhocPlanToAgentTask *AgentTaskQuery
	withFKs                  bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AdhocPlanQuery builder.
func (apq *AdhocPlanQuery) Where(ps ...predicate.AdhocPlan) *AdhocPlanQuery {
	apq.predicates = append(apq.predicates, ps...)
	return apq
}

// Limit adds a limit step to the query.
func (apq *AdhocPlanQuery) Limit(limit int) *AdhocPlanQuery {
	apq.limit = &limit
	return apq
}

// Offset adds an offset step to the query.
func (apq *AdhocPlanQuery) Offset(offset int) *AdhocPlanQuery {
	apq.offset = &offset
	return apq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (apq *AdhocPlanQuery) Unique(unique bool) *AdhocPlanQuery {
	apq.unique = &unique
	return apq
}

// Order adds an order step to the query.
func (apq *AdhocPlanQuery) Order(o ...OrderFunc) *AdhocPlanQuery {
	apq.order = append(apq.order, o...)
	return apq
}

// QueryPrevAdhocPlan chains the current query on the "PrevAdhocPlan" edge.
func (apq *AdhocPlanQuery) QueryPrevAdhocPlan() *AdhocPlanQuery {
	query := &AdhocPlanQuery{config: apq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := apq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := apq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(adhocplan.Table, adhocplan.FieldID, selector),
			sqlgraph.To(adhocplan.Table, adhocplan.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, adhocplan.PrevAdhocPlanTable, adhocplan.PrevAdhocPlanPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(apq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNextAdhocPlan chains the current query on the "NextAdhocPlan" edge.
func (apq *AdhocPlanQuery) QueryNextAdhocPlan() *AdhocPlanQuery {
	query := &AdhocPlanQuery{config: apq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := apq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := apq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(adhocplan.Table, adhocplan.FieldID, selector),
			sqlgraph.To(adhocplan.Table, adhocplan.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, adhocplan.NextAdhocPlanTable, adhocplan.NextAdhocPlanPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(apq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAdhocPlanToBuild chains the current query on the "AdhocPlanToBuild" edge.
func (apq *AdhocPlanQuery) QueryAdhocPlanToBuild() *BuildQuery {
	query := &BuildQuery{config: apq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := apq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := apq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(adhocplan.Table, adhocplan.FieldID, selector),
			sqlgraph.To(build.Table, build.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, adhocplan.AdhocPlanToBuildTable, adhocplan.AdhocPlanToBuildColumn),
		)
		fromU = sqlgraph.SetNeighbors(apq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAdhocPlanToStatus chains the current query on the "AdhocPlanToStatus" edge.
func (apq *AdhocPlanQuery) QueryAdhocPlanToStatus() *StatusQuery {
	query := &StatusQuery{config: apq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := apq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := apq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(adhocplan.Table, adhocplan.FieldID, selector),
			sqlgraph.To(status.Table, status.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, adhocplan.AdhocPlanToStatusTable, adhocplan.AdhocPlanToStatusColumn),
		)
		fromU = sqlgraph.SetNeighbors(apq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAdhocPlanToAgentTask chains the current query on the "AdhocPlanToAgentTask" edge.
func (apq *AdhocPlanQuery) QueryAdhocPlanToAgentTask() *AgentTaskQuery {
	query := &AgentTaskQuery{config: apq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := apq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := apq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(adhocplan.Table, adhocplan.FieldID, selector),
			sqlgraph.To(agenttask.Table, agenttask.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, adhocplan.AdhocPlanToAgentTaskTable, adhocplan.AdhocPlanToAgentTaskColumn),
		)
		fromU = sqlgraph.SetNeighbors(apq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AdhocPlan entity from the query.
// Returns a *NotFoundError when no AdhocPlan was found.
func (apq *AdhocPlanQuery) First(ctx context.Context) (*AdhocPlan, error) {
	nodes, err := apq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{adhocplan.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (apq *AdhocPlanQuery) FirstX(ctx context.Context) *AdhocPlan {
	node, err := apq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AdhocPlan ID from the query.
// Returns a *NotFoundError when no AdhocPlan ID was found.
func (apq *AdhocPlanQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = apq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{adhocplan.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (apq *AdhocPlanQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := apq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AdhocPlan entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one AdhocPlan entity is found.
// Returns a *NotFoundError when no AdhocPlan entities are found.
func (apq *AdhocPlanQuery) Only(ctx context.Context) (*AdhocPlan, error) {
	nodes, err := apq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{adhocplan.Label}
	default:
		return nil, &NotSingularError{adhocplan.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (apq *AdhocPlanQuery) OnlyX(ctx context.Context) *AdhocPlan {
	node, err := apq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AdhocPlan ID in the query.
// Returns a *NotSingularError when more than one AdhocPlan ID is found.
// Returns a *NotFoundError when no entities are found.
func (apq *AdhocPlanQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = apq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{adhocplan.Label}
	default:
		err = &NotSingularError{adhocplan.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (apq *AdhocPlanQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := apq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AdhocPlans.
func (apq *AdhocPlanQuery) All(ctx context.Context) ([]*AdhocPlan, error) {
	if err := apq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return apq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (apq *AdhocPlanQuery) AllX(ctx context.Context) []*AdhocPlan {
	nodes, err := apq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AdhocPlan IDs.
func (apq *AdhocPlanQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := apq.Select(adhocplan.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (apq *AdhocPlanQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := apq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (apq *AdhocPlanQuery) Count(ctx context.Context) (int, error) {
	if err := apq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return apq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (apq *AdhocPlanQuery) CountX(ctx context.Context) int {
	count, err := apq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (apq *AdhocPlanQuery) Exist(ctx context.Context) (bool, error) {
	if err := apq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return apq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (apq *AdhocPlanQuery) ExistX(ctx context.Context) bool {
	exist, err := apq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AdhocPlanQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (apq *AdhocPlanQuery) Clone() *AdhocPlanQuery {
	if apq == nil {
		return nil
	}
	return &AdhocPlanQuery{
		config:                   apq.config,
		limit:                    apq.limit,
		offset:                   apq.offset,
		order:                    append([]OrderFunc{}, apq.order...),
		predicates:               append([]predicate.AdhocPlan{}, apq.predicates...),
		withPrevAdhocPlan:        apq.withPrevAdhocPlan.Clone(),
		withNextAdhocPlan:        apq.withNextAdhocPlan.Clone(),
		withAdhocPlanToBuild:     apq.withAdhocPlanToBuild.Clone(),
		withAdhocPlanToStatus:    apq.withAdhocPlanToStatus.Clone(),
		withAdhocPlanToAgentTask: apq.withAdhocPlanToAgentTask.Clone(),
		// clone intermediate query.
		sql:    apq.sql.Clone(),
		path:   apq.path,
		unique: apq.unique,
	}
}

// WithPrevAdhocPlan tells the query-builder to eager-load the nodes that are connected to
// the "PrevAdhocPlan" edge. The optional arguments are used to configure the query builder of the edge.
func (apq *AdhocPlanQuery) WithPrevAdhocPlan(opts ...func(*AdhocPlanQuery)) *AdhocPlanQuery {
	query := &AdhocPlanQuery{config: apq.config}
	for _, opt := range opts {
		opt(query)
	}
	apq.withPrevAdhocPlan = query
	return apq
}

// WithNextAdhocPlan tells the query-builder to eager-load the nodes that are connected to
// the "NextAdhocPlan" edge. The optional arguments are used to configure the query builder of the edge.
func (apq *AdhocPlanQuery) WithNextAdhocPlan(opts ...func(*AdhocPlanQuery)) *AdhocPlanQuery {
	query := &AdhocPlanQuery{config: apq.config}
	for _, opt := range opts {
		opt(query)
	}
	apq.withNextAdhocPlan = query
	return apq
}

// WithAdhocPlanToBuild tells the query-builder to eager-load the nodes that are connected to
// the "AdhocPlanToBuild" edge. The optional arguments are used to configure the query builder of the edge.
func (apq *AdhocPlanQuery) WithAdhocPlanToBuild(opts ...func(*BuildQuery)) *AdhocPlanQuery {
	query := &BuildQuery{config: apq.config}
	for _, opt := range opts {
		opt(query)
	}
	apq.withAdhocPlanToBuild = query
	return apq
}

// WithAdhocPlanToStatus tells the query-builder to eager-load the nodes that are connected to
// the "AdhocPlanToStatus" edge. The optional arguments are used to configure the query builder of the edge.
func (apq *AdhocPlanQuery) WithAdhocPlanToStatus(opts ...func(*StatusQuery)) *AdhocPlanQuery {
	query := &StatusQuery{config: apq.config}
	for _, opt := range opts {
		opt(query)
	}
	apq.withAdhocPlanToStatus = query
	return apq
}

// WithAdhocPlanToAgentTask tells the query-builder to eager-load the nodes that are connected to
// the "AdhocPlanToAgentTask" edge. The optional arguments are used to configure the query builder of the edge.
func (apq *AdhocPlanQuery) WithAdhocPlanToAgentTask(opts ...func(*AgentTaskQuery)) *AdhocPlanQuery {
	query := &AgentTaskQuery{config: apq.config}
	for _, opt := range opts {
		opt(query)
	}
	apq.withAdhocPlanToAgentTask = query
	return apq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
func (apq *AdhocPlanQuery) GroupBy(field string, fields ...string) *AdhocPlanGroupBy {
	group := &AdhocPlanGroupBy{config: apq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := apq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return apq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
func (apq *AdhocPlanQuery) Select(fields ...string) *AdhocPlanSelect {
	apq.fields = append(apq.fields, fields...)
	return &AdhocPlanSelect{AdhocPlanQuery: apq}
}

func (apq *AdhocPlanQuery) prepareQuery(ctx context.Context) error {
	for _, f := range apq.fields {
		if !adhocplan.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if apq.path != nil {
		prev, err := apq.path(ctx)
		if err != nil {
			return err
		}
		apq.sql = prev
	}
	return nil
}

func (apq *AdhocPlanQuery) sqlAll(ctx context.Context) ([]*AdhocPlan, error) {
	var (
		nodes       = []*AdhocPlan{}
		withFKs     = apq.withFKs
		_spec       = apq.querySpec()
		loadedTypes = [5]bool{
			apq.withPrevAdhocPlan != nil,
			apq.withNextAdhocPlan != nil,
			apq.withAdhocPlanToBuild != nil,
			apq.withAdhocPlanToStatus != nil,
			apq.withAdhocPlanToAgentTask != nil,
		}
	)
	if apq.withAdhocPlanToBuild != nil || apq.withAdhocPlanToAgentTask != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, adhocplan.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &AdhocPlan{config: apq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, apq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := apq.withPrevAdhocPlan; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[uuid.UUID]*AdhocPlan, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.PrevAdhocPlan = []*AdhocPlan{}
		}
		var (
			edgeids []uuid.UUID
			edges   = make(map[uuid.UUID][]*AdhocPlan)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: true,
				Table:   adhocplan.PrevAdhocPlanTable,
				Columns: adhocplan.PrevAdhocPlanPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(adhocplan.PrevAdhocPlanPrimaryKey[1], fks...))
			},
			ScanValues: func() [2]interface{} {
				return [2]interface{}{new(uuid.UUID), new(uuid.UUID)}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*uuid.UUID)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*uuid.UUID)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := *eout
				inValue := *ein
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				if _, ok := edges[inValue]; !ok {
					edgeids = append(edgeids, inValue)
				}
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, apq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "PrevAdhocPlan": %w`, err)
		}
		query.Where(adhocplan.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "PrevAdhocPlan" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.PrevAdhocPlan = append(nodes[i].Edges.PrevAdhocPlan, n)
			}
		}
	}

	if query := apq.withNextAdhocPlan; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[uuid.UUID]*AdhocPlan, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.NextAdhocPlan = []*AdhocPlan{}
		}
		var (
			edgeids []uuid.UUID
			edges   = make(map[uuid.UUID][]*AdhocPlan)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: false,
				Table:   adhocplan.NextAdhocPlanTable,
				Columns: adhocplan.NextAdhocPlanPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(adhocplan.NextAdhocPlanPrimaryKey[0], fks...))
			},
			ScanValues: func() [2]interface{} {
				return [2]interface{}{new(uuid.UUID), new(uuid.UUID)}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*uuid.UUID)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*uuid.UUID)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := *eout
				inValue := *ein
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				if _, ok := edges[inValue]; !ok {
					edgeids = append(edgeids, inValue)
				}
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, apq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "NextAdhocPlan": %w`, err)
		}
		query.Where(adhocplan.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "NextAdhocPlan" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.NextAdhocPlan = append(nodes[i].Edges.NextAdhocPlan, n)
			}
		}
	}

	if query := apq.withAdhocPlanToBuild; query != nil {
		ids := make([]uuid.UUID, 0, len(nodes))
		nodeids := make(map[uuid.UUID][]*AdhocPlan)
		for i := range nodes {
			if nodes[i].adhoc_plan_adhoc_plan_to_build == nil {
				continue
			}
			fk := *nodes[i].adhoc_plan_adhoc_plan_to_build
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(build.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "adhoc_plan_adhoc_plan_to_build" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.AdhocPlanToBuild = n
			}
		}
	}

	if query := apq.withAdhocPlanToStatus; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[uuid.UUID]*AdhocPlan)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.Status(func(s *sql.Selector) {
			s.Where(sql.InValues(adhocplan.AdhocPlanToStatusColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.adhoc_plan_adhoc_plan_to_status
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "adhoc_plan_adhoc_plan_to_status" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "adhoc_plan_adhoc_plan_to_status" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.AdhocPlanToStatus = n
		}
	}

	if query := apq.withAdhocPlanToAgentTask; query != nil {
		ids := make([]uuid.UUID, 0, len(nodes))
		nodeids := make(map[uuid.UUID][]*AdhocPlan)
		for i := range nodes {
			if nodes[i].adhoc_plan_adhoc_plan_to_agent_task == nil {
				continue
			}
			fk := *nodes[i].adhoc_plan_adhoc_plan_to_agent_task
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(agenttask.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "adhoc_plan_adhoc_plan_to_agent_task" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.AdhocPlanToAgentTask = n
			}
		}
	}

	return nodes, nil
}

func (apq *AdhocPlanQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := apq.querySpec()
	_spec.Node.Columns = apq.fields
	if len(apq.fields) > 0 {
		_spec.Unique = apq.unique != nil && *apq.unique
	}
	return sqlgraph.CountNodes(ctx, apq.driver, _spec)
}

func (apq *AdhocPlanQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := apq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (apq *AdhocPlanQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   adhocplan.Table,
			Columns: adhocplan.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: adhocplan.FieldID,
			},
		},
		From:   apq.sql,
		Unique: true,
	}
	if unique := apq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := apq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, adhocplan.FieldID)
		for i := range fields {
			if fields[i] != adhocplan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := apq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := apq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := apq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := apq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (apq *AdhocPlanQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(apq.driver.Dialect())
	t1 := builder.Table(adhocplan.Table)
	columns := apq.fields
	if len(columns) == 0 {
		columns = adhocplan.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if apq.sql != nil {
		selector = apq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if apq.unique != nil && *apq.unique {
		selector.Distinct()
	}
	for _, p := range apq.predicates {
		p(selector)
	}
	for _, p := range apq.order {
		p(selector)
	}
	if offset := apq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := apq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AdhocPlanGroupBy is the group-by builder for AdhocPlan entities.
type AdhocPlanGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (apgb *AdhocPlanGroupBy) Aggregate(fns ...AggregateFunc) *AdhocPlanGroupBy {
	apgb.fns = append(apgb.fns, fns...)
	return apgb
}

// Scan applies the group-by query and scans the result into the given value.
func (apgb *AdhocPlanGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := apgb.path(ctx)
	if err != nil {
		return err
	}
	apgb.sql = query
	return apgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (apgb *AdhocPlanGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := apgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (apgb *AdhocPlanGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(apgb.fields) > 1 {
		return nil, errors.New("ent: AdhocPlanGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := apgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (apgb *AdhocPlanGroupBy) StringsX(ctx context.Context) []string {
	v, err := apgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (apgb *AdhocPlanGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = apgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{adhocplan.Label}
	default:
		err = fmt.Errorf("ent: AdhocPlanGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (apgb *AdhocPlanGroupBy) StringX(ctx context.Context) string {
	v, err := apgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (apgb *AdhocPlanGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(apgb.fields) > 1 {
		return nil, errors.New("ent: AdhocPlanGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := apgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (apgb *AdhocPlanGroupBy) IntsX(ctx context.Context) []int {
	v, err := apgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (apgb *AdhocPlanGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = apgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{adhocplan.Label}
	default:
		err = fmt.Errorf("ent: AdhocPlanGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (apgb *AdhocPlanGroupBy) IntX(ctx context.Context) int {
	v, err := apgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (apgb *AdhocPlanGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(apgb.fields) > 1 {
		return nil, errors.New("ent: AdhocPlanGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := apgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (apgb *AdhocPlanGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := apgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (apgb *AdhocPlanGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = apgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{adhocplan.Label}
	default:
		err = fmt.Errorf("ent: AdhocPlanGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (apgb *AdhocPlanGroupBy) Float64X(ctx context.Context) float64 {
	v, err := apgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (apgb *AdhocPlanGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(apgb.fields) > 1 {
		return nil, errors.New("ent: AdhocPlanGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := apgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (apgb *AdhocPlanGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := apgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (apgb *AdhocPlanGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = apgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{adhocplan.Label}
	default:
		err = fmt.Errorf("ent: AdhocPlanGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (apgb *AdhocPlanGroupBy) BoolX(ctx context.Context) bool {
	v, err := apgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (apgb *AdhocPlanGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range apgb.fields {
		if !adhocplan.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := apgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := apgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (apgb *AdhocPlanGroupBy) sqlQuery() *sql.Selector {
	selector := apgb.sql.Select()
	aggregation := make([]string, 0, len(apgb.fns))
	for _, fn := range apgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(apgb.fields)+len(apgb.fns))
		for _, f := range apgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(apgb.fields...)...)
}

// AdhocPlanSelect is the builder for selecting fields of AdhocPlan entities.
type AdhocPlanSelect struct {
	*AdhocPlanQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (aps *AdhocPlanSelect) Scan(ctx context.Context, v interface{}) error {
	if err := aps.prepareQuery(ctx); err != nil {
		return err
	}
	aps.sql = aps.AdhocPlanQuery.sqlQuery(ctx)
	return aps.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (aps *AdhocPlanSelect) ScanX(ctx context.Context, v interface{}) {
	if err := aps.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (aps *AdhocPlanSelect) Strings(ctx context.Context) ([]string, error) {
	if len(aps.fields) > 1 {
		return nil, errors.New("ent: AdhocPlanSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := aps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (aps *AdhocPlanSelect) StringsX(ctx context.Context) []string {
	v, err := aps.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (aps *AdhocPlanSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = aps.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{adhocplan.Label}
	default:
		err = fmt.Errorf("ent: AdhocPlanSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (aps *AdhocPlanSelect) StringX(ctx context.Context) string {
	v, err := aps.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (aps *AdhocPlanSelect) Ints(ctx context.Context) ([]int, error) {
	if len(aps.fields) > 1 {
		return nil, errors.New("ent: AdhocPlanSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := aps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (aps *AdhocPlanSelect) IntsX(ctx context.Context) []int {
	v, err := aps.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (aps *AdhocPlanSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = aps.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{adhocplan.Label}
	default:
		err = fmt.Errorf("ent: AdhocPlanSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (aps *AdhocPlanSelect) IntX(ctx context.Context) int {
	v, err := aps.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (aps *AdhocPlanSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(aps.fields) > 1 {
		return nil, errors.New("ent: AdhocPlanSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := aps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (aps *AdhocPlanSelect) Float64sX(ctx context.Context) []float64 {
	v, err := aps.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (aps *AdhocPlanSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = aps.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{adhocplan.Label}
	default:
		err = fmt.Errorf("ent: AdhocPlanSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (aps *AdhocPlanSelect) Float64X(ctx context.Context) float64 {
	v, err := aps.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (aps *AdhocPlanSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(aps.fields) > 1 {
		return nil, errors.New("ent: AdhocPlanSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := aps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (aps *AdhocPlanSelect) BoolsX(ctx context.Context) []bool {
	v, err := aps.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (aps *AdhocPlanSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = aps.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{adhocplan.Label}
	default:
		err = fmt.Errorf("ent: AdhocPlanSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (aps *AdhocPlanSelect) BoolX(ctx context.Context) bool {
	v, err := aps.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (aps *AdhocPlanSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := aps.sql.Query()
	if err := aps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
