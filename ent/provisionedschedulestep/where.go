// Code generated by ent, DO NOT EDIT.

package provisionedschedulestep

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ProvisionedScheduleStep {
	return predicate.ProvisionedScheduleStep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ProvisionedScheduleStep {
	return predicate.ProvisionedScheduleStep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ProvisionedScheduleStep {
	return predicate.ProvisionedScheduleStep(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ProvisionedScheduleStep {
	return predicate.ProvisionedScheduleStep(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ProvisionedScheduleStep {
	return predicate.ProvisionedScheduleStep(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ProvisionedScheduleStep {
	return predicate.ProvisionedScheduleStep(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ProvisionedScheduleStep {
	return predicate.ProvisionedScheduleStep(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ProvisionedScheduleStep {
	return predicate.ProvisionedScheduleStep(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ProvisionedScheduleStep {
	return predicate.ProvisionedScheduleStep(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// RunTime applies equality check predicate on the "run_time" field. It's identical to RunTimeEQ.
func RunTime(v time.Time) predicate.ProvisionedScheduleStep {
	return predicate.ProvisionedScheduleStep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRunTime), v))
	})
}

// RunTimeEQ applies the EQ predicate on the "run_time" field.
func RunTimeEQ(v time.Time) predicate.ProvisionedScheduleStep {
	return predicate.ProvisionedScheduleStep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRunTime), v))
	})
}

// RunTimeNEQ applies the NEQ predicate on the "run_time" field.
func RunTimeNEQ(v time.Time) predicate.ProvisionedScheduleStep {
	return predicate.ProvisionedScheduleStep(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRunTime), v))
	})
}

// RunTimeIn applies the In predicate on the "run_time" field.
func RunTimeIn(vs ...time.Time) predicate.ProvisionedScheduleStep {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProvisionedScheduleStep(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRunTime), v...))
	})
}

// RunTimeNotIn applies the NotIn predicate on the "run_time" field.
func RunTimeNotIn(vs ...time.Time) predicate.ProvisionedScheduleStep {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProvisionedScheduleStep(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRunTime), v...))
	})
}

// RunTimeGT applies the GT predicate on the "run_time" field.
func RunTimeGT(v time.Time) predicate.ProvisionedScheduleStep {
	return predicate.ProvisionedScheduleStep(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRunTime), v))
	})
}

// RunTimeGTE applies the GTE predicate on the "run_time" field.
func RunTimeGTE(v time.Time) predicate.ProvisionedScheduleStep {
	return predicate.ProvisionedScheduleStep(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRunTime), v))
	})
}

// RunTimeLT applies the LT predicate on the "run_time" field.
func RunTimeLT(v time.Time) predicate.ProvisionedScheduleStep {
	return predicate.ProvisionedScheduleStep(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRunTime), v))
	})
}

// RunTimeLTE applies the LTE predicate on the "run_time" field.
func RunTimeLTE(v time.Time) predicate.ProvisionedScheduleStep {
	return predicate.ProvisionedScheduleStep(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRunTime), v))
	})
}

// HasProvisionedScheduleStepToStatus applies the HasEdge predicate on the "ProvisionedScheduleStepToStatus" edge.
func HasProvisionedScheduleStepToStatus() predicate.ProvisionedScheduleStep {
	return predicate.ProvisionedScheduleStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProvisionedScheduleStepToStatusTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ProvisionedScheduleStepToStatusTable, ProvisionedScheduleStepToStatusColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProvisionedScheduleStepToStatusWith applies the HasEdge predicate on the "ProvisionedScheduleStepToStatus" edge with a given conditions (other predicates).
func HasProvisionedScheduleStepToStatusWith(preds ...predicate.Status) predicate.ProvisionedScheduleStep {
	return predicate.ProvisionedScheduleStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProvisionedScheduleStepToStatusInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ProvisionedScheduleStepToStatusTable, ProvisionedScheduleStepToStatusColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProvisionedScheduleStepToScheduleStep applies the HasEdge predicate on the "ProvisionedScheduleStepToScheduleStep" edge.
func HasProvisionedScheduleStepToScheduleStep() predicate.ProvisionedScheduleStep {
	return predicate.ProvisionedScheduleStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProvisionedScheduleStepToScheduleStepTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProvisionedScheduleStepToScheduleStepTable, ProvisionedScheduleStepToScheduleStepColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProvisionedScheduleStepToScheduleStepWith applies the HasEdge predicate on the "ProvisionedScheduleStepToScheduleStep" edge with a given conditions (other predicates).
func HasProvisionedScheduleStepToScheduleStepWith(preds ...predicate.ScheduleStep) predicate.ProvisionedScheduleStep {
	return predicate.ProvisionedScheduleStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProvisionedScheduleStepToScheduleStepInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProvisionedScheduleStepToScheduleStepTable, ProvisionedScheduleStepToScheduleStepColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProvisionedScheduleStepToAgentTask applies the HasEdge predicate on the "ProvisionedScheduleStepToAgentTask" edge.
func HasProvisionedScheduleStepToAgentTask() predicate.ProvisionedScheduleStep {
	return predicate.ProvisionedScheduleStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProvisionedScheduleStepToAgentTaskTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ProvisionedScheduleStepToAgentTaskTable, ProvisionedScheduleStepToAgentTaskColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProvisionedScheduleStepToAgentTaskWith applies the HasEdge predicate on the "ProvisionedScheduleStepToAgentTask" edge with a given conditions (other predicates).
func HasProvisionedScheduleStepToAgentTaskWith(preds ...predicate.AgentTask) predicate.ProvisionedScheduleStep {
	return predicate.ProvisionedScheduleStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProvisionedScheduleStepToAgentTaskInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ProvisionedScheduleStepToAgentTaskTable, ProvisionedScheduleStepToAgentTaskColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProvisionedScheduleStep) predicate.ProvisionedScheduleStep {
	return predicate.ProvisionedScheduleStep(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProvisionedScheduleStep) predicate.ProvisionedScheduleStep {
	return predicate.ProvisionedScheduleStep(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProvisionedScheduleStep) predicate.ProvisionedScheduleStep {
	return predicate.ProvisionedScheduleStep(func(s *sql.Selector) {
		p(s.Not())
	})
}
