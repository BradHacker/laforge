// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/host"
	"github.com/gen0cide/laforge/ent/hostdependency"
	"github.com/gen0cide/laforge/ent/network"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/google/uuid"
)

// HostDependencyQuery is the builder for querying HostDependency entities.
type HostDependencyQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.HostDependency
	// eager-loading edges.
	withHostDependencyToDependOnHost *HostQuery
	withHostDependencyToDependByHost *HostQuery
	withHostDependencyToNetwork      *NetworkQuery
	withHostDependencyToEnvironment  *EnvironmentQuery
	withFKs                          bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the HostDependencyQuery builder.
func (hdq *HostDependencyQuery) Where(ps ...predicate.HostDependency) *HostDependencyQuery {
	hdq.predicates = append(hdq.predicates, ps...)
	return hdq
}

// Limit adds a limit step to the query.
func (hdq *HostDependencyQuery) Limit(limit int) *HostDependencyQuery {
	hdq.limit = &limit
	return hdq
}

// Offset adds an offset step to the query.
func (hdq *HostDependencyQuery) Offset(offset int) *HostDependencyQuery {
	hdq.offset = &offset
	return hdq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (hdq *HostDependencyQuery) Unique(unique bool) *HostDependencyQuery {
	hdq.unique = &unique
	return hdq
}

// Order adds an order step to the query.
func (hdq *HostDependencyQuery) Order(o ...OrderFunc) *HostDependencyQuery {
	hdq.order = append(hdq.order, o...)
	return hdq
}

// QueryHostDependencyToDependOnHost chains the current query on the "HostDependencyToDependOnHost" edge.
func (hdq *HostDependencyQuery) QueryHostDependencyToDependOnHost() *HostQuery {
	query := &HostQuery{config: hdq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hostdependency.Table, hostdependency.FieldID, selector),
			sqlgraph.To(host.Table, host.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hostdependency.HostDependencyToDependOnHostTable, hostdependency.HostDependencyToDependOnHostColumn),
		)
		fromU = sqlgraph.SetNeighbors(hdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHostDependencyToDependByHost chains the current query on the "HostDependencyToDependByHost" edge.
func (hdq *HostDependencyQuery) QueryHostDependencyToDependByHost() *HostQuery {
	query := &HostQuery{config: hdq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hostdependency.Table, hostdependency.FieldID, selector),
			sqlgraph.To(host.Table, host.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hostdependency.HostDependencyToDependByHostTable, hostdependency.HostDependencyToDependByHostColumn),
		)
		fromU = sqlgraph.SetNeighbors(hdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHostDependencyToNetwork chains the current query on the "HostDependencyToNetwork" edge.
func (hdq *HostDependencyQuery) QueryHostDependencyToNetwork() *NetworkQuery {
	query := &NetworkQuery{config: hdq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hostdependency.Table, hostdependency.FieldID, selector),
			sqlgraph.To(network.Table, network.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hostdependency.HostDependencyToNetworkTable, hostdependency.HostDependencyToNetworkColumn),
		)
		fromU = sqlgraph.SetNeighbors(hdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHostDependencyToEnvironment chains the current query on the "HostDependencyToEnvironment" edge.
func (hdq *HostDependencyQuery) QueryHostDependencyToEnvironment() *EnvironmentQuery {
	query := &EnvironmentQuery{config: hdq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hostdependency.Table, hostdependency.FieldID, selector),
			sqlgraph.To(environment.Table, environment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hostdependency.HostDependencyToEnvironmentTable, hostdependency.HostDependencyToEnvironmentColumn),
		)
		fromU = sqlgraph.SetNeighbors(hdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first HostDependency entity from the query.
// Returns a *NotFoundError when no HostDependency was found.
func (hdq *HostDependencyQuery) First(ctx context.Context) (*HostDependency, error) {
	nodes, err := hdq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{hostdependency.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (hdq *HostDependencyQuery) FirstX(ctx context.Context) *HostDependency {
	node, err := hdq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first HostDependency ID from the query.
// Returns a *NotFoundError when no HostDependency ID was found.
func (hdq *HostDependencyQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = hdq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{hostdependency.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (hdq *HostDependencyQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := hdq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single HostDependency entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one HostDependency entity is found.
// Returns a *NotFoundError when no HostDependency entities are found.
func (hdq *HostDependencyQuery) Only(ctx context.Context) (*HostDependency, error) {
	nodes, err := hdq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{hostdependency.Label}
	default:
		return nil, &NotSingularError{hostdependency.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (hdq *HostDependencyQuery) OnlyX(ctx context.Context) *HostDependency {
	node, err := hdq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only HostDependency ID in the query.
// Returns a *NotSingularError when more than one HostDependency ID is found.
// Returns a *NotFoundError when no entities are found.
func (hdq *HostDependencyQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = hdq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{hostdependency.Label}
	default:
		err = &NotSingularError{hostdependency.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (hdq *HostDependencyQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := hdq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of HostDependencies.
func (hdq *HostDependencyQuery) All(ctx context.Context) ([]*HostDependency, error) {
	if err := hdq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return hdq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (hdq *HostDependencyQuery) AllX(ctx context.Context) []*HostDependency {
	nodes, err := hdq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of HostDependency IDs.
func (hdq *HostDependencyQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := hdq.Select(hostdependency.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (hdq *HostDependencyQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := hdq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (hdq *HostDependencyQuery) Count(ctx context.Context) (int, error) {
	if err := hdq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return hdq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (hdq *HostDependencyQuery) CountX(ctx context.Context) int {
	count, err := hdq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (hdq *HostDependencyQuery) Exist(ctx context.Context) (bool, error) {
	if err := hdq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return hdq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (hdq *HostDependencyQuery) ExistX(ctx context.Context) bool {
	exist, err := hdq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the HostDependencyQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (hdq *HostDependencyQuery) Clone() *HostDependencyQuery {
	if hdq == nil {
		return nil
	}
	return &HostDependencyQuery{
		config:                           hdq.config,
		limit:                            hdq.limit,
		offset:                           hdq.offset,
		order:                            append([]OrderFunc{}, hdq.order...),
		predicates:                       append([]predicate.HostDependency{}, hdq.predicates...),
		withHostDependencyToDependOnHost: hdq.withHostDependencyToDependOnHost.Clone(),
		withHostDependencyToDependByHost: hdq.withHostDependencyToDependByHost.Clone(),
		withHostDependencyToNetwork:      hdq.withHostDependencyToNetwork.Clone(),
		withHostDependencyToEnvironment:  hdq.withHostDependencyToEnvironment.Clone(),
		// clone intermediate query.
		sql:    hdq.sql.Clone(),
		path:   hdq.path,
		unique: hdq.unique,
	}
}

// WithHostDependencyToDependOnHost tells the query-builder to eager-load the nodes that are connected to
// the "HostDependencyToDependOnHost" edge. The optional arguments are used to configure the query builder of the edge.
func (hdq *HostDependencyQuery) WithHostDependencyToDependOnHost(opts ...func(*HostQuery)) *HostDependencyQuery {
	query := &HostQuery{config: hdq.config}
	for _, opt := range opts {
		opt(query)
	}
	hdq.withHostDependencyToDependOnHost = query
	return hdq
}

// WithHostDependencyToDependByHost tells the query-builder to eager-load the nodes that are connected to
// the "HostDependencyToDependByHost" edge. The optional arguments are used to configure the query builder of the edge.
func (hdq *HostDependencyQuery) WithHostDependencyToDependByHost(opts ...func(*HostQuery)) *HostDependencyQuery {
	query := &HostQuery{config: hdq.config}
	for _, opt := range opts {
		opt(query)
	}
	hdq.withHostDependencyToDependByHost = query
	return hdq
}

// WithHostDependencyToNetwork tells the query-builder to eager-load the nodes that are connected to
// the "HostDependencyToNetwork" edge. The optional arguments are used to configure the query builder of the edge.
func (hdq *HostDependencyQuery) WithHostDependencyToNetwork(opts ...func(*NetworkQuery)) *HostDependencyQuery {
	query := &NetworkQuery{config: hdq.config}
	for _, opt := range opts {
		opt(query)
	}
	hdq.withHostDependencyToNetwork = query
	return hdq
}

// WithHostDependencyToEnvironment tells the query-builder to eager-load the nodes that are connected to
// the "HostDependencyToEnvironment" edge. The optional arguments are used to configure the query builder of the edge.
func (hdq *HostDependencyQuery) WithHostDependencyToEnvironment(opts ...func(*EnvironmentQuery)) *HostDependencyQuery {
	query := &EnvironmentQuery{config: hdq.config}
	for _, opt := range opts {
		opt(query)
	}
	hdq.withHostDependencyToEnvironment = query
	return hdq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		HostID string `json:"host_id,omitempty" hcl:"host,attr"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.HostDependency.Query().
//		GroupBy(hostdependency.FieldHostID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (hdq *HostDependencyQuery) GroupBy(field string, fields ...string) *HostDependencyGroupBy {
	group := &HostDependencyGroupBy{config: hdq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := hdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return hdq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		HostID string `json:"host_id,omitempty" hcl:"host,attr"`
//	}
//
//	client.HostDependency.Query().
//		Select(hostdependency.FieldHostID).
//		Scan(ctx, &v)
//
func (hdq *HostDependencyQuery) Select(fields ...string) *HostDependencySelect {
	hdq.fields = append(hdq.fields, fields...)
	return &HostDependencySelect{HostDependencyQuery: hdq}
}

func (hdq *HostDependencyQuery) prepareQuery(ctx context.Context) error {
	for _, f := range hdq.fields {
		if !hostdependency.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if hdq.path != nil {
		prev, err := hdq.path(ctx)
		if err != nil {
			return err
		}
		hdq.sql = prev
	}
	return nil
}

func (hdq *HostDependencyQuery) sqlAll(ctx context.Context) ([]*HostDependency, error) {
	var (
		nodes       = []*HostDependency{}
		withFKs     = hdq.withFKs
		_spec       = hdq.querySpec()
		loadedTypes = [4]bool{
			hdq.withHostDependencyToDependOnHost != nil,
			hdq.withHostDependencyToDependByHost != nil,
			hdq.withHostDependencyToNetwork != nil,
			hdq.withHostDependencyToEnvironment != nil,
		}
	)
	if hdq.withHostDependencyToDependOnHost != nil || hdq.withHostDependencyToDependByHost != nil || hdq.withHostDependencyToNetwork != nil || hdq.withHostDependencyToEnvironment != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, hostdependency.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &HostDependency{config: hdq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, hdq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := hdq.withHostDependencyToDependOnHost; query != nil {
		ids := make([]uuid.UUID, 0, len(nodes))
		nodeids := make(map[uuid.UUID][]*HostDependency)
		for i := range nodes {
			if nodes[i].host_dependency_host_dependency_to_depend_on_host == nil {
				continue
			}
			fk := *nodes[i].host_dependency_host_dependency_to_depend_on_host
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(host.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "host_dependency_host_dependency_to_depend_on_host" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.HostDependencyToDependOnHost = n
			}
		}
	}

	if query := hdq.withHostDependencyToDependByHost; query != nil {
		ids := make([]uuid.UUID, 0, len(nodes))
		nodeids := make(map[uuid.UUID][]*HostDependency)
		for i := range nodes {
			if nodes[i].host_dependency_host_dependency_to_depend_by_host == nil {
				continue
			}
			fk := *nodes[i].host_dependency_host_dependency_to_depend_by_host
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(host.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "host_dependency_host_dependency_to_depend_by_host" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.HostDependencyToDependByHost = n
			}
		}
	}

	if query := hdq.withHostDependencyToNetwork; query != nil {
		ids := make([]uuid.UUID, 0, len(nodes))
		nodeids := make(map[uuid.UUID][]*HostDependency)
		for i := range nodes {
			if nodes[i].host_dependency_host_dependency_to_network == nil {
				continue
			}
			fk := *nodes[i].host_dependency_host_dependency_to_network
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(network.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "host_dependency_host_dependency_to_network" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.HostDependencyToNetwork = n
			}
		}
	}

	if query := hdq.withHostDependencyToEnvironment; query != nil {
		ids := make([]uuid.UUID, 0, len(nodes))
		nodeids := make(map[uuid.UUID][]*HostDependency)
		for i := range nodes {
			if nodes[i].environment_environment_to_host_dependency == nil {
				continue
			}
			fk := *nodes[i].environment_environment_to_host_dependency
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(environment.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "environment_environment_to_host_dependency" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.HostDependencyToEnvironment = n
			}
		}
	}

	return nodes, nil
}

func (hdq *HostDependencyQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := hdq.querySpec()
	_spec.Node.Columns = hdq.fields
	if len(hdq.fields) > 0 {
		_spec.Unique = hdq.unique != nil && *hdq.unique
	}
	return sqlgraph.CountNodes(ctx, hdq.driver, _spec)
}

func (hdq *HostDependencyQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := hdq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (hdq *HostDependencyQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   hostdependency.Table,
			Columns: hostdependency.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: hostdependency.FieldID,
			},
		},
		From:   hdq.sql,
		Unique: true,
	}
	if unique := hdq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := hdq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hostdependency.FieldID)
		for i := range fields {
			if fields[i] != hostdependency.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := hdq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := hdq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := hdq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := hdq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (hdq *HostDependencyQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(hdq.driver.Dialect())
	t1 := builder.Table(hostdependency.Table)
	columns := hdq.fields
	if len(columns) == 0 {
		columns = hostdependency.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if hdq.sql != nil {
		selector = hdq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if hdq.unique != nil && *hdq.unique {
		selector.Distinct()
	}
	for _, p := range hdq.predicates {
		p(selector)
	}
	for _, p := range hdq.order {
		p(selector)
	}
	if offset := hdq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := hdq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// HostDependencyGroupBy is the group-by builder for HostDependency entities.
type HostDependencyGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (hdgb *HostDependencyGroupBy) Aggregate(fns ...AggregateFunc) *HostDependencyGroupBy {
	hdgb.fns = append(hdgb.fns, fns...)
	return hdgb
}

// Scan applies the group-by query and scans the result into the given value.
func (hdgb *HostDependencyGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := hdgb.path(ctx)
	if err != nil {
		return err
	}
	hdgb.sql = query
	return hdgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (hdgb *HostDependencyGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := hdgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (hdgb *HostDependencyGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(hdgb.fields) > 1 {
		return nil, errors.New("ent: HostDependencyGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := hdgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (hdgb *HostDependencyGroupBy) StringsX(ctx context.Context) []string {
	v, err := hdgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (hdgb *HostDependencyGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = hdgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{hostdependency.Label}
	default:
		err = fmt.Errorf("ent: HostDependencyGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (hdgb *HostDependencyGroupBy) StringX(ctx context.Context) string {
	v, err := hdgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (hdgb *HostDependencyGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(hdgb.fields) > 1 {
		return nil, errors.New("ent: HostDependencyGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := hdgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (hdgb *HostDependencyGroupBy) IntsX(ctx context.Context) []int {
	v, err := hdgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (hdgb *HostDependencyGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = hdgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{hostdependency.Label}
	default:
		err = fmt.Errorf("ent: HostDependencyGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (hdgb *HostDependencyGroupBy) IntX(ctx context.Context) int {
	v, err := hdgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (hdgb *HostDependencyGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(hdgb.fields) > 1 {
		return nil, errors.New("ent: HostDependencyGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := hdgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (hdgb *HostDependencyGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := hdgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (hdgb *HostDependencyGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = hdgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{hostdependency.Label}
	default:
		err = fmt.Errorf("ent: HostDependencyGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (hdgb *HostDependencyGroupBy) Float64X(ctx context.Context) float64 {
	v, err := hdgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (hdgb *HostDependencyGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(hdgb.fields) > 1 {
		return nil, errors.New("ent: HostDependencyGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := hdgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (hdgb *HostDependencyGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := hdgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (hdgb *HostDependencyGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = hdgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{hostdependency.Label}
	default:
		err = fmt.Errorf("ent: HostDependencyGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (hdgb *HostDependencyGroupBy) BoolX(ctx context.Context) bool {
	v, err := hdgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (hdgb *HostDependencyGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range hdgb.fields {
		if !hostdependency.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := hdgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := hdgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (hdgb *HostDependencyGroupBy) sqlQuery() *sql.Selector {
	selector := hdgb.sql.Select()
	aggregation := make([]string, 0, len(hdgb.fns))
	for _, fn := range hdgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(hdgb.fields)+len(hdgb.fns))
		for _, f := range hdgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(hdgb.fields...)...)
}

// HostDependencySelect is the builder for selecting fields of HostDependency entities.
type HostDependencySelect struct {
	*HostDependencyQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (hds *HostDependencySelect) Scan(ctx context.Context, v interface{}) error {
	if err := hds.prepareQuery(ctx); err != nil {
		return err
	}
	hds.sql = hds.HostDependencyQuery.sqlQuery(ctx)
	return hds.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (hds *HostDependencySelect) ScanX(ctx context.Context, v interface{}) {
	if err := hds.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (hds *HostDependencySelect) Strings(ctx context.Context) ([]string, error) {
	if len(hds.fields) > 1 {
		return nil, errors.New("ent: HostDependencySelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := hds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (hds *HostDependencySelect) StringsX(ctx context.Context) []string {
	v, err := hds.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (hds *HostDependencySelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = hds.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{hostdependency.Label}
	default:
		err = fmt.Errorf("ent: HostDependencySelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (hds *HostDependencySelect) StringX(ctx context.Context) string {
	v, err := hds.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (hds *HostDependencySelect) Ints(ctx context.Context) ([]int, error) {
	if len(hds.fields) > 1 {
		return nil, errors.New("ent: HostDependencySelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := hds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (hds *HostDependencySelect) IntsX(ctx context.Context) []int {
	v, err := hds.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (hds *HostDependencySelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = hds.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{hostdependency.Label}
	default:
		err = fmt.Errorf("ent: HostDependencySelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (hds *HostDependencySelect) IntX(ctx context.Context) int {
	v, err := hds.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (hds *HostDependencySelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(hds.fields) > 1 {
		return nil, errors.New("ent: HostDependencySelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := hds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (hds *HostDependencySelect) Float64sX(ctx context.Context) []float64 {
	v, err := hds.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (hds *HostDependencySelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = hds.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{hostdependency.Label}
	default:
		err = fmt.Errorf("ent: HostDependencySelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (hds *HostDependencySelect) Float64X(ctx context.Context) float64 {
	v, err := hds.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (hds *HostDependencySelect) Bools(ctx context.Context) ([]bool, error) {
	if len(hds.fields) > 1 {
		return nil, errors.New("ent: HostDependencySelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := hds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (hds *HostDependencySelect) BoolsX(ctx context.Context) []bool {
	v, err := hds.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (hds *HostDependencySelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = hds.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{hostdependency.Label}
	default:
		err = fmt.Errorf("ent: HostDependencySelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (hds *HostDependencySelect) BoolX(ctx context.Context) bool {
	v, err := hds.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (hds *HostDependencySelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := hds.sql.Query()
	if err := hds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
