// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/authuser"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/buildcommit"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/ginfilemiddleware"
	"github.com/gen0cide/laforge/ent/servertask"
	"github.com/gen0cide/laforge/ent/status"
	"github.com/google/uuid"
)

// ServerTaskCreate is the builder for creating a ServerTask entity.
type ServerTaskCreate struct {
	config
	mutation *ServerTaskMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (stc *ServerTaskCreate) SetType(s servertask.Type) *ServerTaskCreate {
	stc.mutation.SetType(s)
	return stc
}

// SetStartTime sets the "start_time" field.
func (stc *ServerTaskCreate) SetStartTime(t time.Time) *ServerTaskCreate {
	stc.mutation.SetStartTime(t)
	return stc
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (stc *ServerTaskCreate) SetNillableStartTime(t *time.Time) *ServerTaskCreate {
	if t != nil {
		stc.SetStartTime(*t)
	}
	return stc
}

// SetEndTime sets the "end_time" field.
func (stc *ServerTaskCreate) SetEndTime(t time.Time) *ServerTaskCreate {
	stc.mutation.SetEndTime(t)
	return stc
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (stc *ServerTaskCreate) SetNillableEndTime(t *time.Time) *ServerTaskCreate {
	if t != nil {
		stc.SetEndTime(*t)
	}
	return stc
}

// SetErrors sets the "errors" field.
func (stc *ServerTaskCreate) SetErrors(s []string) *ServerTaskCreate {
	stc.mutation.SetErrors(s)
	return stc
}

// SetLogFilePath sets the "log_file_path" field.
func (stc *ServerTaskCreate) SetLogFilePath(s string) *ServerTaskCreate {
	stc.mutation.SetLogFilePath(s)
	return stc
}

// SetNillableLogFilePath sets the "log_file_path" field if the given value is not nil.
func (stc *ServerTaskCreate) SetNillableLogFilePath(s *string) *ServerTaskCreate {
	if s != nil {
		stc.SetLogFilePath(*s)
	}
	return stc
}

// SetID sets the "id" field.
func (stc *ServerTaskCreate) SetID(u uuid.UUID) *ServerTaskCreate {
	stc.mutation.SetID(u)
	return stc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (stc *ServerTaskCreate) SetNillableID(u *uuid.UUID) *ServerTaskCreate {
	if u != nil {
		stc.SetID(*u)
	}
	return stc
}

// SetServerTaskToAuthUserID sets the "ServerTaskToAuthUser" edge to the AuthUser entity by ID.
func (stc *ServerTaskCreate) SetServerTaskToAuthUserID(id uuid.UUID) *ServerTaskCreate {
	stc.mutation.SetServerTaskToAuthUserID(id)
	return stc
}

// SetServerTaskToAuthUser sets the "ServerTaskToAuthUser" edge to the AuthUser entity.
func (stc *ServerTaskCreate) SetServerTaskToAuthUser(a *AuthUser) *ServerTaskCreate {
	return stc.SetServerTaskToAuthUserID(a.ID)
}

// SetServerTaskToStatusID sets the "ServerTaskToStatus" edge to the Status entity by ID.
func (stc *ServerTaskCreate) SetServerTaskToStatusID(id uuid.UUID) *ServerTaskCreate {
	stc.mutation.SetServerTaskToStatusID(id)
	return stc
}

// SetServerTaskToStatus sets the "ServerTaskToStatus" edge to the Status entity.
func (stc *ServerTaskCreate) SetServerTaskToStatus(s *Status) *ServerTaskCreate {
	return stc.SetServerTaskToStatusID(s.ID)
}

// SetServerTaskToEnvironmentID sets the "ServerTaskToEnvironment" edge to the Environment entity by ID.
func (stc *ServerTaskCreate) SetServerTaskToEnvironmentID(id uuid.UUID) *ServerTaskCreate {
	stc.mutation.SetServerTaskToEnvironmentID(id)
	return stc
}

// SetNillableServerTaskToEnvironmentID sets the "ServerTaskToEnvironment" edge to the Environment entity by ID if the given value is not nil.
func (stc *ServerTaskCreate) SetNillableServerTaskToEnvironmentID(id *uuid.UUID) *ServerTaskCreate {
	if id != nil {
		stc = stc.SetServerTaskToEnvironmentID(*id)
	}
	return stc
}

// SetServerTaskToEnvironment sets the "ServerTaskToEnvironment" edge to the Environment entity.
func (stc *ServerTaskCreate) SetServerTaskToEnvironment(e *Environment) *ServerTaskCreate {
	return stc.SetServerTaskToEnvironmentID(e.ID)
}

// SetServerTaskToBuildID sets the "ServerTaskToBuild" edge to the Build entity by ID.
func (stc *ServerTaskCreate) SetServerTaskToBuildID(id uuid.UUID) *ServerTaskCreate {
	stc.mutation.SetServerTaskToBuildID(id)
	return stc
}

// SetNillableServerTaskToBuildID sets the "ServerTaskToBuild" edge to the Build entity by ID if the given value is not nil.
func (stc *ServerTaskCreate) SetNillableServerTaskToBuildID(id *uuid.UUID) *ServerTaskCreate {
	if id != nil {
		stc = stc.SetServerTaskToBuildID(*id)
	}
	return stc
}

// SetServerTaskToBuild sets the "ServerTaskToBuild" edge to the Build entity.
func (stc *ServerTaskCreate) SetServerTaskToBuild(b *Build) *ServerTaskCreate {
	return stc.SetServerTaskToBuildID(b.ID)
}

// SetServerTaskToBuildCommitID sets the "ServerTaskToBuildCommit" edge to the BuildCommit entity by ID.
func (stc *ServerTaskCreate) SetServerTaskToBuildCommitID(id uuid.UUID) *ServerTaskCreate {
	stc.mutation.SetServerTaskToBuildCommitID(id)
	return stc
}

// SetNillableServerTaskToBuildCommitID sets the "ServerTaskToBuildCommit" edge to the BuildCommit entity by ID if the given value is not nil.
func (stc *ServerTaskCreate) SetNillableServerTaskToBuildCommitID(id *uuid.UUID) *ServerTaskCreate {
	if id != nil {
		stc = stc.SetServerTaskToBuildCommitID(*id)
	}
	return stc
}

// SetServerTaskToBuildCommit sets the "ServerTaskToBuildCommit" edge to the BuildCommit entity.
func (stc *ServerTaskCreate) SetServerTaskToBuildCommit(b *BuildCommit) *ServerTaskCreate {
	return stc.SetServerTaskToBuildCommitID(b.ID)
}

// AddServerTaskToGinFileMiddlewareIDs adds the "ServerTaskToGinFileMiddleware" edge to the GinFileMiddleware entity by IDs.
func (stc *ServerTaskCreate) AddServerTaskToGinFileMiddlewareIDs(ids ...uuid.UUID) *ServerTaskCreate {
	stc.mutation.AddServerTaskToGinFileMiddlewareIDs(ids...)
	return stc
}

// AddServerTaskToGinFileMiddleware adds the "ServerTaskToGinFileMiddleware" edges to the GinFileMiddleware entity.
func (stc *ServerTaskCreate) AddServerTaskToGinFileMiddleware(g ...*GinFileMiddleware) *ServerTaskCreate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return stc.AddServerTaskToGinFileMiddlewareIDs(ids...)
}

// Mutation returns the ServerTaskMutation object of the builder.
func (stc *ServerTaskCreate) Mutation() *ServerTaskMutation {
	return stc.mutation
}

// Save creates the ServerTask in the database.
func (stc *ServerTaskCreate) Save(ctx context.Context) (*ServerTask, error) {
	var (
		err  error
		node *ServerTask
	)
	stc.defaults()
	if len(stc.hooks) == 0 {
		if err = stc.check(); err != nil {
			return nil, err
		}
		node, err = stc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ServerTaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = stc.check(); err != nil {
				return nil, err
			}
			stc.mutation = mutation
			if node, err = stc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(stc.hooks) - 1; i >= 0; i-- {
			if stc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = stc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, stc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (stc *ServerTaskCreate) SaveX(ctx context.Context) *ServerTask {
	v, err := stc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stc *ServerTaskCreate) Exec(ctx context.Context) error {
	_, err := stc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stc *ServerTaskCreate) ExecX(ctx context.Context) {
	if err := stc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stc *ServerTaskCreate) defaults() {
	if _, ok := stc.mutation.ID(); !ok {
		v := servertask.DefaultID()
		stc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stc *ServerTaskCreate) check() error {
	if _, ok := stc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "ServerTask.type"`)}
	}
	if v, ok := stc.mutation.GetType(); ok {
		if err := servertask.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ServerTask.type": %w`, err)}
		}
	}
	if _, ok := stc.mutation.ServerTaskToAuthUserID(); !ok {
		return &ValidationError{Name: "ServerTaskToAuthUser", err: errors.New(`ent: missing required edge "ServerTask.ServerTaskToAuthUser"`)}
	}
	if _, ok := stc.mutation.ServerTaskToStatusID(); !ok {
		return &ValidationError{Name: "ServerTaskToStatus", err: errors.New(`ent: missing required edge "ServerTask.ServerTaskToStatus"`)}
	}
	return nil
}

func (stc *ServerTaskCreate) sqlSave(ctx context.Context) (*ServerTask, error) {
	_node, _spec := stc.createSpec()
	if err := sqlgraph.CreateNode(ctx, stc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (stc *ServerTaskCreate) createSpec() (*ServerTask, *sqlgraph.CreateSpec) {
	var (
		_node = &ServerTask{config: stc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: servertask.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: servertask.FieldID,
			},
		}
	)
	if id, ok := stc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := stc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: servertask.FieldType,
		})
		_node.Type = value
	}
	if value, ok := stc.mutation.StartTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: servertask.FieldStartTime,
		})
		_node.StartTime = value
	}
	if value, ok := stc.mutation.EndTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: servertask.FieldEndTime,
		})
		_node.EndTime = value
	}
	if value, ok := stc.mutation.Errors(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: servertask.FieldErrors,
		})
		_node.Errors = value
	}
	if value, ok := stc.mutation.LogFilePath(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: servertask.FieldLogFilePath,
		})
		_node.LogFilePath = value
	}
	if nodes := stc.mutation.ServerTaskToAuthUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   servertask.ServerTaskToAuthUserTable,
			Columns: []string{servertask.ServerTaskToAuthUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: authuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.server_task_server_task_to_auth_user = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := stc.mutation.ServerTaskToStatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   servertask.ServerTaskToStatusTable,
			Columns: []string{servertask.ServerTaskToStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: status.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := stc.mutation.ServerTaskToEnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   servertask.ServerTaskToEnvironmentTable,
			Columns: []string{servertask.ServerTaskToEnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: environment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.server_task_server_task_to_environment = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := stc.mutation.ServerTaskToBuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   servertask.ServerTaskToBuildTable,
			Columns: []string{servertask.ServerTaskToBuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: build.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.server_task_server_task_to_build = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := stc.mutation.ServerTaskToBuildCommitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   servertask.ServerTaskToBuildCommitTable,
			Columns: []string{servertask.ServerTaskToBuildCommitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: buildcommit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.server_task_server_task_to_build_commit = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := stc.mutation.ServerTaskToGinFileMiddlewareIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   servertask.ServerTaskToGinFileMiddlewareTable,
			Columns: []string{servertask.ServerTaskToGinFileMiddlewareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ginfilemiddleware.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ServerTaskCreateBulk is the builder for creating many ServerTask entities in bulk.
type ServerTaskCreateBulk struct {
	config
	builders []*ServerTaskCreate
}

// Save creates the ServerTask entities in the database.
func (stcb *ServerTaskCreateBulk) Save(ctx context.Context) ([]*ServerTask, error) {
	specs := make([]*sqlgraph.CreateSpec, len(stcb.builders))
	nodes := make([]*ServerTask, len(stcb.builders))
	mutators := make([]Mutator, len(stcb.builders))
	for i := range stcb.builders {
		func(i int, root context.Context) {
			builder := stcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ServerTaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, stcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, stcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, stcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (stcb *ServerTaskCreateBulk) SaveX(ctx context.Context) []*ServerTask {
	v, err := stcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stcb *ServerTaskCreateBulk) Exec(ctx context.Context) error {
	_, err := stcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stcb *ServerTaskCreateBulk) ExecX(ctx context.Context) {
	if err := stcb.Exec(ctx); err != nil {
		panic(err)
	}
}
