// Code generated by ent, DO NOT EDIT.

package hostdependency

import (
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the hostdependency type in the database.
	Label = "host_dependency"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHostID holds the string denoting the host_id field in the database.
	FieldHostID = "host_id"
	// FieldNetworkID holds the string denoting the network_id field in the database.
	FieldNetworkID = "network_id"
	// EdgeHostDependencyToDependOnHost holds the string denoting the hostdependencytodependonhost edge name in mutations.
	EdgeHostDependencyToDependOnHost = "HostDependencyToDependOnHost"
	// EdgeHostDependencyToDependByHost holds the string denoting the hostdependencytodependbyhost edge name in mutations.
	EdgeHostDependencyToDependByHost = "HostDependencyToDependByHost"
	// EdgeHostDependencyToNetwork holds the string denoting the hostdependencytonetwork edge name in mutations.
	EdgeHostDependencyToNetwork = "HostDependencyToNetwork"
	// EdgeHostDependencyToEnvironment holds the string denoting the hostdependencytoenvironment edge name in mutations.
	EdgeHostDependencyToEnvironment = "HostDependencyToEnvironment"
	// Table holds the table name of the hostdependency in the database.
	Table = "host_dependencies"
	// HostDependencyToDependOnHostTable is the table that holds the HostDependencyToDependOnHost relation/edge.
	HostDependencyToDependOnHostTable = "host_dependencies"
	// HostDependencyToDependOnHostInverseTable is the table name for the Host entity.
	// It exists in this package in order to avoid circular dependency with the "host" package.
	HostDependencyToDependOnHostInverseTable = "hosts"
	// HostDependencyToDependOnHostColumn is the table column denoting the HostDependencyToDependOnHost relation/edge.
	HostDependencyToDependOnHostColumn = "host_dependency_host_dependency_to_depend_on_host"
	// HostDependencyToDependByHostTable is the table that holds the HostDependencyToDependByHost relation/edge.
	HostDependencyToDependByHostTable = "host_dependencies"
	// HostDependencyToDependByHostInverseTable is the table name for the Host entity.
	// It exists in this package in order to avoid circular dependency with the "host" package.
	HostDependencyToDependByHostInverseTable = "hosts"
	// HostDependencyToDependByHostColumn is the table column denoting the HostDependencyToDependByHost relation/edge.
	HostDependencyToDependByHostColumn = "host_dependency_host_dependency_to_depend_by_host"
	// HostDependencyToNetworkTable is the table that holds the HostDependencyToNetwork relation/edge.
	HostDependencyToNetworkTable = "host_dependencies"
	// HostDependencyToNetworkInverseTable is the table name for the Network entity.
	// It exists in this package in order to avoid circular dependency with the "network" package.
	HostDependencyToNetworkInverseTable = "networks"
	// HostDependencyToNetworkColumn is the table column denoting the HostDependencyToNetwork relation/edge.
	HostDependencyToNetworkColumn = "host_dependency_host_dependency_to_network"
	// HostDependencyToEnvironmentTable is the table that holds the HostDependencyToEnvironment relation/edge.
	HostDependencyToEnvironmentTable = "host_dependencies"
	// HostDependencyToEnvironmentInverseTable is the table name for the Environment entity.
	// It exists in this package in order to avoid circular dependency with the "environment" package.
	HostDependencyToEnvironmentInverseTable = "environments"
	// HostDependencyToEnvironmentColumn is the table column denoting the HostDependencyToEnvironment relation/edge.
	HostDependencyToEnvironmentColumn = "environment_host_dependencies"
)

// Columns holds all SQL columns for hostdependency fields.
var Columns = []string{
	FieldID,
	FieldHostID,
	FieldNetworkID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "host_dependencies"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"environment_host_dependencies",
	"host_dependency_host_dependency_to_depend_on_host",
	"host_dependency_host_dependency_to_depend_by_host",
	"host_dependency_host_dependency_to_network",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
