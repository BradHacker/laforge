// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/agenttask"
	"github.com/gen0cide/laforge/ent/ansible"
	"github.com/gen0cide/laforge/ent/command"
	"github.com/gen0cide/laforge/ent/dnsrecord"
	"github.com/gen0cide/laforge/ent/filedelete"
	"github.com/gen0cide/laforge/ent/filedownload"
	"github.com/gen0cide/laforge/ent/fileextract"
	"github.com/gen0cide/laforge/ent/ginfilemiddleware"
	"github.com/gen0cide/laforge/ent/plan"
	"github.com/gen0cide/laforge/ent/provisionedhost"
	"github.com/gen0cide/laforge/ent/provisioningscheduledstep"
	"github.com/gen0cide/laforge/ent/scheduledstep"
	"github.com/gen0cide/laforge/ent/script"
	"github.com/gen0cide/laforge/ent/status"
	"github.com/google/uuid"
)

// ProvisioningScheduledStepCreate is the builder for creating a ProvisioningScheduledStep entity.
type ProvisioningScheduledStepCreate struct {
	config
	mutation *ProvisioningScheduledStepMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (pssc *ProvisioningScheduledStepCreate) SetType(pr provisioningscheduledstep.Type) *ProvisioningScheduledStepCreate {
	pssc.mutation.SetType(pr)
	return pssc
}

// SetRunTime sets the "run_time" field.
func (pssc *ProvisioningScheduledStepCreate) SetRunTime(t time.Time) *ProvisioningScheduledStepCreate {
	pssc.mutation.SetRunTime(t)
	return pssc
}

// SetID sets the "id" field.
func (pssc *ProvisioningScheduledStepCreate) SetID(u uuid.UUID) *ProvisioningScheduledStepCreate {
	pssc.mutation.SetID(u)
	return pssc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pssc *ProvisioningScheduledStepCreate) SetNillableID(u *uuid.UUID) *ProvisioningScheduledStepCreate {
	if u != nil {
		pssc.SetID(*u)
	}
	return pssc
}

// SetProvisioningScheduledStepToStatusID sets the "ProvisioningScheduledStepToStatus" edge to the Status entity by ID.
func (pssc *ProvisioningScheduledStepCreate) SetProvisioningScheduledStepToStatusID(id uuid.UUID) *ProvisioningScheduledStepCreate {
	pssc.mutation.SetProvisioningScheduledStepToStatusID(id)
	return pssc
}

// SetNillableProvisioningScheduledStepToStatusID sets the "ProvisioningScheduledStepToStatus" edge to the Status entity by ID if the given value is not nil.
func (pssc *ProvisioningScheduledStepCreate) SetNillableProvisioningScheduledStepToStatusID(id *uuid.UUID) *ProvisioningScheduledStepCreate {
	if id != nil {
		pssc = pssc.SetProvisioningScheduledStepToStatusID(*id)
	}
	return pssc
}

// SetProvisioningScheduledStepToStatus sets the "ProvisioningScheduledStepToStatus" edge to the Status entity.
func (pssc *ProvisioningScheduledStepCreate) SetProvisioningScheduledStepToStatus(s *Status) *ProvisioningScheduledStepCreate {
	return pssc.SetProvisioningScheduledStepToStatusID(s.ID)
}

// SetProvisioningScheduledStepToScheduledStepID sets the "ProvisioningScheduledStepToScheduledStep" edge to the ScheduledStep entity by ID.
func (pssc *ProvisioningScheduledStepCreate) SetProvisioningScheduledStepToScheduledStepID(id uuid.UUID) *ProvisioningScheduledStepCreate {
	pssc.mutation.SetProvisioningScheduledStepToScheduledStepID(id)
	return pssc
}

// SetProvisioningScheduledStepToScheduledStep sets the "ProvisioningScheduledStepToScheduledStep" edge to the ScheduledStep entity.
func (pssc *ProvisioningScheduledStepCreate) SetProvisioningScheduledStepToScheduledStep(s *ScheduledStep) *ProvisioningScheduledStepCreate {
	return pssc.SetProvisioningScheduledStepToScheduledStepID(s.ID)
}

// SetProvisioningScheduleStepToProvisionedHostID sets the "ProvisioningScheduleStepToProvisionedHost" edge to the ProvisionedHost entity by ID.
func (pssc *ProvisioningScheduledStepCreate) SetProvisioningScheduleStepToProvisionedHostID(id uuid.UUID) *ProvisioningScheduledStepCreate {
	pssc.mutation.SetProvisioningScheduleStepToProvisionedHostID(id)
	return pssc
}

// SetProvisioningScheduleStepToProvisionedHost sets the "ProvisioningScheduleStepToProvisionedHost" edge to the ProvisionedHost entity.
func (pssc *ProvisioningScheduledStepCreate) SetProvisioningScheduleStepToProvisionedHost(p *ProvisionedHost) *ProvisioningScheduledStepCreate {
	return pssc.SetProvisioningScheduleStepToProvisionedHostID(p.ID)
}

// SetProvisioningScheduledStepToScriptID sets the "ProvisioningScheduledStepToScript" edge to the Script entity by ID.
func (pssc *ProvisioningScheduledStepCreate) SetProvisioningScheduledStepToScriptID(id uuid.UUID) *ProvisioningScheduledStepCreate {
	pssc.mutation.SetProvisioningScheduledStepToScriptID(id)
	return pssc
}

// SetNillableProvisioningScheduledStepToScriptID sets the "ProvisioningScheduledStepToScript" edge to the Script entity by ID if the given value is not nil.
func (pssc *ProvisioningScheduledStepCreate) SetNillableProvisioningScheduledStepToScriptID(id *uuid.UUID) *ProvisioningScheduledStepCreate {
	if id != nil {
		pssc = pssc.SetProvisioningScheduledStepToScriptID(*id)
	}
	return pssc
}

// SetProvisioningScheduledStepToScript sets the "ProvisioningScheduledStepToScript" edge to the Script entity.
func (pssc *ProvisioningScheduledStepCreate) SetProvisioningScheduledStepToScript(s *Script) *ProvisioningScheduledStepCreate {
	return pssc.SetProvisioningScheduledStepToScriptID(s.ID)
}

// SetProvisioningScheduledStepToCommandID sets the "ProvisioningScheduledStepToCommand" edge to the Command entity by ID.
func (pssc *ProvisioningScheduledStepCreate) SetProvisioningScheduledStepToCommandID(id uuid.UUID) *ProvisioningScheduledStepCreate {
	pssc.mutation.SetProvisioningScheduledStepToCommandID(id)
	return pssc
}

// SetNillableProvisioningScheduledStepToCommandID sets the "ProvisioningScheduledStepToCommand" edge to the Command entity by ID if the given value is not nil.
func (pssc *ProvisioningScheduledStepCreate) SetNillableProvisioningScheduledStepToCommandID(id *uuid.UUID) *ProvisioningScheduledStepCreate {
	if id != nil {
		pssc = pssc.SetProvisioningScheduledStepToCommandID(*id)
	}
	return pssc
}

// SetProvisioningScheduledStepToCommand sets the "ProvisioningScheduledStepToCommand" edge to the Command entity.
func (pssc *ProvisioningScheduledStepCreate) SetProvisioningScheduledStepToCommand(c *Command) *ProvisioningScheduledStepCreate {
	return pssc.SetProvisioningScheduledStepToCommandID(c.ID)
}

// SetProvisioningScheduledStepToDNSRecordID sets the "ProvisioningScheduledStepToDNSRecord" edge to the DNSRecord entity by ID.
func (pssc *ProvisioningScheduledStepCreate) SetProvisioningScheduledStepToDNSRecordID(id uuid.UUID) *ProvisioningScheduledStepCreate {
	pssc.mutation.SetProvisioningScheduledStepToDNSRecordID(id)
	return pssc
}

// SetNillableProvisioningScheduledStepToDNSRecordID sets the "ProvisioningScheduledStepToDNSRecord" edge to the DNSRecord entity by ID if the given value is not nil.
func (pssc *ProvisioningScheduledStepCreate) SetNillableProvisioningScheduledStepToDNSRecordID(id *uuid.UUID) *ProvisioningScheduledStepCreate {
	if id != nil {
		pssc = pssc.SetProvisioningScheduledStepToDNSRecordID(*id)
	}
	return pssc
}

// SetProvisioningScheduledStepToDNSRecord sets the "ProvisioningScheduledStepToDNSRecord" edge to the DNSRecord entity.
func (pssc *ProvisioningScheduledStepCreate) SetProvisioningScheduledStepToDNSRecord(d *DNSRecord) *ProvisioningScheduledStepCreate {
	return pssc.SetProvisioningScheduledStepToDNSRecordID(d.ID)
}

// SetProvisioningScheduledStepToFileDeleteID sets the "ProvisioningScheduledStepToFileDelete" edge to the FileDelete entity by ID.
func (pssc *ProvisioningScheduledStepCreate) SetProvisioningScheduledStepToFileDeleteID(id uuid.UUID) *ProvisioningScheduledStepCreate {
	pssc.mutation.SetProvisioningScheduledStepToFileDeleteID(id)
	return pssc
}

// SetNillableProvisioningScheduledStepToFileDeleteID sets the "ProvisioningScheduledStepToFileDelete" edge to the FileDelete entity by ID if the given value is not nil.
func (pssc *ProvisioningScheduledStepCreate) SetNillableProvisioningScheduledStepToFileDeleteID(id *uuid.UUID) *ProvisioningScheduledStepCreate {
	if id != nil {
		pssc = pssc.SetProvisioningScheduledStepToFileDeleteID(*id)
	}
	return pssc
}

// SetProvisioningScheduledStepToFileDelete sets the "ProvisioningScheduledStepToFileDelete" edge to the FileDelete entity.
func (pssc *ProvisioningScheduledStepCreate) SetProvisioningScheduledStepToFileDelete(f *FileDelete) *ProvisioningScheduledStepCreate {
	return pssc.SetProvisioningScheduledStepToFileDeleteID(f.ID)
}

// SetProvisioningScheduledStepToFileDownloadID sets the "ProvisioningScheduledStepToFileDownload" edge to the FileDownload entity by ID.
func (pssc *ProvisioningScheduledStepCreate) SetProvisioningScheduledStepToFileDownloadID(id uuid.UUID) *ProvisioningScheduledStepCreate {
	pssc.mutation.SetProvisioningScheduledStepToFileDownloadID(id)
	return pssc
}

// SetNillableProvisioningScheduledStepToFileDownloadID sets the "ProvisioningScheduledStepToFileDownload" edge to the FileDownload entity by ID if the given value is not nil.
func (pssc *ProvisioningScheduledStepCreate) SetNillableProvisioningScheduledStepToFileDownloadID(id *uuid.UUID) *ProvisioningScheduledStepCreate {
	if id != nil {
		pssc = pssc.SetProvisioningScheduledStepToFileDownloadID(*id)
	}
	return pssc
}

// SetProvisioningScheduledStepToFileDownload sets the "ProvisioningScheduledStepToFileDownload" edge to the FileDownload entity.
func (pssc *ProvisioningScheduledStepCreate) SetProvisioningScheduledStepToFileDownload(f *FileDownload) *ProvisioningScheduledStepCreate {
	return pssc.SetProvisioningScheduledStepToFileDownloadID(f.ID)
}

// SetProvisioningScheduledStepToFileExtractID sets the "ProvisioningScheduledStepToFileExtract" edge to the FileExtract entity by ID.
func (pssc *ProvisioningScheduledStepCreate) SetProvisioningScheduledStepToFileExtractID(id uuid.UUID) *ProvisioningScheduledStepCreate {
	pssc.mutation.SetProvisioningScheduledStepToFileExtractID(id)
	return pssc
}

// SetNillableProvisioningScheduledStepToFileExtractID sets the "ProvisioningScheduledStepToFileExtract" edge to the FileExtract entity by ID if the given value is not nil.
func (pssc *ProvisioningScheduledStepCreate) SetNillableProvisioningScheduledStepToFileExtractID(id *uuid.UUID) *ProvisioningScheduledStepCreate {
	if id != nil {
		pssc = pssc.SetProvisioningScheduledStepToFileExtractID(*id)
	}
	return pssc
}

// SetProvisioningScheduledStepToFileExtract sets the "ProvisioningScheduledStepToFileExtract" edge to the FileExtract entity.
func (pssc *ProvisioningScheduledStepCreate) SetProvisioningScheduledStepToFileExtract(f *FileExtract) *ProvisioningScheduledStepCreate {
	return pssc.SetProvisioningScheduledStepToFileExtractID(f.ID)
}

// SetProvisioningScheduledStepToAnsibleID sets the "ProvisioningScheduledStepToAnsible" edge to the Ansible entity by ID.
func (pssc *ProvisioningScheduledStepCreate) SetProvisioningScheduledStepToAnsibleID(id uuid.UUID) *ProvisioningScheduledStepCreate {
	pssc.mutation.SetProvisioningScheduledStepToAnsibleID(id)
	return pssc
}

// SetNillableProvisioningScheduledStepToAnsibleID sets the "ProvisioningScheduledStepToAnsible" edge to the Ansible entity by ID if the given value is not nil.
func (pssc *ProvisioningScheduledStepCreate) SetNillableProvisioningScheduledStepToAnsibleID(id *uuid.UUID) *ProvisioningScheduledStepCreate {
	if id != nil {
		pssc = pssc.SetProvisioningScheduledStepToAnsibleID(*id)
	}
	return pssc
}

// SetProvisioningScheduledStepToAnsible sets the "ProvisioningScheduledStepToAnsible" edge to the Ansible entity.
func (pssc *ProvisioningScheduledStepCreate) SetProvisioningScheduledStepToAnsible(a *Ansible) *ProvisioningScheduledStepCreate {
	return pssc.SetProvisioningScheduledStepToAnsibleID(a.ID)
}

// SetProvisioningScheduledStepToAgentTaskID sets the "ProvisioningScheduledStepToAgentTask" edge to the AgentTask entity by ID.
func (pssc *ProvisioningScheduledStepCreate) SetProvisioningScheduledStepToAgentTaskID(id uuid.UUID) *ProvisioningScheduledStepCreate {
	pssc.mutation.SetProvisioningScheduledStepToAgentTaskID(id)
	return pssc
}

// SetNillableProvisioningScheduledStepToAgentTaskID sets the "ProvisioningScheduledStepToAgentTask" edge to the AgentTask entity by ID if the given value is not nil.
func (pssc *ProvisioningScheduledStepCreate) SetNillableProvisioningScheduledStepToAgentTaskID(id *uuid.UUID) *ProvisioningScheduledStepCreate {
	if id != nil {
		pssc = pssc.SetProvisioningScheduledStepToAgentTaskID(*id)
	}
	return pssc
}

// SetProvisioningScheduledStepToAgentTask sets the "ProvisioningScheduledStepToAgentTask" edge to the AgentTask entity.
func (pssc *ProvisioningScheduledStepCreate) SetProvisioningScheduledStepToAgentTask(a *AgentTask) *ProvisioningScheduledStepCreate {
	return pssc.SetProvisioningScheduledStepToAgentTaskID(a.ID)
}

// SetProvisioningStepToPlanID sets the "ProvisioningStepToPlan" edge to the Plan entity by ID.
func (pssc *ProvisioningScheduledStepCreate) SetProvisioningStepToPlanID(id uuid.UUID) *ProvisioningScheduledStepCreate {
	pssc.mutation.SetProvisioningStepToPlanID(id)
	return pssc
}

// SetNillableProvisioningStepToPlanID sets the "ProvisioningStepToPlan" edge to the Plan entity by ID if the given value is not nil.
func (pssc *ProvisioningScheduledStepCreate) SetNillableProvisioningStepToPlanID(id *uuid.UUID) *ProvisioningScheduledStepCreate {
	if id != nil {
		pssc = pssc.SetProvisioningStepToPlanID(*id)
	}
	return pssc
}

// SetProvisioningStepToPlan sets the "ProvisioningStepToPlan" edge to the Plan entity.
func (pssc *ProvisioningScheduledStepCreate) SetProvisioningStepToPlan(p *Plan) *ProvisioningScheduledStepCreate {
	return pssc.SetProvisioningStepToPlanID(p.ID)
}

// SetProvisioningScheduledStepToGinFileMiddlewareID sets the "ProvisioningScheduledStepToGinFileMiddleware" edge to the GinFileMiddleware entity by ID.
func (pssc *ProvisioningScheduledStepCreate) SetProvisioningScheduledStepToGinFileMiddlewareID(id uuid.UUID) *ProvisioningScheduledStepCreate {
	pssc.mutation.SetProvisioningScheduledStepToGinFileMiddlewareID(id)
	return pssc
}

// SetNillableProvisioningScheduledStepToGinFileMiddlewareID sets the "ProvisioningScheduledStepToGinFileMiddleware" edge to the GinFileMiddleware entity by ID if the given value is not nil.
func (pssc *ProvisioningScheduledStepCreate) SetNillableProvisioningScheduledStepToGinFileMiddlewareID(id *uuid.UUID) *ProvisioningScheduledStepCreate {
	if id != nil {
		pssc = pssc.SetProvisioningScheduledStepToGinFileMiddlewareID(*id)
	}
	return pssc
}

// SetProvisioningScheduledStepToGinFileMiddleware sets the "ProvisioningScheduledStepToGinFileMiddleware" edge to the GinFileMiddleware entity.
func (pssc *ProvisioningScheduledStepCreate) SetProvisioningScheduledStepToGinFileMiddleware(g *GinFileMiddleware) *ProvisioningScheduledStepCreate {
	return pssc.SetProvisioningScheduledStepToGinFileMiddlewareID(g.ID)
}

// Mutation returns the ProvisioningScheduledStepMutation object of the builder.
func (pssc *ProvisioningScheduledStepCreate) Mutation() *ProvisioningScheduledStepMutation {
	return pssc.mutation
}

// Save creates the ProvisioningScheduledStep in the database.
func (pssc *ProvisioningScheduledStepCreate) Save(ctx context.Context) (*ProvisioningScheduledStep, error) {
	var (
		err  error
		node *ProvisioningScheduledStep
	)
	pssc.defaults()
	if len(pssc.hooks) == 0 {
		if err = pssc.check(); err != nil {
			return nil, err
		}
		node, err = pssc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProvisioningScheduledStepMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pssc.check(); err != nil {
				return nil, err
			}
			pssc.mutation = mutation
			if node, err = pssc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pssc.hooks) - 1; i >= 0; i-- {
			if pssc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pssc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pssc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ProvisioningScheduledStep)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ProvisioningScheduledStepMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pssc *ProvisioningScheduledStepCreate) SaveX(ctx context.Context) *ProvisioningScheduledStep {
	v, err := pssc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pssc *ProvisioningScheduledStepCreate) Exec(ctx context.Context) error {
	_, err := pssc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pssc *ProvisioningScheduledStepCreate) ExecX(ctx context.Context) {
	if err := pssc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pssc *ProvisioningScheduledStepCreate) defaults() {
	if _, ok := pssc.mutation.ID(); !ok {
		v := provisioningscheduledstep.DefaultID()
		pssc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pssc *ProvisioningScheduledStepCreate) check() error {
	if _, ok := pssc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "ProvisioningScheduledStep.type"`)}
	}
	if v, ok := pssc.mutation.GetType(); ok {
		if err := provisioningscheduledstep.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ProvisioningScheduledStep.type": %w`, err)}
		}
	}
	if _, ok := pssc.mutation.RunTime(); !ok {
		return &ValidationError{Name: "run_time", err: errors.New(`ent: missing required field "ProvisioningScheduledStep.run_time"`)}
	}
	if _, ok := pssc.mutation.ProvisioningScheduledStepToScheduledStepID(); !ok {
		return &ValidationError{Name: "ProvisioningScheduledStepToScheduledStep", err: errors.New(`ent: missing required edge "ProvisioningScheduledStep.ProvisioningScheduledStepToScheduledStep"`)}
	}
	if _, ok := pssc.mutation.ProvisioningScheduleStepToProvisionedHostID(); !ok {
		return &ValidationError{Name: "ProvisioningScheduleStepToProvisionedHost", err: errors.New(`ent: missing required edge "ProvisioningScheduledStep.ProvisioningScheduleStepToProvisionedHost"`)}
	}
	return nil
}

func (pssc *ProvisioningScheduledStepCreate) sqlSave(ctx context.Context) (*ProvisioningScheduledStep, error) {
	_node, _spec := pssc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pssc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (pssc *ProvisioningScheduledStepCreate) createSpec() (*ProvisioningScheduledStep, *sqlgraph.CreateSpec) {
	var (
		_node = &ProvisioningScheduledStep{config: pssc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: provisioningscheduledstep.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: provisioningscheduledstep.FieldID,
			},
		}
	)
	if id, ok := pssc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pssc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: provisioningscheduledstep.FieldType,
		})
		_node.Type = value
	}
	if value, ok := pssc.mutation.RunTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: provisioningscheduledstep.FieldRunTime,
		})
		_node.RunTime = value
	}
	if nodes := pssc.mutation.ProvisioningScheduledStepToStatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToStatusTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: status.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pssc.mutation.ProvisioningScheduledStepToScheduledStepIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToScheduledStepTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToScheduledStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: scheduledstep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.provisioning_scheduled_step_provisioning_scheduled_step_to_scheduled_step = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pssc.mutation.ProvisioningScheduleStepToProvisionedHostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisioningScheduleStepToProvisionedHostTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduleStepToProvisionedHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionedhost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.provisioning_scheduled_step_provisioning_schedule_step_to_provisioned_host = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pssc.mutation.ProvisioningScheduledStepToScriptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToScriptTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToScriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: script.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.provisioning_scheduled_step_provisioning_scheduled_step_to_script = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pssc.mutation.ProvisioningScheduledStepToCommandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToCommandTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToCommandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: command.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.provisioning_scheduled_step_provisioning_scheduled_step_to_command = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pssc.mutation.ProvisioningScheduledStepToDNSRecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToDNSRecordTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToDNSRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dnsrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.provisioning_scheduled_step_provisioning_scheduled_step_to_dns_record = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pssc.mutation.ProvisioningScheduledStepToFileDeleteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToFileDeleteTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToFileDeleteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: filedelete.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.provisioning_scheduled_step_provisioning_scheduled_step_to_file_delete = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pssc.mutation.ProvisioningScheduledStepToFileDownloadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToFileDownloadTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToFileDownloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: filedownload.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.provisioning_scheduled_step_provisioning_scheduled_step_to_file_download = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pssc.mutation.ProvisioningScheduledStepToFileExtractIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToFileExtractTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToFileExtractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: fileextract.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.provisioning_scheduled_step_provisioning_scheduled_step_to_file_extract = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pssc.mutation.ProvisioningScheduledStepToAnsibleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToAnsibleTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToAnsibleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ansible.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.provisioning_scheduled_step_provisioning_scheduled_step_to_ansible = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pssc.mutation.ProvisioningScheduledStepToAgentTaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToAgentTaskTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToAgentTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: agenttask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.agent_task_agent_task_to_provisioning_scheduled_step = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pssc.mutation.ProvisioningStepToPlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisioningscheduledstep.ProvisioningStepToPlanTable,
			Columns: []string{provisioningscheduledstep.ProvisioningStepToPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.plan_plan_to_provisioning_scheduled_step = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pssc.mutation.ProvisioningScheduledStepToGinFileMiddlewareIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToGinFileMiddlewareTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToGinFileMiddlewareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ginfilemiddleware.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.gin_file_middleware_gin_file_middleware_to_provisioning_scheduled_step = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProvisioningScheduledStepCreateBulk is the builder for creating many ProvisioningScheduledStep entities in bulk.
type ProvisioningScheduledStepCreateBulk struct {
	config
	builders []*ProvisioningScheduledStepCreate
}

// Save creates the ProvisioningScheduledStep entities in the database.
func (psscb *ProvisioningScheduledStepCreateBulk) Save(ctx context.Context) ([]*ProvisioningScheduledStep, error) {
	specs := make([]*sqlgraph.CreateSpec, len(psscb.builders))
	nodes := make([]*ProvisioningScheduledStep, len(psscb.builders))
	mutators := make([]Mutator, len(psscb.builders))
	for i := range psscb.builders {
		func(i int, root context.Context) {
			builder := psscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProvisioningScheduledStepMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, psscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, psscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, psscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (psscb *ProvisioningScheduledStepCreateBulk) SaveX(ctx context.Context) []*ProvisioningScheduledStep {
	v, err := psscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (psscb *ProvisioningScheduledStepCreateBulk) Exec(ctx context.Context) error {
	_, err := psscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psscb *ProvisioningScheduledStepCreateBulk) ExecX(ctx context.Context) {
	if err := psscb.Exec(ctx); err != nil {
		panic(err)
	}
}
