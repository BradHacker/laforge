// Code generated by ent, DO NOT EDIT.

package provisionednetwork

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ProvisionedNetwork {
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ProvisionedNetwork {
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ProvisionedNetwork {
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ProvisionedNetwork {
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ProvisionedNetwork {
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ProvisionedNetwork {
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ProvisionedNetwork {
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ProvisionedNetwork {
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ProvisionedNetwork {
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.ProvisionedNetwork {
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Cidr applies equality check predicate on the "cidr" field. It's identical to CidrEQ.
func Cidr(v string) predicate.ProvisionedNetwork {
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCidr), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.ProvisionedNetwork {
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.ProvisionedNetwork {
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.ProvisionedNetwork {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.ProvisionedNetwork {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.ProvisionedNetwork {
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.ProvisionedNetwork {
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.ProvisionedNetwork {
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.ProvisionedNetwork {
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.ProvisionedNetwork {
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.ProvisionedNetwork {
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.ProvisionedNetwork {
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.ProvisionedNetwork {
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.ProvisionedNetwork {
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// CidrEQ applies the EQ predicate on the "cidr" field.
func CidrEQ(v string) predicate.ProvisionedNetwork {
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCidr), v))
	})
}

// CidrNEQ applies the NEQ predicate on the "cidr" field.
func CidrNEQ(v string) predicate.ProvisionedNetwork {
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCidr), v))
	})
}

// CidrIn applies the In predicate on the "cidr" field.
func CidrIn(vs ...string) predicate.ProvisionedNetwork {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCidr), v...))
	})
}

// CidrNotIn applies the NotIn predicate on the "cidr" field.
func CidrNotIn(vs ...string) predicate.ProvisionedNetwork {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCidr), v...))
	})
}

// CidrGT applies the GT predicate on the "cidr" field.
func CidrGT(v string) predicate.ProvisionedNetwork {
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCidr), v))
	})
}

// CidrGTE applies the GTE predicate on the "cidr" field.
func CidrGTE(v string) predicate.ProvisionedNetwork {
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCidr), v))
	})
}

// CidrLT applies the LT predicate on the "cidr" field.
func CidrLT(v string) predicate.ProvisionedNetwork {
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCidr), v))
	})
}

// CidrLTE applies the LTE predicate on the "cidr" field.
func CidrLTE(v string) predicate.ProvisionedNetwork {
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCidr), v))
	})
}

// CidrContains applies the Contains predicate on the "cidr" field.
func CidrContains(v string) predicate.ProvisionedNetwork {
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCidr), v))
	})
}

// CidrHasPrefix applies the HasPrefix predicate on the "cidr" field.
func CidrHasPrefix(v string) predicate.ProvisionedNetwork {
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCidr), v))
	})
}

// CidrHasSuffix applies the HasSuffix predicate on the "cidr" field.
func CidrHasSuffix(v string) predicate.ProvisionedNetwork {
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCidr), v))
	})
}

// CidrEqualFold applies the EqualFold predicate on the "cidr" field.
func CidrEqualFold(v string) predicate.ProvisionedNetwork {
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCidr), v))
	})
}

// CidrContainsFold applies the ContainsFold predicate on the "cidr" field.
func CidrContainsFold(v string) predicate.ProvisionedNetwork {
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCidr), v))
	})
}

// HasProvisionedNetworkToStatus applies the HasEdge predicate on the "ProvisionedNetworkToStatus" edge.
func HasProvisionedNetworkToStatus() predicate.ProvisionedNetwork {
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProvisionedNetworkToStatusTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ProvisionedNetworkToStatusTable, ProvisionedNetworkToStatusColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProvisionedNetworkToStatusWith applies the HasEdge predicate on the "ProvisionedNetworkToStatus" edge with a given conditions (other predicates).
func HasProvisionedNetworkToStatusWith(preds ...predicate.Status) predicate.ProvisionedNetwork {
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProvisionedNetworkToStatusInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ProvisionedNetworkToStatusTable, ProvisionedNetworkToStatusColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProvisionedNetworkToNetwork applies the HasEdge predicate on the "ProvisionedNetworkToNetwork" edge.
func HasProvisionedNetworkToNetwork() predicate.ProvisionedNetwork {
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProvisionedNetworkToNetworkTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProvisionedNetworkToNetworkTable, ProvisionedNetworkToNetworkColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProvisionedNetworkToNetworkWith applies the HasEdge predicate on the "ProvisionedNetworkToNetwork" edge with a given conditions (other predicates).
func HasProvisionedNetworkToNetworkWith(preds ...predicate.Network) predicate.ProvisionedNetwork {
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProvisionedNetworkToNetworkInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProvisionedNetworkToNetworkTable, ProvisionedNetworkToNetworkColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProvisionedNetworkToBuild applies the HasEdge predicate on the "ProvisionedNetworkToBuild" edge.
func HasProvisionedNetworkToBuild() predicate.ProvisionedNetwork {
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProvisionedNetworkToBuildTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProvisionedNetworkToBuildTable, ProvisionedNetworkToBuildColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProvisionedNetworkToBuildWith applies the HasEdge predicate on the "ProvisionedNetworkToBuild" edge with a given conditions (other predicates).
func HasProvisionedNetworkToBuildWith(preds ...predicate.Build) predicate.ProvisionedNetwork {
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProvisionedNetworkToBuildInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProvisionedNetworkToBuildTable, ProvisionedNetworkToBuildColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProvisionedNetworkToTeam applies the HasEdge predicate on the "ProvisionedNetworkToTeam" edge.
func HasProvisionedNetworkToTeam() predicate.ProvisionedNetwork {
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProvisionedNetworkToTeamTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProvisionedNetworkToTeamTable, ProvisionedNetworkToTeamColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProvisionedNetworkToTeamWith applies the HasEdge predicate on the "ProvisionedNetworkToTeam" edge with a given conditions (other predicates).
func HasProvisionedNetworkToTeamWith(preds ...predicate.Team) predicate.ProvisionedNetwork {
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProvisionedNetworkToTeamInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProvisionedNetworkToTeamTable, ProvisionedNetworkToTeamColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProvisionedNetworkToProvisionedHost applies the HasEdge predicate on the "ProvisionedNetworkToProvisionedHost" edge.
func HasProvisionedNetworkToProvisionedHost() predicate.ProvisionedNetwork {
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProvisionedNetworkToProvisionedHostTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ProvisionedNetworkToProvisionedHostTable, ProvisionedNetworkToProvisionedHostColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProvisionedNetworkToProvisionedHostWith applies the HasEdge predicate on the "ProvisionedNetworkToProvisionedHost" edge with a given conditions (other predicates).
func HasProvisionedNetworkToProvisionedHostWith(preds ...predicate.ProvisionedHost) predicate.ProvisionedNetwork {
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProvisionedNetworkToProvisionedHostInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ProvisionedNetworkToProvisionedHostTable, ProvisionedNetworkToProvisionedHostColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProvisionedNetworkToPlan applies the HasEdge predicate on the "ProvisionedNetworkToPlan" edge.
func HasProvisionedNetworkToPlan() predicate.ProvisionedNetwork {
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProvisionedNetworkToPlanTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ProvisionedNetworkToPlanTable, ProvisionedNetworkToPlanColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProvisionedNetworkToPlanWith applies the HasEdge predicate on the "ProvisionedNetworkToPlan" edge with a given conditions (other predicates).
func HasProvisionedNetworkToPlanWith(preds ...predicate.Plan) predicate.ProvisionedNetwork {
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProvisionedNetworkToPlanInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ProvisionedNetworkToPlanTable, ProvisionedNetworkToPlanColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProvisionedNetwork) predicate.ProvisionedNetwork {
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProvisionedNetwork) predicate.ProvisionedNetwork {
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProvisionedNetwork) predicate.ProvisionedNetwork {
	return predicate.ProvisionedNetwork(func(s *sql.Selector) {
		p(s.Not())
	})
}
