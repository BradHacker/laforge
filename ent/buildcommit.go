// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/buildcommit"
	"github.com/google/uuid"
)

// BuildCommit is the model entity for the BuildCommit schema.
type BuildCommit struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type buildcommit.Type `json:"type,omitempty"`
	// Revision holds the value of the "revision" field.
	Revision int `json:"revision,omitempty"`
	// State holds the value of the "state" field.
	State buildcommit.State `json:"state,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BuildCommitQuery when eager-loading is set.
	Edges BuildCommitEdges `json:"edges"`

	// Edges put into the main struct to be loaded via hcl
	// BuildCommitToBuild holds the value of the BuildCommitToBuild edge.
	HCLBuildCommitToBuild *Build `json:"BuildCommitToBuild,omitempty"`
	// BuildCommitToServerTask holds the value of the BuildCommitToServerTask edge.
	HCLBuildCommitToServerTask []*ServerTask `json:"BuildCommitToServerTask,omitempty"`
	// BuildCommitToPlanDiffs holds the value of the BuildCommitToPlanDiffs edge.
	HCLBuildCommitToPlanDiffs []*PlanDiff `json:"BuildCommitToPlanDiffs,omitempty"`
	//
	build_commit_build_commit_to_build *uuid.UUID
}

// BuildCommitEdges holds the relations/edges for other nodes in the graph.
type BuildCommitEdges struct {
	// BuildCommitToBuild holds the value of the BuildCommitToBuild edge.
	BuildCommitToBuild *Build `json:"BuildCommitToBuild,omitempty"`
	// BuildCommitToServerTask holds the value of the BuildCommitToServerTask edge.
	BuildCommitToServerTask []*ServerTask `json:"BuildCommitToServerTask,omitempty"`
	// BuildCommitToPlanDiffs holds the value of the BuildCommitToPlanDiffs edge.
	BuildCommitToPlanDiffs []*PlanDiff `json:"BuildCommitToPlanDiffs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// BuildCommitToBuildOrErr returns the BuildCommitToBuild value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BuildCommitEdges) BuildCommitToBuildOrErr() (*Build, error) {
	if e.loadedTypes[0] {
		if e.BuildCommitToBuild == nil {
			// The edge BuildCommitToBuild was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: build.Label}
		}
		return e.BuildCommitToBuild, nil
	}
	return nil, &NotLoadedError{edge: "BuildCommitToBuild"}
}

// BuildCommitToServerTaskOrErr returns the BuildCommitToServerTask value or an error if the edge
// was not loaded in eager-loading.
func (e BuildCommitEdges) BuildCommitToServerTaskOrErr() ([]*ServerTask, error) {
	if e.loadedTypes[1] {
		return e.BuildCommitToServerTask, nil
	}
	return nil, &NotLoadedError{edge: "BuildCommitToServerTask"}
}

// BuildCommitToPlanDiffsOrErr returns the BuildCommitToPlanDiffs value or an error if the edge
// was not loaded in eager-loading.
func (e BuildCommitEdges) BuildCommitToPlanDiffsOrErr() ([]*PlanDiff, error) {
	if e.loadedTypes[2] {
		return e.BuildCommitToPlanDiffs, nil
	}
	return nil, &NotLoadedError{edge: "BuildCommitToPlanDiffs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BuildCommit) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case buildcommit.FieldRevision:
			values[i] = new(sql.NullInt64)
		case buildcommit.FieldType, buildcommit.FieldState:
			values[i] = new(sql.NullString)
		case buildcommit.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case buildcommit.FieldID:
			values[i] = new(uuid.UUID)
		case buildcommit.ForeignKeys[0]: // build_commit_build_commit_to_build
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type BuildCommit", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BuildCommit fields.
func (bc *BuildCommit) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case buildcommit.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				bc.ID = *value
			}
		case buildcommit.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				bc.Type = buildcommit.Type(value.String)
			}
		case buildcommit.FieldRevision:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field revision", values[i])
			} else if value.Valid {
				bc.Revision = int(value.Int64)
			}
		case buildcommit.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				bc.State = buildcommit.State(value.String)
			}
		case buildcommit.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				bc.CreatedAt = value.Time
			}
		case buildcommit.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field build_commit_build_commit_to_build", values[i])
			} else if value.Valid {
				bc.build_commit_build_commit_to_build = new(uuid.UUID)
				*bc.build_commit_build_commit_to_build = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryBuildCommitToBuild queries the "BuildCommitToBuild" edge of the BuildCommit entity.
func (bc *BuildCommit) QueryBuildCommitToBuild() *BuildQuery {
	return (&BuildCommitClient{config: bc.config}).QueryBuildCommitToBuild(bc)
}

// QueryBuildCommitToServerTask queries the "BuildCommitToServerTask" edge of the BuildCommit entity.
func (bc *BuildCommit) QueryBuildCommitToServerTask() *ServerTaskQuery {
	return (&BuildCommitClient{config: bc.config}).QueryBuildCommitToServerTask(bc)
}

// QueryBuildCommitToPlanDiffs queries the "BuildCommitToPlanDiffs" edge of the BuildCommit entity.
func (bc *BuildCommit) QueryBuildCommitToPlanDiffs() *PlanDiffQuery {
	return (&BuildCommitClient{config: bc.config}).QueryBuildCommitToPlanDiffs(bc)
}

// Update returns a builder for updating this BuildCommit.
// Note that you need to call BuildCommit.Unwrap() before calling this method if this BuildCommit
// was returned from a transaction, and the transaction was committed or rolled back.
func (bc *BuildCommit) Update() *BuildCommitUpdateOne {
	return (&BuildCommitClient{config: bc.config}).UpdateOne(bc)
}

// Unwrap unwraps the BuildCommit entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bc *BuildCommit) Unwrap() *BuildCommit {
	tx, ok := bc.config.driver.(*txDriver)
	if !ok {
		panic("ent: BuildCommit is not a transactional entity")
	}
	bc.config.driver = tx.drv
	return bc
}

// String implements the fmt.Stringer.
func (bc *BuildCommit) String() string {
	var builder strings.Builder
	builder.WriteString("BuildCommit(")
	builder.WriteString(fmt.Sprintf("id=%v", bc.ID))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", bc.Type))
	builder.WriteString(", revision=")
	builder.WriteString(fmt.Sprintf("%v", bc.Revision))
	builder.WriteString(", state=")
	builder.WriteString(fmt.Sprintf("%v", bc.State))
	builder.WriteString(", created_at=")
	builder.WriteString(bc.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// BuildCommits is a parsable slice of BuildCommit.
type BuildCommits []*BuildCommit

func (bc BuildCommits) config(cfg config) {
	for _i := range bc {
		bc[_i].config = cfg
	}
}
