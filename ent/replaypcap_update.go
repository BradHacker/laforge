// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/replaypcap"
	"github.com/google/uuid"
)

// ReplayPcapUpdate is the builder for updating ReplayPcap entities.
type ReplayPcapUpdate struct {
	config
	hooks    []Hook
	mutation *ReplayPcapMutation
}

// Where appends a list predicates to the ReplayPcapUpdate builder.
func (rpu *ReplayPcapUpdate) Where(ps ...predicate.ReplayPcap) *ReplayPcapUpdate {
	rpu.mutation.Where(ps...)
	return rpu
}

// SetHclID sets the "hcl_id" field.
func (rpu *ReplayPcapUpdate) SetHclID(s string) *ReplayPcapUpdate {
	rpu.mutation.SetHclID(s)
	return rpu
}

// SetSourceType sets the "source_type" field.
func (rpu *ReplayPcapUpdate) SetSourceType(s string) *ReplayPcapUpdate {
	rpu.mutation.SetSourceType(s)
	return rpu
}

// SetSource sets the "source" field.
func (rpu *ReplayPcapUpdate) SetSource(s string) *ReplayPcapUpdate {
	rpu.mutation.SetSource(s)
	return rpu
}

// SetTemplate sets the "template" field.
func (rpu *ReplayPcapUpdate) SetTemplate(b bool) *ReplayPcapUpdate {
	rpu.mutation.SetTemplate(b)
	return rpu
}

// SetDisabled sets the "disabled" field.
func (rpu *ReplayPcapUpdate) SetDisabled(b bool) *ReplayPcapUpdate {
	rpu.mutation.SetDisabled(b)
	return rpu
}

// SetAbsPath sets the "abs_path" field.
func (rpu *ReplayPcapUpdate) SetAbsPath(s string) *ReplayPcapUpdate {
	rpu.mutation.SetAbsPath(s)
	return rpu
}

// SetType sets the "type" field.
func (rpu *ReplayPcapUpdate) SetType(r replaypcap.Type) *ReplayPcapUpdate {
	rpu.mutation.SetType(r)
	return rpu
}

// SetTags sets the "tags" field.
func (rpu *ReplayPcapUpdate) SetTags(m map[string]string) *ReplayPcapUpdate {
	rpu.mutation.SetTags(m)
	return rpu
}

// SetEnvironmentID sets the "Environment" edge to the Environment entity by ID.
func (rpu *ReplayPcapUpdate) SetEnvironmentID(id uuid.UUID) *ReplayPcapUpdate {
	rpu.mutation.SetEnvironmentID(id)
	return rpu
}

// SetNillableEnvironmentID sets the "Environment" edge to the Environment entity by ID if the given value is not nil.
func (rpu *ReplayPcapUpdate) SetNillableEnvironmentID(id *uuid.UUID) *ReplayPcapUpdate {
	if id != nil {
		rpu = rpu.SetEnvironmentID(*id)
	}
	return rpu
}

// SetEnvironment sets the "Environment" edge to the Environment entity.
func (rpu *ReplayPcapUpdate) SetEnvironment(e *Environment) *ReplayPcapUpdate {
	return rpu.SetEnvironmentID(e.ID)
}

// Mutation returns the ReplayPcapMutation object of the builder.
func (rpu *ReplayPcapUpdate) Mutation() *ReplayPcapMutation {
	return rpu.mutation
}

// ClearEnvironment clears the "Environment" edge to the Environment entity.
func (rpu *ReplayPcapUpdate) ClearEnvironment() *ReplayPcapUpdate {
	rpu.mutation.ClearEnvironment()
	return rpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rpu *ReplayPcapUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(rpu.hooks) == 0 {
		if err = rpu.check(); err != nil {
			return 0, err
		}
		affected, err = rpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReplayPcapMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rpu.check(); err != nil {
				return 0, err
			}
			rpu.mutation = mutation
			affected, err = rpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rpu.hooks) - 1; i >= 0; i-- {
			if rpu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rpu *ReplayPcapUpdate) SaveX(ctx context.Context) int {
	affected, err := rpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rpu *ReplayPcapUpdate) Exec(ctx context.Context) error {
	_, err := rpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpu *ReplayPcapUpdate) ExecX(ctx context.Context) {
	if err := rpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rpu *ReplayPcapUpdate) check() error {
	if v, ok := rpu.mutation.GetType(); ok {
		if err := replaypcap.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ReplayPcap.type": %w`, err)}
		}
	}
	return nil
}

func (rpu *ReplayPcapUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   replaypcap.Table,
			Columns: replaypcap.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: replaypcap.FieldID,
			},
		},
	}
	if ps := rpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpu.mutation.HclID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: replaypcap.FieldHclID,
		})
	}
	if value, ok := rpu.mutation.SourceType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: replaypcap.FieldSourceType,
		})
	}
	if value, ok := rpu.mutation.Source(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: replaypcap.FieldSource,
		})
	}
	if value, ok := rpu.mutation.Template(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: replaypcap.FieldTemplate,
		})
	}
	if value, ok := rpu.mutation.Disabled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: replaypcap.FieldDisabled,
		})
	}
	if value, ok := rpu.mutation.AbsPath(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: replaypcap.FieldAbsPath,
		})
	}
	if value, ok := rpu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: replaypcap.FieldType,
		})
	}
	if value, ok := rpu.mutation.Tags(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: replaypcap.FieldTags,
		})
	}
	if rpu.mutation.EnvironmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   replaypcap.EnvironmentTable,
			Columns: []string{replaypcap.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: environment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpu.mutation.EnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   replaypcap.EnvironmentTable,
			Columns: []string{replaypcap.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: environment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{replaypcap.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ReplayPcapUpdateOne is the builder for updating a single ReplayPcap entity.
type ReplayPcapUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReplayPcapMutation
}

// SetHclID sets the "hcl_id" field.
func (rpuo *ReplayPcapUpdateOne) SetHclID(s string) *ReplayPcapUpdateOne {
	rpuo.mutation.SetHclID(s)
	return rpuo
}

// SetSourceType sets the "source_type" field.
func (rpuo *ReplayPcapUpdateOne) SetSourceType(s string) *ReplayPcapUpdateOne {
	rpuo.mutation.SetSourceType(s)
	return rpuo
}

// SetSource sets the "source" field.
func (rpuo *ReplayPcapUpdateOne) SetSource(s string) *ReplayPcapUpdateOne {
	rpuo.mutation.SetSource(s)
	return rpuo
}

// SetTemplate sets the "template" field.
func (rpuo *ReplayPcapUpdateOne) SetTemplate(b bool) *ReplayPcapUpdateOne {
	rpuo.mutation.SetTemplate(b)
	return rpuo
}

// SetDisabled sets the "disabled" field.
func (rpuo *ReplayPcapUpdateOne) SetDisabled(b bool) *ReplayPcapUpdateOne {
	rpuo.mutation.SetDisabled(b)
	return rpuo
}

// SetAbsPath sets the "abs_path" field.
func (rpuo *ReplayPcapUpdateOne) SetAbsPath(s string) *ReplayPcapUpdateOne {
	rpuo.mutation.SetAbsPath(s)
	return rpuo
}

// SetType sets the "type" field.
func (rpuo *ReplayPcapUpdateOne) SetType(r replaypcap.Type) *ReplayPcapUpdateOne {
	rpuo.mutation.SetType(r)
	return rpuo
}

// SetTags sets the "tags" field.
func (rpuo *ReplayPcapUpdateOne) SetTags(m map[string]string) *ReplayPcapUpdateOne {
	rpuo.mutation.SetTags(m)
	return rpuo
}

// SetEnvironmentID sets the "Environment" edge to the Environment entity by ID.
func (rpuo *ReplayPcapUpdateOne) SetEnvironmentID(id uuid.UUID) *ReplayPcapUpdateOne {
	rpuo.mutation.SetEnvironmentID(id)
	return rpuo
}

// SetNillableEnvironmentID sets the "Environment" edge to the Environment entity by ID if the given value is not nil.
func (rpuo *ReplayPcapUpdateOne) SetNillableEnvironmentID(id *uuid.UUID) *ReplayPcapUpdateOne {
	if id != nil {
		rpuo = rpuo.SetEnvironmentID(*id)
	}
	return rpuo
}

// SetEnvironment sets the "Environment" edge to the Environment entity.
func (rpuo *ReplayPcapUpdateOne) SetEnvironment(e *Environment) *ReplayPcapUpdateOne {
	return rpuo.SetEnvironmentID(e.ID)
}

// Mutation returns the ReplayPcapMutation object of the builder.
func (rpuo *ReplayPcapUpdateOne) Mutation() *ReplayPcapMutation {
	return rpuo.mutation
}

// ClearEnvironment clears the "Environment" edge to the Environment entity.
func (rpuo *ReplayPcapUpdateOne) ClearEnvironment() *ReplayPcapUpdateOne {
	rpuo.mutation.ClearEnvironment()
	return rpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rpuo *ReplayPcapUpdateOne) Select(field string, fields ...string) *ReplayPcapUpdateOne {
	rpuo.fields = append([]string{field}, fields...)
	return rpuo
}

// Save executes the query and returns the updated ReplayPcap entity.
func (rpuo *ReplayPcapUpdateOne) Save(ctx context.Context) (*ReplayPcap, error) {
	var (
		err  error
		node *ReplayPcap
	)
	if len(rpuo.hooks) == 0 {
		if err = rpuo.check(); err != nil {
			return nil, err
		}
		node, err = rpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReplayPcapMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rpuo.check(); err != nil {
				return nil, err
			}
			rpuo.mutation = mutation
			node, err = rpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rpuo.hooks) - 1; i >= 0; i-- {
			if rpuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rpuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, rpuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ReplayPcap)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ReplayPcapMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rpuo *ReplayPcapUpdateOne) SaveX(ctx context.Context) *ReplayPcap {
	node, err := rpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rpuo *ReplayPcapUpdateOne) Exec(ctx context.Context) error {
	_, err := rpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpuo *ReplayPcapUpdateOne) ExecX(ctx context.Context) {
	if err := rpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rpuo *ReplayPcapUpdateOne) check() error {
	if v, ok := rpuo.mutation.GetType(); ok {
		if err := replaypcap.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ReplayPcap.type": %w`, err)}
		}
	}
	return nil
}

func (rpuo *ReplayPcapUpdateOne) sqlSave(ctx context.Context) (_node *ReplayPcap, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   replaypcap.Table,
			Columns: replaypcap.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: replaypcap.FieldID,
			},
		},
	}
	id, ok := rpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ReplayPcap.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, replaypcap.FieldID)
		for _, f := range fields {
			if !replaypcap.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != replaypcap.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpuo.mutation.HclID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: replaypcap.FieldHclID,
		})
	}
	if value, ok := rpuo.mutation.SourceType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: replaypcap.FieldSourceType,
		})
	}
	if value, ok := rpuo.mutation.Source(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: replaypcap.FieldSource,
		})
	}
	if value, ok := rpuo.mutation.Template(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: replaypcap.FieldTemplate,
		})
	}
	if value, ok := rpuo.mutation.Disabled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: replaypcap.FieldDisabled,
		})
	}
	if value, ok := rpuo.mutation.AbsPath(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: replaypcap.FieldAbsPath,
		})
	}
	if value, ok := rpuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: replaypcap.FieldType,
		})
	}
	if value, ok := rpuo.mutation.Tags(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: replaypcap.FieldTags,
		})
	}
	if rpuo.mutation.EnvironmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   replaypcap.EnvironmentTable,
			Columns: []string{replaypcap.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: environment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpuo.mutation.EnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   replaypcap.EnvironmentTable,
			Columns: []string{replaypcap.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: environment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ReplayPcap{config: rpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{replaypcap.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
