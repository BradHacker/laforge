// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/gen0cide/laforge/ent/ansible"
	"github.com/gen0cide/laforge/ent/command"
	"github.com/gen0cide/laforge/ent/filedelete"
	"github.com/gen0cide/laforge/ent/filedownload"
	"github.com/gen0cide/laforge/ent/fileextract"
	"github.com/gen0cide/laforge/ent/provisionedhost"
	"github.com/gen0cide/laforge/ent/schedulestep"
	"github.com/gen0cide/laforge/ent/script"
	"github.com/gen0cide/laforge/ent/status"
	"github.com/google/uuid"
)

// ScheduleStep is the model entity for the ScheduleStep schema.
type ScheduleStep struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type schedulestep.Type `json:"type,omitempty"`
	// Repeated holds the value of the "repeated" field.
	Repeated bool `json:"repeated,omitempty"`
	// StartTime holds the value of the "start_time" field.
	StartTime time.Time `json:"start_time,omitempty"`
	// EndTime holds the value of the "end_time" field.
	EndTime time.Time `json:"end_time,omitempty"`
	// Interval holds the value of the "interval" field.
	Interval int `json:"interval,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ScheduleStepQuery when eager-loading is set.
	Edges ScheduleStepEdges `json:"edges"`

	// Edges put into the main struct to be loaded via hcl
	// ScheduleStepToStatus holds the value of the ScheduleStepToStatus edge.
	HCLScheduleStepToStatus *Status `json:"ScheduleStepToStatus,omitempty"`
	// ScheduleStepToProvisionedHost holds the value of the ScheduleStepToProvisionedHost edge.
	HCLScheduleStepToProvisionedHost *ProvisionedHost `json:"ScheduleStepToProvisionedHost,omitempty"`
	// ScheduleStepToScript holds the value of the ScheduleStepToScript edge.
	HCLScheduleStepToScript *Script `json:"ScheduleStepToScript,omitempty"`
	// ScheduleStepToCommand holds the value of the ScheduleStepToCommand edge.
	HCLScheduleStepToCommand *Command `json:"ScheduleStepToCommand,omitempty"`
	// ScheduleStepToFileDelete holds the value of the ScheduleStepToFileDelete edge.
	HCLScheduleStepToFileDelete *FileDelete `json:"ScheduleStepToFileDelete,omitempty"`
	// ScheduleStepToFileDownload holds the value of the ScheduleStepToFileDownload edge.
	HCLScheduleStepToFileDownload *FileDownload `json:"ScheduleStepToFileDownload,omitempty"`
	// ScheduleStepToFileExtract holds the value of the ScheduleStepToFileExtract edge.
	HCLScheduleStepToFileExtract *FileExtract `json:"ScheduleStepToFileExtract,omitempty"`
	// ScheduleStepToAnsible holds the value of the ScheduleStepToAnsible edge.
	HCLScheduleStepToAnsible *Ansible `json:"ScheduleStepToAnsible,omitempty"`
	// ScheduleStepToProvisionedScheduleStep holds the value of the ScheduleStepToProvisionedScheduleStep edge.
	HCLScheduleStepToProvisionedScheduleStep []*ProvisionedScheduleStep `json:"ScheduleStepToProvisionedScheduleStep,omitempty"`
	//
	schedule_step_schedule_step_to_provisioned_host *uuid.UUID
	schedule_step_schedule_step_to_script           *uuid.UUID
	schedule_step_schedule_step_to_command          *uuid.UUID
	schedule_step_schedule_step_to_file_delete      *uuid.UUID
	schedule_step_schedule_step_to_file_download    *uuid.UUID
	schedule_step_schedule_step_to_file_extract     *uuid.UUID
	schedule_step_schedule_step_to_ansible          *uuid.UUID
}

// ScheduleStepEdges holds the relations/edges for other nodes in the graph.
type ScheduleStepEdges struct {
	// ScheduleStepToStatus holds the value of the ScheduleStepToStatus edge.
	ScheduleStepToStatus *Status `json:"ScheduleStepToStatus,omitempty"`
	// ScheduleStepToProvisionedHost holds the value of the ScheduleStepToProvisionedHost edge.
	ScheduleStepToProvisionedHost *ProvisionedHost `json:"ScheduleStepToProvisionedHost,omitempty"`
	// ScheduleStepToScript holds the value of the ScheduleStepToScript edge.
	ScheduleStepToScript *Script `json:"ScheduleStepToScript,omitempty"`
	// ScheduleStepToCommand holds the value of the ScheduleStepToCommand edge.
	ScheduleStepToCommand *Command `json:"ScheduleStepToCommand,omitempty"`
	// ScheduleStepToFileDelete holds the value of the ScheduleStepToFileDelete edge.
	ScheduleStepToFileDelete *FileDelete `json:"ScheduleStepToFileDelete,omitempty"`
	// ScheduleStepToFileDownload holds the value of the ScheduleStepToFileDownload edge.
	ScheduleStepToFileDownload *FileDownload `json:"ScheduleStepToFileDownload,omitempty"`
	// ScheduleStepToFileExtract holds the value of the ScheduleStepToFileExtract edge.
	ScheduleStepToFileExtract *FileExtract `json:"ScheduleStepToFileExtract,omitempty"`
	// ScheduleStepToAnsible holds the value of the ScheduleStepToAnsible edge.
	ScheduleStepToAnsible *Ansible `json:"ScheduleStepToAnsible,omitempty"`
	// ScheduleStepToProvisionedScheduleStep holds the value of the ScheduleStepToProvisionedScheduleStep edge.
	ScheduleStepToProvisionedScheduleStep []*ProvisionedScheduleStep `json:"ScheduleStepToProvisionedScheduleStep,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [9]bool
}

// ScheduleStepToStatusOrErr returns the ScheduleStepToStatus value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScheduleStepEdges) ScheduleStepToStatusOrErr() (*Status, error) {
	if e.loadedTypes[0] {
		if e.ScheduleStepToStatus == nil {
			// The edge ScheduleStepToStatus was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: status.Label}
		}
		return e.ScheduleStepToStatus, nil
	}
	return nil, &NotLoadedError{edge: "ScheduleStepToStatus"}
}

// ScheduleStepToProvisionedHostOrErr returns the ScheduleStepToProvisionedHost value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScheduleStepEdges) ScheduleStepToProvisionedHostOrErr() (*ProvisionedHost, error) {
	if e.loadedTypes[1] {
		if e.ScheduleStepToProvisionedHost == nil {
			// The edge ScheduleStepToProvisionedHost was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: provisionedhost.Label}
		}
		return e.ScheduleStepToProvisionedHost, nil
	}
	return nil, &NotLoadedError{edge: "ScheduleStepToProvisionedHost"}
}

// ScheduleStepToScriptOrErr returns the ScheduleStepToScript value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScheduleStepEdges) ScheduleStepToScriptOrErr() (*Script, error) {
	if e.loadedTypes[2] {
		if e.ScheduleStepToScript == nil {
			// The edge ScheduleStepToScript was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: script.Label}
		}
		return e.ScheduleStepToScript, nil
	}
	return nil, &NotLoadedError{edge: "ScheduleStepToScript"}
}

// ScheduleStepToCommandOrErr returns the ScheduleStepToCommand value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScheduleStepEdges) ScheduleStepToCommandOrErr() (*Command, error) {
	if e.loadedTypes[3] {
		if e.ScheduleStepToCommand == nil {
			// The edge ScheduleStepToCommand was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: command.Label}
		}
		return e.ScheduleStepToCommand, nil
	}
	return nil, &NotLoadedError{edge: "ScheduleStepToCommand"}
}

// ScheduleStepToFileDeleteOrErr returns the ScheduleStepToFileDelete value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScheduleStepEdges) ScheduleStepToFileDeleteOrErr() (*FileDelete, error) {
	if e.loadedTypes[4] {
		if e.ScheduleStepToFileDelete == nil {
			// The edge ScheduleStepToFileDelete was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: filedelete.Label}
		}
		return e.ScheduleStepToFileDelete, nil
	}
	return nil, &NotLoadedError{edge: "ScheduleStepToFileDelete"}
}

// ScheduleStepToFileDownloadOrErr returns the ScheduleStepToFileDownload value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScheduleStepEdges) ScheduleStepToFileDownloadOrErr() (*FileDownload, error) {
	if e.loadedTypes[5] {
		if e.ScheduleStepToFileDownload == nil {
			// The edge ScheduleStepToFileDownload was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: filedownload.Label}
		}
		return e.ScheduleStepToFileDownload, nil
	}
	return nil, &NotLoadedError{edge: "ScheduleStepToFileDownload"}
}

// ScheduleStepToFileExtractOrErr returns the ScheduleStepToFileExtract value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScheduleStepEdges) ScheduleStepToFileExtractOrErr() (*FileExtract, error) {
	if e.loadedTypes[6] {
		if e.ScheduleStepToFileExtract == nil {
			// The edge ScheduleStepToFileExtract was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: fileextract.Label}
		}
		return e.ScheduleStepToFileExtract, nil
	}
	return nil, &NotLoadedError{edge: "ScheduleStepToFileExtract"}
}

// ScheduleStepToAnsibleOrErr returns the ScheduleStepToAnsible value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScheduleStepEdges) ScheduleStepToAnsibleOrErr() (*Ansible, error) {
	if e.loadedTypes[7] {
		if e.ScheduleStepToAnsible == nil {
			// The edge ScheduleStepToAnsible was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: ansible.Label}
		}
		return e.ScheduleStepToAnsible, nil
	}
	return nil, &NotLoadedError{edge: "ScheduleStepToAnsible"}
}

// ScheduleStepToProvisionedScheduleStepOrErr returns the ScheduleStepToProvisionedScheduleStep value or an error if the edge
// was not loaded in eager-loading.
func (e ScheduleStepEdges) ScheduleStepToProvisionedScheduleStepOrErr() ([]*ProvisionedScheduleStep, error) {
	if e.loadedTypes[8] {
		return e.ScheduleStepToProvisionedScheduleStep, nil
	}
	return nil, &NotLoadedError{edge: "ScheduleStepToProvisionedScheduleStep"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ScheduleStep) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case schedulestep.FieldRepeated:
			values[i] = new(sql.NullBool)
		case schedulestep.FieldInterval:
			values[i] = new(sql.NullInt64)
		case schedulestep.FieldType:
			values[i] = new(sql.NullString)
		case schedulestep.FieldStartTime, schedulestep.FieldEndTime:
			values[i] = new(sql.NullTime)
		case schedulestep.FieldID:
			values[i] = new(uuid.UUID)
		case schedulestep.ForeignKeys[0]: // schedule_step_schedule_step_to_provisioned_host
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case schedulestep.ForeignKeys[1]: // schedule_step_schedule_step_to_script
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case schedulestep.ForeignKeys[2]: // schedule_step_schedule_step_to_command
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case schedulestep.ForeignKeys[3]: // schedule_step_schedule_step_to_file_delete
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case schedulestep.ForeignKeys[4]: // schedule_step_schedule_step_to_file_download
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case schedulestep.ForeignKeys[5]: // schedule_step_schedule_step_to_file_extract
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case schedulestep.ForeignKeys[6]: // schedule_step_schedule_step_to_ansible
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type ScheduleStep", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ScheduleStep fields.
func (ss *ScheduleStep) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case schedulestep.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ss.ID = *value
			}
		case schedulestep.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ss.Type = schedulestep.Type(value.String)
			}
		case schedulestep.FieldRepeated:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field repeated", values[i])
			} else if value.Valid {
				ss.Repeated = value.Bool
			}
		case schedulestep.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				ss.StartTime = value.Time
			}
		case schedulestep.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				ss.EndTime = value.Time
			}
		case schedulestep.FieldInterval:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field interval", values[i])
			} else if value.Valid {
				ss.Interval = int(value.Int64)
			}
		case schedulestep.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field schedule_step_schedule_step_to_provisioned_host", values[i])
			} else if value.Valid {
				ss.schedule_step_schedule_step_to_provisioned_host = new(uuid.UUID)
				*ss.schedule_step_schedule_step_to_provisioned_host = *value.S.(*uuid.UUID)
			}
		case schedulestep.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field schedule_step_schedule_step_to_script", values[i])
			} else if value.Valid {
				ss.schedule_step_schedule_step_to_script = new(uuid.UUID)
				*ss.schedule_step_schedule_step_to_script = *value.S.(*uuid.UUID)
			}
		case schedulestep.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field schedule_step_schedule_step_to_command", values[i])
			} else if value.Valid {
				ss.schedule_step_schedule_step_to_command = new(uuid.UUID)
				*ss.schedule_step_schedule_step_to_command = *value.S.(*uuid.UUID)
			}
		case schedulestep.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field schedule_step_schedule_step_to_file_delete", values[i])
			} else if value.Valid {
				ss.schedule_step_schedule_step_to_file_delete = new(uuid.UUID)
				*ss.schedule_step_schedule_step_to_file_delete = *value.S.(*uuid.UUID)
			}
		case schedulestep.ForeignKeys[4]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field schedule_step_schedule_step_to_file_download", values[i])
			} else if value.Valid {
				ss.schedule_step_schedule_step_to_file_download = new(uuid.UUID)
				*ss.schedule_step_schedule_step_to_file_download = *value.S.(*uuid.UUID)
			}
		case schedulestep.ForeignKeys[5]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field schedule_step_schedule_step_to_file_extract", values[i])
			} else if value.Valid {
				ss.schedule_step_schedule_step_to_file_extract = new(uuid.UUID)
				*ss.schedule_step_schedule_step_to_file_extract = *value.S.(*uuid.UUID)
			}
		case schedulestep.ForeignKeys[6]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field schedule_step_schedule_step_to_ansible", values[i])
			} else if value.Valid {
				ss.schedule_step_schedule_step_to_ansible = new(uuid.UUID)
				*ss.schedule_step_schedule_step_to_ansible = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryScheduleStepToStatus queries the "ScheduleStepToStatus" edge of the ScheduleStep entity.
func (ss *ScheduleStep) QueryScheduleStepToStatus() *StatusQuery {
	return (&ScheduleStepClient{config: ss.config}).QueryScheduleStepToStatus(ss)
}

// QueryScheduleStepToProvisionedHost queries the "ScheduleStepToProvisionedHost" edge of the ScheduleStep entity.
func (ss *ScheduleStep) QueryScheduleStepToProvisionedHost() *ProvisionedHostQuery {
	return (&ScheduleStepClient{config: ss.config}).QueryScheduleStepToProvisionedHost(ss)
}

// QueryScheduleStepToScript queries the "ScheduleStepToScript" edge of the ScheduleStep entity.
func (ss *ScheduleStep) QueryScheduleStepToScript() *ScriptQuery {
	return (&ScheduleStepClient{config: ss.config}).QueryScheduleStepToScript(ss)
}

// QueryScheduleStepToCommand queries the "ScheduleStepToCommand" edge of the ScheduleStep entity.
func (ss *ScheduleStep) QueryScheduleStepToCommand() *CommandQuery {
	return (&ScheduleStepClient{config: ss.config}).QueryScheduleStepToCommand(ss)
}

// QueryScheduleStepToFileDelete queries the "ScheduleStepToFileDelete" edge of the ScheduleStep entity.
func (ss *ScheduleStep) QueryScheduleStepToFileDelete() *FileDeleteQuery {
	return (&ScheduleStepClient{config: ss.config}).QueryScheduleStepToFileDelete(ss)
}

// QueryScheduleStepToFileDownload queries the "ScheduleStepToFileDownload" edge of the ScheduleStep entity.
func (ss *ScheduleStep) QueryScheduleStepToFileDownload() *FileDownloadQuery {
	return (&ScheduleStepClient{config: ss.config}).QueryScheduleStepToFileDownload(ss)
}

// QueryScheduleStepToFileExtract queries the "ScheduleStepToFileExtract" edge of the ScheduleStep entity.
func (ss *ScheduleStep) QueryScheduleStepToFileExtract() *FileExtractQuery {
	return (&ScheduleStepClient{config: ss.config}).QueryScheduleStepToFileExtract(ss)
}

// QueryScheduleStepToAnsible queries the "ScheduleStepToAnsible" edge of the ScheduleStep entity.
func (ss *ScheduleStep) QueryScheduleStepToAnsible() *AnsibleQuery {
	return (&ScheduleStepClient{config: ss.config}).QueryScheduleStepToAnsible(ss)
}

// QueryScheduleStepToProvisionedScheduleStep queries the "ScheduleStepToProvisionedScheduleStep" edge of the ScheduleStep entity.
func (ss *ScheduleStep) QueryScheduleStepToProvisionedScheduleStep() *ProvisionedScheduleStepQuery {
	return (&ScheduleStepClient{config: ss.config}).QueryScheduleStepToProvisionedScheduleStep(ss)
}

// Update returns a builder for updating this ScheduleStep.
// Note that you need to call ScheduleStep.Unwrap() before calling this method if this ScheduleStep
// was returned from a transaction, and the transaction was committed or rolled back.
func (ss *ScheduleStep) Update() *ScheduleStepUpdateOne {
	return (&ScheduleStepClient{config: ss.config}).UpdateOne(ss)
}

// Unwrap unwraps the ScheduleStep entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ss *ScheduleStep) Unwrap() *ScheduleStep {
	tx, ok := ss.config.driver.(*txDriver)
	if !ok {
		panic("ent: ScheduleStep is not a transactional entity")
	}
	ss.config.driver = tx.drv
	return ss
}

// String implements the fmt.Stringer.
func (ss *ScheduleStep) String() string {
	var builder strings.Builder
	builder.WriteString("ScheduleStep(")
	builder.WriteString(fmt.Sprintf("id=%v", ss.ID))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", ss.Type))
	builder.WriteString(", repeated=")
	builder.WriteString(fmt.Sprintf("%v", ss.Repeated))
	builder.WriteString(", start_time=")
	builder.WriteString(ss.StartTime.Format(time.ANSIC))
	builder.WriteString(", end_time=")
	builder.WriteString(ss.EndTime.Format(time.ANSIC))
	builder.WriteString(", interval=")
	builder.WriteString(fmt.Sprintf("%v", ss.Interval))
	builder.WriteByte(')')
	return builder.String()
}

// ScheduleSteps is a parsable slice of ScheduleStep.
type ScheduleSteps []*ScheduleStep

func (ss ScheduleSteps) config(cfg config) {
	for _i := range ss {
		ss[_i].config = cfg
	}
}
