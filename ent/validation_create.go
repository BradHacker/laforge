// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/user"
	"github.com/gen0cide/laforge/ent/validation"
	"github.com/google/uuid"
)

// ValidationCreate is the builder for creating a Validation entity.
type ValidationCreate struct {
	config
	mutation *ValidationMutation
	hooks    []Hook
}

// SetHCLID sets the "hcl_id" field.
func (vc *ValidationCreate) SetHCLID(s string) *ValidationCreate {
	vc.mutation.SetHCLID(s)
	return vc
}

// SetValidationType sets the "validation_type" field.
func (vc *ValidationCreate) SetValidationType(vt validation.ValidationType) *ValidationCreate {
	vc.mutation.SetValidationType(vt)
	return vc
}

// SetHash sets the "hash" field.
func (vc *ValidationCreate) SetHash(s string) *ValidationCreate {
	vc.mutation.SetHash(s)
	return vc
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (vc *ValidationCreate) SetNillableHash(s *string) *ValidationCreate {
	if s != nil {
		vc.SetHash(*s)
	}
	return vc
}

// SetRegex sets the "regex" field.
func (vc *ValidationCreate) SetRegex(s string) *ValidationCreate {
	vc.mutation.SetRegex(s)
	return vc
}

// SetNillableRegex sets the "regex" field if the given value is not nil.
func (vc *ValidationCreate) SetNillableRegex(s *string) *ValidationCreate {
	if s != nil {
		vc.SetRegex(*s)
	}
	return vc
}

// SetIP sets the "ip" field.
func (vc *ValidationCreate) SetIP(s string) *ValidationCreate {
	vc.mutation.SetIP(s)
	return vc
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (vc *ValidationCreate) SetNillableIP(s *string) *ValidationCreate {
	if s != nil {
		vc.SetIP(*s)
	}
	return vc
}

// SetURL sets the "url" field.
func (vc *ValidationCreate) SetURL(s string) *ValidationCreate {
	vc.mutation.SetURL(s)
	return vc
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (vc *ValidationCreate) SetNillableURL(s *string) *ValidationCreate {
	if s != nil {
		vc.SetURL(*s)
	}
	return vc
}

// SetPort sets the "port" field.
func (vc *ValidationCreate) SetPort(i int) *ValidationCreate {
	vc.mutation.SetPort(i)
	return vc
}

// SetNillablePort sets the "port" field if the given value is not nil.
func (vc *ValidationCreate) SetNillablePort(i *int) *ValidationCreate {
	if i != nil {
		vc.SetPort(*i)
	}
	return vc
}

// SetHostname sets the "hostname" field.
func (vc *ValidationCreate) SetHostname(s string) *ValidationCreate {
	vc.mutation.SetHostname(s)
	return vc
}

// SetNillableHostname sets the "hostname" field if the given value is not nil.
func (vc *ValidationCreate) SetNillableHostname(s *string) *ValidationCreate {
	if s != nil {
		vc.SetHostname(*s)
	}
	return vc
}

// SetNameservers sets the "nameservers" field.
func (vc *ValidationCreate) SetNameservers(s []string) *ValidationCreate {
	vc.mutation.SetNameservers(s)
	return vc
}

// SetPackageName sets the "package_name" field.
func (vc *ValidationCreate) SetPackageName(s string) *ValidationCreate {
	vc.mutation.SetPackageName(s)
	return vc
}

// SetNillablePackageName sets the "package_name" field if the given value is not nil.
func (vc *ValidationCreate) SetNillablePackageName(s *string) *ValidationCreate {
	if s != nil {
		vc.SetPackageName(*s)
	}
	return vc
}

// SetUsername sets the "username" field.
func (vc *ValidationCreate) SetUsername(s string) *ValidationCreate {
	vc.mutation.SetUsername(s)
	return vc
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (vc *ValidationCreate) SetNillableUsername(s *string) *ValidationCreate {
	if s != nil {
		vc.SetUsername(*s)
	}
	return vc
}

// SetGroupName sets the "group_name" field.
func (vc *ValidationCreate) SetGroupName(s string) *ValidationCreate {
	vc.mutation.SetGroupName(s)
	return vc
}

// SetNillableGroupName sets the "group_name" field if the given value is not nil.
func (vc *ValidationCreate) SetNillableGroupName(s *string) *ValidationCreate {
	if s != nil {
		vc.SetGroupName(*s)
	}
	return vc
}

// SetFilePath sets the "file_path" field.
func (vc *ValidationCreate) SetFilePath(s string) *ValidationCreate {
	vc.mutation.SetFilePath(s)
	return vc
}

// SetNillableFilePath sets the "file_path" field if the given value is not nil.
func (vc *ValidationCreate) SetNillableFilePath(s *string) *ValidationCreate {
	if s != nil {
		vc.SetFilePath(*s)
	}
	return vc
}

// SetSearchString sets the "search_string" field.
func (vc *ValidationCreate) SetSearchString(s string) *ValidationCreate {
	vc.mutation.SetSearchString(s)
	return vc
}

// SetNillableSearchString sets the "search_string" field if the given value is not nil.
func (vc *ValidationCreate) SetNillableSearchString(s *string) *ValidationCreate {
	if s != nil {
		vc.SetSearchString(*s)
	}
	return vc
}

// SetServiceName sets the "service_name" field.
func (vc *ValidationCreate) SetServiceName(s string) *ValidationCreate {
	vc.mutation.SetServiceName(s)
	return vc
}

// SetNillableServiceName sets the "service_name" field if the given value is not nil.
func (vc *ValidationCreate) SetNillableServiceName(s *string) *ValidationCreate {
	if s != nil {
		vc.SetServiceName(*s)
	}
	return vc
}

// SetFilePermission sets the "file_permission" field.
func (vc *ValidationCreate) SetFilePermission(s string) *ValidationCreate {
	vc.mutation.SetFilePermission(s)
	return vc
}

// SetNillableFilePermission sets the "file_permission" field if the given value is not nil.
func (vc *ValidationCreate) SetNillableFilePermission(s *string) *ValidationCreate {
	if s != nil {
		vc.SetFilePermission(*s)
	}
	return vc
}

// SetServiceStatus sets the "service_status" field.
func (vc *ValidationCreate) SetServiceStatus(vs validation.ServiceStatus) *ValidationCreate {
	vc.mutation.SetServiceStatus(vs)
	return vc
}

// SetNillableServiceStatus sets the "service_status" field if the given value is not nil.
func (vc *ValidationCreate) SetNillableServiceStatus(vs *validation.ServiceStatus) *ValidationCreate {
	if vs != nil {
		vc.SetServiceStatus(*vs)
	}
	return vc
}

// SetProcessName sets the "process_name" field.
func (vc *ValidationCreate) SetProcessName(s string) *ValidationCreate {
	vc.mutation.SetProcessName(s)
	return vc
}

// SetNillableProcessName sets the "process_name" field if the given value is not nil.
func (vc *ValidationCreate) SetNillableProcessName(s *string) *ValidationCreate {
	if s != nil {
		vc.SetProcessName(*s)
	}
	return vc
}

// SetID sets the "id" field.
func (vc *ValidationCreate) SetID(u uuid.UUID) *ValidationCreate {
	vc.mutation.SetID(u)
	return vc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (vc *ValidationCreate) SetNillableID(u *uuid.UUID) *ValidationCreate {
	if u != nil {
		vc.SetID(*u)
	}
	return vc
}

// AddUserIDs adds the "Users" edge to the User entity by IDs.
func (vc *ValidationCreate) AddUserIDs(ids ...uuid.UUID) *ValidationCreate {
	vc.mutation.AddUserIDs(ids...)
	return vc
}

// AddUsers adds the "Users" edges to the User entity.
func (vc *ValidationCreate) AddUsers(u ...*User) *ValidationCreate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return vc.AddUserIDs(ids...)
}

// SetEnvironmentID sets the "Environment" edge to the Environment entity by ID.
func (vc *ValidationCreate) SetEnvironmentID(id uuid.UUID) *ValidationCreate {
	vc.mutation.SetEnvironmentID(id)
	return vc
}

// SetNillableEnvironmentID sets the "Environment" edge to the Environment entity by ID if the given value is not nil.
func (vc *ValidationCreate) SetNillableEnvironmentID(id *uuid.UUID) *ValidationCreate {
	if id != nil {
		vc = vc.SetEnvironmentID(*id)
	}
	return vc
}

// SetEnvironment sets the "Environment" edge to the Environment entity.
func (vc *ValidationCreate) SetEnvironment(e *Environment) *ValidationCreate {
	return vc.SetEnvironmentID(e.ID)
}

// Mutation returns the ValidationMutation object of the builder.
func (vc *ValidationCreate) Mutation() *ValidationMutation {
	return vc.mutation
}

// Save creates the Validation in the database.
func (vc *ValidationCreate) Save(ctx context.Context) (*Validation, error) {
	vc.defaults()
	return withHooks(ctx, vc.sqlSave, vc.mutation, vc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vc *ValidationCreate) SaveX(ctx context.Context) *Validation {
	v, err := vc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vc *ValidationCreate) Exec(ctx context.Context) error {
	_, err := vc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vc *ValidationCreate) ExecX(ctx context.Context) {
	if err := vc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vc *ValidationCreate) defaults() {
	if _, ok := vc.mutation.ServiceStatus(); !ok {
		v := validation.DefaultServiceStatus
		vc.mutation.SetServiceStatus(v)
	}
	if _, ok := vc.mutation.ID(); !ok {
		v := validation.DefaultID()
		vc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vc *ValidationCreate) check() error {
	if _, ok := vc.mutation.HCLID(); !ok {
		return &ValidationError{Name: "hcl_id", err: errors.New(`ent: missing required field "Validation.hcl_id"`)}
	}
	if _, ok := vc.mutation.ValidationType(); !ok {
		return &ValidationError{Name: "validation_type", err: errors.New(`ent: missing required field "Validation.validation_type"`)}
	}
	if v, ok := vc.mutation.ValidationType(); ok {
		if err := validation.ValidationTypeValidator(v); err != nil {
			return &ValidationError{Name: "validation_type", err: fmt.Errorf(`ent: validator failed for field "Validation.validation_type": %w`, err)}
		}
	}
	if _, ok := vc.mutation.ServiceStatus(); !ok {
		return &ValidationError{Name: "service_status", err: errors.New(`ent: missing required field "Validation.service_status"`)}
	}
	if v, ok := vc.mutation.ServiceStatus(); ok {
		if err := validation.ServiceStatusValidator(v); err != nil {
			return &ValidationError{Name: "service_status", err: fmt.Errorf(`ent: validator failed for field "Validation.service_status": %w`, err)}
		}
	}
	return nil
}

func (vc *ValidationCreate) sqlSave(ctx context.Context) (*Validation, error) {
	if err := vc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	vc.mutation.id = &_node.ID
	vc.mutation.done = true
	return _node, nil
}

func (vc *ValidationCreate) createSpec() (*Validation, *sqlgraph.CreateSpec) {
	var (
		_node = &Validation{config: vc.config}
		_spec = sqlgraph.NewCreateSpec(validation.Table, sqlgraph.NewFieldSpec(validation.FieldID, field.TypeUUID))
	)
	if id, ok := vc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := vc.mutation.HCLID(); ok {
		_spec.SetField(validation.FieldHCLID, field.TypeString, value)
		_node.HCLID = value
	}
	if value, ok := vc.mutation.ValidationType(); ok {
		_spec.SetField(validation.FieldValidationType, field.TypeEnum, value)
		_node.ValidationType = value
	}
	if value, ok := vc.mutation.Hash(); ok {
		_spec.SetField(validation.FieldHash, field.TypeString, value)
		_node.Hash = value
	}
	if value, ok := vc.mutation.Regex(); ok {
		_spec.SetField(validation.FieldRegex, field.TypeString, value)
		_node.Regex = value
	}
	if value, ok := vc.mutation.IP(); ok {
		_spec.SetField(validation.FieldIP, field.TypeString, value)
		_node.IP = value
	}
	if value, ok := vc.mutation.URL(); ok {
		_spec.SetField(validation.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := vc.mutation.Port(); ok {
		_spec.SetField(validation.FieldPort, field.TypeInt, value)
		_node.Port = value
	}
	if value, ok := vc.mutation.Hostname(); ok {
		_spec.SetField(validation.FieldHostname, field.TypeString, value)
		_node.Hostname = value
	}
	if value, ok := vc.mutation.Nameservers(); ok {
		_spec.SetField(validation.FieldNameservers, field.TypeJSON, value)
		_node.Nameservers = value
	}
	if value, ok := vc.mutation.PackageName(); ok {
		_spec.SetField(validation.FieldPackageName, field.TypeString, value)
		_node.PackageName = value
	}
	if value, ok := vc.mutation.Username(); ok {
		_spec.SetField(validation.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := vc.mutation.GroupName(); ok {
		_spec.SetField(validation.FieldGroupName, field.TypeString, value)
		_node.GroupName = value
	}
	if value, ok := vc.mutation.FilePath(); ok {
		_spec.SetField(validation.FieldFilePath, field.TypeString, value)
		_node.FilePath = value
	}
	if value, ok := vc.mutation.SearchString(); ok {
		_spec.SetField(validation.FieldSearchString, field.TypeString, value)
		_node.SearchString = value
	}
	if value, ok := vc.mutation.ServiceName(); ok {
		_spec.SetField(validation.FieldServiceName, field.TypeString, value)
		_node.ServiceName = value
	}
	if value, ok := vc.mutation.FilePermission(); ok {
		_spec.SetField(validation.FieldFilePermission, field.TypeString, value)
		_node.FilePermission = value
	}
	if value, ok := vc.mutation.ServiceStatus(); ok {
		_spec.SetField(validation.FieldServiceStatus, field.TypeEnum, value)
		_node.ServiceStatus = value
	}
	if value, ok := vc.mutation.ProcessName(); ok {
		_spec.SetField(validation.FieldProcessName, field.TypeString, value)
		_node.ProcessName = value
	}
	if nodes := vc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   validation.UsersTable,
			Columns: []string{validation.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vc.mutation.EnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   validation.EnvironmentTable,
			Columns: []string{validation.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.environment_validations = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ValidationCreateBulk is the builder for creating many Validation entities in bulk.
type ValidationCreateBulk struct {
	config
	builders []*ValidationCreate
}

// Save creates the Validation entities in the database.
func (vcb *ValidationCreateBulk) Save(ctx context.Context) ([]*Validation, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vcb.builders))
	nodes := make([]*Validation, len(vcb.builders))
	mutators := make([]Mutator, len(vcb.builders))
	for i := range vcb.builders {
		func(i int, root context.Context) {
			builder := vcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ValidationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vcb *ValidationCreateBulk) SaveX(ctx context.Context) []*Validation {
	v, err := vcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vcb *ValidationCreateBulk) Exec(ctx context.Context) error {
	_, err := vcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcb *ValidationCreateBulk) ExecX(ctx context.Context) {
	if err := vcb.Exec(ctx); err != nil {
		panic(err)
	}
}
