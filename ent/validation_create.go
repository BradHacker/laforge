// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/agenttask"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/script"
	"github.com/gen0cide/laforge/ent/validation"
	"github.com/google/uuid"
)

// ValidationCreate is the builder for creating a Validation entity.
type ValidationCreate struct {
	config
	mutation *ValidationMutation
	hooks    []Hook
}

// SetHclID sets the "hcl_id" field.
func (vc *ValidationCreate) SetHclID(s string) *ValidationCreate {
	vc.mutation.SetHclID(s)
	return vc
}

// SetValidationType sets the "validation_type" field.
func (vc *ValidationCreate) SetValidationType(vt validation.ValidationType) *ValidationCreate {
	vc.mutation.SetValidationType(vt)
	return vc
}

// SetOutput sets the "output" field.
func (vc *ValidationCreate) SetOutput(s string) *ValidationCreate {
	vc.mutation.SetOutput(s)
	return vc
}

// SetNillableOutput sets the "output" field if the given value is not nil.
func (vc *ValidationCreate) SetNillableOutput(s *string) *ValidationCreate {
	if s != nil {
		vc.SetOutput(*s)
	}
	return vc
}

// SetState sets the "state" field.
func (vc *ValidationCreate) SetState(v validation.State) *ValidationCreate {
	vc.mutation.SetState(v)
	return vc
}

// SetErrorMessage sets the "error_message" field.
func (vc *ValidationCreate) SetErrorMessage(s string) *ValidationCreate {
	vc.mutation.SetErrorMessage(s)
	return vc
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (vc *ValidationCreate) SetNillableErrorMessage(s *string) *ValidationCreate {
	if s != nil {
		vc.SetErrorMessage(*s)
	}
	return vc
}

// SetHash sets the "hash" field.
func (vc *ValidationCreate) SetHash(s string) *ValidationCreate {
	vc.mutation.SetHash(s)
	return vc
}

// SetRegex sets the "regex" field.
func (vc *ValidationCreate) SetRegex(s string) *ValidationCreate {
	vc.mutation.SetRegex(s)
	return vc
}

// SetIP sets the "ip" field.
func (vc *ValidationCreate) SetIP(s string) *ValidationCreate {
	vc.mutation.SetIP(s)
	return vc
}

// SetPort sets the "port" field.
func (vc *ValidationCreate) SetPort(i int) *ValidationCreate {
	vc.mutation.SetPort(i)
	return vc
}

// SetHostname sets the "hostname" field.
func (vc *ValidationCreate) SetHostname(s string) *ValidationCreate {
	vc.mutation.SetHostname(s)
	return vc
}

// SetNameservers sets the "nameservers" field.
func (vc *ValidationCreate) SetNameservers(s []string) *ValidationCreate {
	vc.mutation.SetNameservers(s)
	return vc
}

// SetPackageName sets the "package_name" field.
func (vc *ValidationCreate) SetPackageName(s string) *ValidationCreate {
	vc.mutation.SetPackageName(s)
	return vc
}

// SetUsername sets the "username" field.
func (vc *ValidationCreate) SetUsername(s string) *ValidationCreate {
	vc.mutation.SetUsername(s)
	return vc
}

// SetGroupName sets the "group_name" field.
func (vc *ValidationCreate) SetGroupName(s string) *ValidationCreate {
	vc.mutation.SetGroupName(s)
	return vc
}

// SetFilePath sets the "file_path" field.
func (vc *ValidationCreate) SetFilePath(s string) *ValidationCreate {
	vc.mutation.SetFilePath(s)
	return vc
}

// SetSearchString sets the "search_string" field.
func (vc *ValidationCreate) SetSearchString(s string) *ValidationCreate {
	vc.mutation.SetSearchString(s)
	return vc
}

// SetServiceName sets the "service_name" field.
func (vc *ValidationCreate) SetServiceName(s string) *ValidationCreate {
	vc.mutation.SetServiceName(s)
	return vc
}

// SetServiceStatus sets the "service_status" field.
func (vc *ValidationCreate) SetServiceStatus(s string) *ValidationCreate {
	vc.mutation.SetServiceStatus(s)
	return vc
}

// SetProcessName sets the "process_name" field.
func (vc *ValidationCreate) SetProcessName(s string) *ValidationCreate {
	vc.mutation.SetProcessName(s)
	return vc
}

// SetID sets the "id" field.
func (vc *ValidationCreate) SetID(u uuid.UUID) *ValidationCreate {
	vc.mutation.SetID(u)
	return vc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (vc *ValidationCreate) SetNillableID(u *uuid.UUID) *ValidationCreate {
	if u != nil {
		vc.SetID(*u)
	}
	return vc
}

// SetValidationToAgentTaskID sets the "ValidationToAgentTask" edge to the AgentTask entity by ID.
func (vc *ValidationCreate) SetValidationToAgentTaskID(id uuid.UUID) *ValidationCreate {
	vc.mutation.SetValidationToAgentTaskID(id)
	return vc
}

// SetNillableValidationToAgentTaskID sets the "ValidationToAgentTask" edge to the AgentTask entity by ID if the given value is not nil.
func (vc *ValidationCreate) SetNillableValidationToAgentTaskID(id *uuid.UUID) *ValidationCreate {
	if id != nil {
		vc = vc.SetValidationToAgentTaskID(*id)
	}
	return vc
}

// SetValidationToAgentTask sets the "ValidationToAgentTask" edge to the AgentTask entity.
func (vc *ValidationCreate) SetValidationToAgentTask(a *AgentTask) *ValidationCreate {
	return vc.SetValidationToAgentTaskID(a.ID)
}

// AddValidationToScriptIDs adds the "ValidationToScript" edge to the Script entity by IDs.
func (vc *ValidationCreate) AddValidationToScriptIDs(ids ...uuid.UUID) *ValidationCreate {
	vc.mutation.AddValidationToScriptIDs(ids...)
	return vc
}

// AddValidationToScript adds the "ValidationToScript" edges to the Script entity.
func (vc *ValidationCreate) AddValidationToScript(s ...*Script) *ValidationCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return vc.AddValidationToScriptIDs(ids...)
}

// AddValidationToEnvironmentIDs adds the "ValidationToEnvironment" edge to the Environment entity by IDs.
func (vc *ValidationCreate) AddValidationToEnvironmentIDs(ids ...uuid.UUID) *ValidationCreate {
	vc.mutation.AddValidationToEnvironmentIDs(ids...)
	return vc
}

// AddValidationToEnvironment adds the "ValidationToEnvironment" edges to the Environment entity.
func (vc *ValidationCreate) AddValidationToEnvironment(e ...*Environment) *ValidationCreate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return vc.AddValidationToEnvironmentIDs(ids...)
}

// Mutation returns the ValidationMutation object of the builder.
func (vc *ValidationCreate) Mutation() *ValidationMutation {
	return vc.mutation
}

// Save creates the Validation in the database.
func (vc *ValidationCreate) Save(ctx context.Context) (*Validation, error) {
	var (
		err  error
		node *Validation
	)
	vc.defaults()
	if len(vc.hooks) == 0 {
		if err = vc.check(); err != nil {
			return nil, err
		}
		node, err = vc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ValidationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vc.check(); err != nil {
				return nil, err
			}
			vc.mutation = mutation
			if node, err = vc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(vc.hooks) - 1; i >= 0; i-- {
			if vc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, vc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Validation)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ValidationMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (vc *ValidationCreate) SaveX(ctx context.Context) *Validation {
	v, err := vc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vc *ValidationCreate) Exec(ctx context.Context) error {
	_, err := vc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vc *ValidationCreate) ExecX(ctx context.Context) {
	if err := vc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vc *ValidationCreate) defaults() {
	if _, ok := vc.mutation.Output(); !ok {
		v := validation.DefaultOutput
		vc.mutation.SetOutput(v)
	}
	if _, ok := vc.mutation.ErrorMessage(); !ok {
		v := validation.DefaultErrorMessage
		vc.mutation.SetErrorMessage(v)
	}
	if _, ok := vc.mutation.ID(); !ok {
		v := validation.DefaultID()
		vc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vc *ValidationCreate) check() error {
	if _, ok := vc.mutation.HclID(); !ok {
		return &ValidationError{Name: "hcl_id", err: errors.New(`ent: missing required field "Validation.hcl_id"`)}
	}
	if _, ok := vc.mutation.ValidationType(); !ok {
		return &ValidationError{Name: "validation_type", err: errors.New(`ent: missing required field "Validation.validation_type"`)}
	}
	if v, ok := vc.mutation.ValidationType(); ok {
		if err := validation.ValidationTypeValidator(v); err != nil {
			return &ValidationError{Name: "validation_type", err: fmt.Errorf(`ent: validator failed for field "Validation.validation_type": %w`, err)}
		}
	}
	if _, ok := vc.mutation.Output(); !ok {
		return &ValidationError{Name: "output", err: errors.New(`ent: missing required field "Validation.output"`)}
	}
	if _, ok := vc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "Validation.state"`)}
	}
	if v, ok := vc.mutation.State(); ok {
		if err := validation.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Validation.state": %w`, err)}
		}
	}
	if _, ok := vc.mutation.ErrorMessage(); !ok {
		return &ValidationError{Name: "error_message", err: errors.New(`ent: missing required field "Validation.error_message"`)}
	}
	if _, ok := vc.mutation.Hash(); !ok {
		return &ValidationError{Name: "hash", err: errors.New(`ent: missing required field "Validation.hash"`)}
	}
	if _, ok := vc.mutation.Regex(); !ok {
		return &ValidationError{Name: "regex", err: errors.New(`ent: missing required field "Validation.regex"`)}
	}
	if _, ok := vc.mutation.IP(); !ok {
		return &ValidationError{Name: "ip", err: errors.New(`ent: missing required field "Validation.ip"`)}
	}
	if _, ok := vc.mutation.Port(); !ok {
		return &ValidationError{Name: "port", err: errors.New(`ent: missing required field "Validation.port"`)}
	}
	if _, ok := vc.mutation.Hostname(); !ok {
		return &ValidationError{Name: "hostname", err: errors.New(`ent: missing required field "Validation.hostname"`)}
	}
	if _, ok := vc.mutation.Nameservers(); !ok {
		return &ValidationError{Name: "nameservers", err: errors.New(`ent: missing required field "Validation.nameservers"`)}
	}
	if _, ok := vc.mutation.PackageName(); !ok {
		return &ValidationError{Name: "package_name", err: errors.New(`ent: missing required field "Validation.package_name"`)}
	}
	if _, ok := vc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "Validation.username"`)}
	}
	if _, ok := vc.mutation.GroupName(); !ok {
		return &ValidationError{Name: "group_name", err: errors.New(`ent: missing required field "Validation.group_name"`)}
	}
	if _, ok := vc.mutation.FilePath(); !ok {
		return &ValidationError{Name: "file_path", err: errors.New(`ent: missing required field "Validation.file_path"`)}
	}
	if _, ok := vc.mutation.SearchString(); !ok {
		return &ValidationError{Name: "search_string", err: errors.New(`ent: missing required field "Validation.search_string"`)}
	}
	if _, ok := vc.mutation.ServiceName(); !ok {
		return &ValidationError{Name: "service_name", err: errors.New(`ent: missing required field "Validation.service_name"`)}
	}
	if _, ok := vc.mutation.ServiceStatus(); !ok {
		return &ValidationError{Name: "service_status", err: errors.New(`ent: missing required field "Validation.service_status"`)}
	}
	if _, ok := vc.mutation.ProcessName(); !ok {
		return &ValidationError{Name: "process_name", err: errors.New(`ent: missing required field "Validation.process_name"`)}
	}
	return nil
}

func (vc *ValidationCreate) sqlSave(ctx context.Context) (*Validation, error) {
	_node, _spec := vc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (vc *ValidationCreate) createSpec() (*Validation, *sqlgraph.CreateSpec) {
	var (
		_node = &Validation{config: vc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: validation.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: validation.FieldID,
			},
		}
	)
	if id, ok := vc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := vc.mutation.HclID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: validation.FieldHclID,
		})
		_node.HclID = value
	}
	if value, ok := vc.mutation.ValidationType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: validation.FieldValidationType,
		})
		_node.ValidationType = value
	}
	if value, ok := vc.mutation.Output(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: validation.FieldOutput,
		})
		_node.Output = value
	}
	if value, ok := vc.mutation.State(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: validation.FieldState,
		})
		_node.State = value
	}
	if value, ok := vc.mutation.ErrorMessage(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: validation.FieldErrorMessage,
		})
		_node.ErrorMessage = value
	}
	if value, ok := vc.mutation.Hash(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: validation.FieldHash,
		})
		_node.Hash = value
	}
	if value, ok := vc.mutation.Regex(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: validation.FieldRegex,
		})
		_node.Regex = value
	}
	if value, ok := vc.mutation.IP(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: validation.FieldIP,
		})
		_node.IP = value
	}
	if value, ok := vc.mutation.Port(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: validation.FieldPort,
		})
		_node.Port = value
	}
	if value, ok := vc.mutation.Hostname(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: validation.FieldHostname,
		})
		_node.Hostname = value
	}
	if value, ok := vc.mutation.Nameservers(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: validation.FieldNameservers,
		})
		_node.Nameservers = value
	}
	if value, ok := vc.mutation.PackageName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: validation.FieldPackageName,
		})
		_node.PackageName = value
	}
	if value, ok := vc.mutation.Username(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: validation.FieldUsername,
		})
		_node.Username = value
	}
	if value, ok := vc.mutation.GroupName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: validation.FieldGroupName,
		})
		_node.GroupName = value
	}
	if value, ok := vc.mutation.FilePath(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: validation.FieldFilePath,
		})
		_node.FilePath = value
	}
	if value, ok := vc.mutation.SearchString(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: validation.FieldSearchString,
		})
		_node.SearchString = value
	}
	if value, ok := vc.mutation.ServiceName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: validation.FieldServiceName,
		})
		_node.ServiceName = value
	}
	if value, ok := vc.mutation.ServiceStatus(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: validation.FieldServiceStatus,
		})
		_node.ServiceStatus = value
	}
	if value, ok := vc.mutation.ProcessName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: validation.FieldProcessName,
		})
		_node.ProcessName = value
	}
	if nodes := vc.mutation.ValidationToAgentTaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   validation.ValidationToAgentTaskTable,
			Columns: []string{validation.ValidationToAgentTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: agenttask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.agent_task_agent_task_to_validation = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vc.mutation.ValidationToScriptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   validation.ValidationToScriptTable,
			Columns: []string{validation.ValidationToScriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: script.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vc.mutation.ValidationToEnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   validation.ValidationToEnvironmentTable,
			Columns: validation.ValidationToEnvironmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: environment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ValidationCreateBulk is the builder for creating many Validation entities in bulk.
type ValidationCreateBulk struct {
	config
	builders []*ValidationCreate
}

// Save creates the Validation entities in the database.
func (vcb *ValidationCreateBulk) Save(ctx context.Context) ([]*Validation, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vcb.builders))
	nodes := make([]*Validation, len(vcb.builders))
	mutators := make([]Mutator, len(vcb.builders))
	for i := range vcb.builders {
		func(i int, root context.Context) {
			builder := vcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ValidationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vcb *ValidationCreateBulk) SaveX(ctx context.Context) []*Validation {
	v, err := vcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vcb *ValidationCreateBulk) Exec(ctx context.Context) error {
	_, err := vcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcb *ValidationCreateBulk) ExecX(ctx context.Context) {
	if err := vcb.Exec(ctx); err != nil {
		panic(err)
	}
}
