// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/agenttask"
	"github.com/gen0cide/laforge/ent/ansible"
	"github.com/gen0cide/laforge/ent/command"
	"github.com/gen0cide/laforge/ent/dnsrecord"
	"github.com/gen0cide/laforge/ent/filedelete"
	"github.com/gen0cide/laforge/ent/filedownload"
	"github.com/gen0cide/laforge/ent/fileextract"
	"github.com/gen0cide/laforge/ent/ginfilemiddleware"
	"github.com/gen0cide/laforge/ent/plan"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/provisionedhost"
	"github.com/gen0cide/laforge/ent/provisioningscheduledstep"
	"github.com/gen0cide/laforge/ent/scheduledstep"
	"github.com/gen0cide/laforge/ent/script"
	"github.com/gen0cide/laforge/ent/status"
	"github.com/google/uuid"
)

// ProvisioningScheduledStepUpdate is the builder for updating ProvisioningScheduledStep entities.
type ProvisioningScheduledStepUpdate struct {
	config
	hooks    []Hook
	mutation *ProvisioningScheduledStepMutation
}

// Where appends a list predicates to the ProvisioningScheduledStepUpdate builder.
func (pssu *ProvisioningScheduledStepUpdate) Where(ps ...predicate.ProvisioningScheduledStep) *ProvisioningScheduledStepUpdate {
	pssu.mutation.Where(ps...)
	return pssu
}

// SetType sets the "type" field.
func (pssu *ProvisioningScheduledStepUpdate) SetType(pr provisioningscheduledstep.Type) *ProvisioningScheduledStepUpdate {
	pssu.mutation.SetType(pr)
	return pssu
}

// SetRunTime sets the "run_time" field.
func (pssu *ProvisioningScheduledStepUpdate) SetRunTime(t time.Time) *ProvisioningScheduledStepUpdate {
	pssu.mutation.SetRunTime(t)
	return pssu
}

// SetProvisioningScheduledStepToStatusID sets the "ProvisioningScheduledStepToStatus" edge to the Status entity by ID.
func (pssu *ProvisioningScheduledStepUpdate) SetProvisioningScheduledStepToStatusID(id uuid.UUID) *ProvisioningScheduledStepUpdate {
	pssu.mutation.SetProvisioningScheduledStepToStatusID(id)
	return pssu
}

// SetNillableProvisioningScheduledStepToStatusID sets the "ProvisioningScheduledStepToStatus" edge to the Status entity by ID if the given value is not nil.
func (pssu *ProvisioningScheduledStepUpdate) SetNillableProvisioningScheduledStepToStatusID(id *uuid.UUID) *ProvisioningScheduledStepUpdate {
	if id != nil {
		pssu = pssu.SetProvisioningScheduledStepToStatusID(*id)
	}
	return pssu
}

// SetProvisioningScheduledStepToStatus sets the "ProvisioningScheduledStepToStatus" edge to the Status entity.
func (pssu *ProvisioningScheduledStepUpdate) SetProvisioningScheduledStepToStatus(s *Status) *ProvisioningScheduledStepUpdate {
	return pssu.SetProvisioningScheduledStepToStatusID(s.ID)
}

// SetProvisioningScheduledStepToScheduledStepID sets the "ProvisioningScheduledStepToScheduledStep" edge to the ScheduledStep entity by ID.
func (pssu *ProvisioningScheduledStepUpdate) SetProvisioningScheduledStepToScheduledStepID(id uuid.UUID) *ProvisioningScheduledStepUpdate {
	pssu.mutation.SetProvisioningScheduledStepToScheduledStepID(id)
	return pssu
}

// SetProvisioningScheduledStepToScheduledStep sets the "ProvisioningScheduledStepToScheduledStep" edge to the ScheduledStep entity.
func (pssu *ProvisioningScheduledStepUpdate) SetProvisioningScheduledStepToScheduledStep(s *ScheduledStep) *ProvisioningScheduledStepUpdate {
	return pssu.SetProvisioningScheduledStepToScheduledStepID(s.ID)
}

// SetProvisioningScheduleStepToProvisionedHostID sets the "ProvisioningScheduleStepToProvisionedHost" edge to the ProvisionedHost entity by ID.
func (pssu *ProvisioningScheduledStepUpdate) SetProvisioningScheduleStepToProvisionedHostID(id uuid.UUID) *ProvisioningScheduledStepUpdate {
	pssu.mutation.SetProvisioningScheduleStepToProvisionedHostID(id)
	return pssu
}

// SetProvisioningScheduleStepToProvisionedHost sets the "ProvisioningScheduleStepToProvisionedHost" edge to the ProvisionedHost entity.
func (pssu *ProvisioningScheduledStepUpdate) SetProvisioningScheduleStepToProvisionedHost(p *ProvisionedHost) *ProvisioningScheduledStepUpdate {
	return pssu.SetProvisioningScheduleStepToProvisionedHostID(p.ID)
}

// SetProvisioningScheduledStepToScriptID sets the "ProvisioningScheduledStepToScript" edge to the Script entity by ID.
func (pssu *ProvisioningScheduledStepUpdate) SetProvisioningScheduledStepToScriptID(id uuid.UUID) *ProvisioningScheduledStepUpdate {
	pssu.mutation.SetProvisioningScheduledStepToScriptID(id)
	return pssu
}

// SetNillableProvisioningScheduledStepToScriptID sets the "ProvisioningScheduledStepToScript" edge to the Script entity by ID if the given value is not nil.
func (pssu *ProvisioningScheduledStepUpdate) SetNillableProvisioningScheduledStepToScriptID(id *uuid.UUID) *ProvisioningScheduledStepUpdate {
	if id != nil {
		pssu = pssu.SetProvisioningScheduledStepToScriptID(*id)
	}
	return pssu
}

// SetProvisioningScheduledStepToScript sets the "ProvisioningScheduledStepToScript" edge to the Script entity.
func (pssu *ProvisioningScheduledStepUpdate) SetProvisioningScheduledStepToScript(s *Script) *ProvisioningScheduledStepUpdate {
	return pssu.SetProvisioningScheduledStepToScriptID(s.ID)
}

// SetProvisioningScheduledStepToCommandID sets the "ProvisioningScheduledStepToCommand" edge to the Command entity by ID.
func (pssu *ProvisioningScheduledStepUpdate) SetProvisioningScheduledStepToCommandID(id uuid.UUID) *ProvisioningScheduledStepUpdate {
	pssu.mutation.SetProvisioningScheduledStepToCommandID(id)
	return pssu
}

// SetNillableProvisioningScheduledStepToCommandID sets the "ProvisioningScheduledStepToCommand" edge to the Command entity by ID if the given value is not nil.
func (pssu *ProvisioningScheduledStepUpdate) SetNillableProvisioningScheduledStepToCommandID(id *uuid.UUID) *ProvisioningScheduledStepUpdate {
	if id != nil {
		pssu = pssu.SetProvisioningScheduledStepToCommandID(*id)
	}
	return pssu
}

// SetProvisioningScheduledStepToCommand sets the "ProvisioningScheduledStepToCommand" edge to the Command entity.
func (pssu *ProvisioningScheduledStepUpdate) SetProvisioningScheduledStepToCommand(c *Command) *ProvisioningScheduledStepUpdate {
	return pssu.SetProvisioningScheduledStepToCommandID(c.ID)
}

// SetProvisioningScheduledStepToDNSRecordID sets the "ProvisioningScheduledStepToDNSRecord" edge to the DNSRecord entity by ID.
func (pssu *ProvisioningScheduledStepUpdate) SetProvisioningScheduledStepToDNSRecordID(id uuid.UUID) *ProvisioningScheduledStepUpdate {
	pssu.mutation.SetProvisioningScheduledStepToDNSRecordID(id)
	return pssu
}

// SetNillableProvisioningScheduledStepToDNSRecordID sets the "ProvisioningScheduledStepToDNSRecord" edge to the DNSRecord entity by ID if the given value is not nil.
func (pssu *ProvisioningScheduledStepUpdate) SetNillableProvisioningScheduledStepToDNSRecordID(id *uuid.UUID) *ProvisioningScheduledStepUpdate {
	if id != nil {
		pssu = pssu.SetProvisioningScheduledStepToDNSRecordID(*id)
	}
	return pssu
}

// SetProvisioningScheduledStepToDNSRecord sets the "ProvisioningScheduledStepToDNSRecord" edge to the DNSRecord entity.
func (pssu *ProvisioningScheduledStepUpdate) SetProvisioningScheduledStepToDNSRecord(d *DNSRecord) *ProvisioningScheduledStepUpdate {
	return pssu.SetProvisioningScheduledStepToDNSRecordID(d.ID)
}

// SetProvisioningScheduledStepToFileDeleteID sets the "ProvisioningScheduledStepToFileDelete" edge to the FileDelete entity by ID.
func (pssu *ProvisioningScheduledStepUpdate) SetProvisioningScheduledStepToFileDeleteID(id uuid.UUID) *ProvisioningScheduledStepUpdate {
	pssu.mutation.SetProvisioningScheduledStepToFileDeleteID(id)
	return pssu
}

// SetNillableProvisioningScheduledStepToFileDeleteID sets the "ProvisioningScheduledStepToFileDelete" edge to the FileDelete entity by ID if the given value is not nil.
func (pssu *ProvisioningScheduledStepUpdate) SetNillableProvisioningScheduledStepToFileDeleteID(id *uuid.UUID) *ProvisioningScheduledStepUpdate {
	if id != nil {
		pssu = pssu.SetProvisioningScheduledStepToFileDeleteID(*id)
	}
	return pssu
}

// SetProvisioningScheduledStepToFileDelete sets the "ProvisioningScheduledStepToFileDelete" edge to the FileDelete entity.
func (pssu *ProvisioningScheduledStepUpdate) SetProvisioningScheduledStepToFileDelete(f *FileDelete) *ProvisioningScheduledStepUpdate {
	return pssu.SetProvisioningScheduledStepToFileDeleteID(f.ID)
}

// SetProvisioningScheduledStepToFileDownloadID sets the "ProvisioningScheduledStepToFileDownload" edge to the FileDownload entity by ID.
func (pssu *ProvisioningScheduledStepUpdate) SetProvisioningScheduledStepToFileDownloadID(id uuid.UUID) *ProvisioningScheduledStepUpdate {
	pssu.mutation.SetProvisioningScheduledStepToFileDownloadID(id)
	return pssu
}

// SetNillableProvisioningScheduledStepToFileDownloadID sets the "ProvisioningScheduledStepToFileDownload" edge to the FileDownload entity by ID if the given value is not nil.
func (pssu *ProvisioningScheduledStepUpdate) SetNillableProvisioningScheduledStepToFileDownloadID(id *uuid.UUID) *ProvisioningScheduledStepUpdate {
	if id != nil {
		pssu = pssu.SetProvisioningScheduledStepToFileDownloadID(*id)
	}
	return pssu
}

// SetProvisioningScheduledStepToFileDownload sets the "ProvisioningScheduledStepToFileDownload" edge to the FileDownload entity.
func (pssu *ProvisioningScheduledStepUpdate) SetProvisioningScheduledStepToFileDownload(f *FileDownload) *ProvisioningScheduledStepUpdate {
	return pssu.SetProvisioningScheduledStepToFileDownloadID(f.ID)
}

// SetProvisioningScheduledStepToFileExtractID sets the "ProvisioningScheduledStepToFileExtract" edge to the FileExtract entity by ID.
func (pssu *ProvisioningScheduledStepUpdate) SetProvisioningScheduledStepToFileExtractID(id uuid.UUID) *ProvisioningScheduledStepUpdate {
	pssu.mutation.SetProvisioningScheduledStepToFileExtractID(id)
	return pssu
}

// SetNillableProvisioningScheduledStepToFileExtractID sets the "ProvisioningScheduledStepToFileExtract" edge to the FileExtract entity by ID if the given value is not nil.
func (pssu *ProvisioningScheduledStepUpdate) SetNillableProvisioningScheduledStepToFileExtractID(id *uuid.UUID) *ProvisioningScheduledStepUpdate {
	if id != nil {
		pssu = pssu.SetProvisioningScheduledStepToFileExtractID(*id)
	}
	return pssu
}

// SetProvisioningScheduledStepToFileExtract sets the "ProvisioningScheduledStepToFileExtract" edge to the FileExtract entity.
func (pssu *ProvisioningScheduledStepUpdate) SetProvisioningScheduledStepToFileExtract(f *FileExtract) *ProvisioningScheduledStepUpdate {
	return pssu.SetProvisioningScheduledStepToFileExtractID(f.ID)
}

// SetProvisioningScheduledStepToAnsibleID sets the "ProvisioningScheduledStepToAnsible" edge to the Ansible entity by ID.
func (pssu *ProvisioningScheduledStepUpdate) SetProvisioningScheduledStepToAnsibleID(id uuid.UUID) *ProvisioningScheduledStepUpdate {
	pssu.mutation.SetProvisioningScheduledStepToAnsibleID(id)
	return pssu
}

// SetNillableProvisioningScheduledStepToAnsibleID sets the "ProvisioningScheduledStepToAnsible" edge to the Ansible entity by ID if the given value is not nil.
func (pssu *ProvisioningScheduledStepUpdate) SetNillableProvisioningScheduledStepToAnsibleID(id *uuid.UUID) *ProvisioningScheduledStepUpdate {
	if id != nil {
		pssu = pssu.SetProvisioningScheduledStepToAnsibleID(*id)
	}
	return pssu
}

// SetProvisioningScheduledStepToAnsible sets the "ProvisioningScheduledStepToAnsible" edge to the Ansible entity.
func (pssu *ProvisioningScheduledStepUpdate) SetProvisioningScheduledStepToAnsible(a *Ansible) *ProvisioningScheduledStepUpdate {
	return pssu.SetProvisioningScheduledStepToAnsibleID(a.ID)
}

// SetProvisioningScheduledStepToAgentTaskID sets the "ProvisioningScheduledStepToAgentTask" edge to the AgentTask entity by ID.
func (pssu *ProvisioningScheduledStepUpdate) SetProvisioningScheduledStepToAgentTaskID(id uuid.UUID) *ProvisioningScheduledStepUpdate {
	pssu.mutation.SetProvisioningScheduledStepToAgentTaskID(id)
	return pssu
}

// SetNillableProvisioningScheduledStepToAgentTaskID sets the "ProvisioningScheduledStepToAgentTask" edge to the AgentTask entity by ID if the given value is not nil.
func (pssu *ProvisioningScheduledStepUpdate) SetNillableProvisioningScheduledStepToAgentTaskID(id *uuid.UUID) *ProvisioningScheduledStepUpdate {
	if id != nil {
		pssu = pssu.SetProvisioningScheduledStepToAgentTaskID(*id)
	}
	return pssu
}

// SetProvisioningScheduledStepToAgentTask sets the "ProvisioningScheduledStepToAgentTask" edge to the AgentTask entity.
func (pssu *ProvisioningScheduledStepUpdate) SetProvisioningScheduledStepToAgentTask(a *AgentTask) *ProvisioningScheduledStepUpdate {
	return pssu.SetProvisioningScheduledStepToAgentTaskID(a.ID)
}

// SetProvisioningStepToPlanID sets the "ProvisioningStepToPlan" edge to the Plan entity by ID.
func (pssu *ProvisioningScheduledStepUpdate) SetProvisioningStepToPlanID(id uuid.UUID) *ProvisioningScheduledStepUpdate {
	pssu.mutation.SetProvisioningStepToPlanID(id)
	return pssu
}

// SetNillableProvisioningStepToPlanID sets the "ProvisioningStepToPlan" edge to the Plan entity by ID if the given value is not nil.
func (pssu *ProvisioningScheduledStepUpdate) SetNillableProvisioningStepToPlanID(id *uuid.UUID) *ProvisioningScheduledStepUpdate {
	if id != nil {
		pssu = pssu.SetProvisioningStepToPlanID(*id)
	}
	return pssu
}

// SetProvisioningStepToPlan sets the "ProvisioningStepToPlan" edge to the Plan entity.
func (pssu *ProvisioningScheduledStepUpdate) SetProvisioningStepToPlan(p *Plan) *ProvisioningScheduledStepUpdate {
	return pssu.SetProvisioningStepToPlanID(p.ID)
}

// SetProvisioningScheduledStepToGinFileMiddlewareID sets the "ProvisioningScheduledStepToGinFileMiddleware" edge to the GinFileMiddleware entity by ID.
func (pssu *ProvisioningScheduledStepUpdate) SetProvisioningScheduledStepToGinFileMiddlewareID(id uuid.UUID) *ProvisioningScheduledStepUpdate {
	pssu.mutation.SetProvisioningScheduledStepToGinFileMiddlewareID(id)
	return pssu
}

// SetNillableProvisioningScheduledStepToGinFileMiddlewareID sets the "ProvisioningScheduledStepToGinFileMiddleware" edge to the GinFileMiddleware entity by ID if the given value is not nil.
func (pssu *ProvisioningScheduledStepUpdate) SetNillableProvisioningScheduledStepToGinFileMiddlewareID(id *uuid.UUID) *ProvisioningScheduledStepUpdate {
	if id != nil {
		pssu = pssu.SetProvisioningScheduledStepToGinFileMiddlewareID(*id)
	}
	return pssu
}

// SetProvisioningScheduledStepToGinFileMiddleware sets the "ProvisioningScheduledStepToGinFileMiddleware" edge to the GinFileMiddleware entity.
func (pssu *ProvisioningScheduledStepUpdate) SetProvisioningScheduledStepToGinFileMiddleware(g *GinFileMiddleware) *ProvisioningScheduledStepUpdate {
	return pssu.SetProvisioningScheduledStepToGinFileMiddlewareID(g.ID)
}

// Mutation returns the ProvisioningScheduledStepMutation object of the builder.
func (pssu *ProvisioningScheduledStepUpdate) Mutation() *ProvisioningScheduledStepMutation {
	return pssu.mutation
}

// ClearProvisioningScheduledStepToStatus clears the "ProvisioningScheduledStepToStatus" edge to the Status entity.
func (pssu *ProvisioningScheduledStepUpdate) ClearProvisioningScheduledStepToStatus() *ProvisioningScheduledStepUpdate {
	pssu.mutation.ClearProvisioningScheduledStepToStatus()
	return pssu
}

// ClearProvisioningScheduledStepToScheduledStep clears the "ProvisioningScheduledStepToScheduledStep" edge to the ScheduledStep entity.
func (pssu *ProvisioningScheduledStepUpdate) ClearProvisioningScheduledStepToScheduledStep() *ProvisioningScheduledStepUpdate {
	pssu.mutation.ClearProvisioningScheduledStepToScheduledStep()
	return pssu
}

// ClearProvisioningScheduleStepToProvisionedHost clears the "ProvisioningScheduleStepToProvisionedHost" edge to the ProvisionedHost entity.
func (pssu *ProvisioningScheduledStepUpdate) ClearProvisioningScheduleStepToProvisionedHost() *ProvisioningScheduledStepUpdate {
	pssu.mutation.ClearProvisioningScheduleStepToProvisionedHost()
	return pssu
}

// ClearProvisioningScheduledStepToScript clears the "ProvisioningScheduledStepToScript" edge to the Script entity.
func (pssu *ProvisioningScheduledStepUpdate) ClearProvisioningScheduledStepToScript() *ProvisioningScheduledStepUpdate {
	pssu.mutation.ClearProvisioningScheduledStepToScript()
	return pssu
}

// ClearProvisioningScheduledStepToCommand clears the "ProvisioningScheduledStepToCommand" edge to the Command entity.
func (pssu *ProvisioningScheduledStepUpdate) ClearProvisioningScheduledStepToCommand() *ProvisioningScheduledStepUpdate {
	pssu.mutation.ClearProvisioningScheduledStepToCommand()
	return pssu
}

// ClearProvisioningScheduledStepToDNSRecord clears the "ProvisioningScheduledStepToDNSRecord" edge to the DNSRecord entity.
func (pssu *ProvisioningScheduledStepUpdate) ClearProvisioningScheduledStepToDNSRecord() *ProvisioningScheduledStepUpdate {
	pssu.mutation.ClearProvisioningScheduledStepToDNSRecord()
	return pssu
}

// ClearProvisioningScheduledStepToFileDelete clears the "ProvisioningScheduledStepToFileDelete" edge to the FileDelete entity.
func (pssu *ProvisioningScheduledStepUpdate) ClearProvisioningScheduledStepToFileDelete() *ProvisioningScheduledStepUpdate {
	pssu.mutation.ClearProvisioningScheduledStepToFileDelete()
	return pssu
}

// ClearProvisioningScheduledStepToFileDownload clears the "ProvisioningScheduledStepToFileDownload" edge to the FileDownload entity.
func (pssu *ProvisioningScheduledStepUpdate) ClearProvisioningScheduledStepToFileDownload() *ProvisioningScheduledStepUpdate {
	pssu.mutation.ClearProvisioningScheduledStepToFileDownload()
	return pssu
}

// ClearProvisioningScheduledStepToFileExtract clears the "ProvisioningScheduledStepToFileExtract" edge to the FileExtract entity.
func (pssu *ProvisioningScheduledStepUpdate) ClearProvisioningScheduledStepToFileExtract() *ProvisioningScheduledStepUpdate {
	pssu.mutation.ClearProvisioningScheduledStepToFileExtract()
	return pssu
}

// ClearProvisioningScheduledStepToAnsible clears the "ProvisioningScheduledStepToAnsible" edge to the Ansible entity.
func (pssu *ProvisioningScheduledStepUpdate) ClearProvisioningScheduledStepToAnsible() *ProvisioningScheduledStepUpdate {
	pssu.mutation.ClearProvisioningScheduledStepToAnsible()
	return pssu
}

// ClearProvisioningScheduledStepToAgentTask clears the "ProvisioningScheduledStepToAgentTask" edge to the AgentTask entity.
func (pssu *ProvisioningScheduledStepUpdate) ClearProvisioningScheduledStepToAgentTask() *ProvisioningScheduledStepUpdate {
	pssu.mutation.ClearProvisioningScheduledStepToAgentTask()
	return pssu
}

// ClearProvisioningStepToPlan clears the "ProvisioningStepToPlan" edge to the Plan entity.
func (pssu *ProvisioningScheduledStepUpdate) ClearProvisioningStepToPlan() *ProvisioningScheduledStepUpdate {
	pssu.mutation.ClearProvisioningStepToPlan()
	return pssu
}

// ClearProvisioningScheduledStepToGinFileMiddleware clears the "ProvisioningScheduledStepToGinFileMiddleware" edge to the GinFileMiddleware entity.
func (pssu *ProvisioningScheduledStepUpdate) ClearProvisioningScheduledStepToGinFileMiddleware() *ProvisioningScheduledStepUpdate {
	pssu.mutation.ClearProvisioningScheduledStepToGinFileMiddleware()
	return pssu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pssu *ProvisioningScheduledStepUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pssu.hooks) == 0 {
		if err = pssu.check(); err != nil {
			return 0, err
		}
		affected, err = pssu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProvisioningScheduledStepMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pssu.check(); err != nil {
				return 0, err
			}
			pssu.mutation = mutation
			affected, err = pssu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pssu.hooks) - 1; i >= 0; i-- {
			if pssu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pssu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pssu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pssu *ProvisioningScheduledStepUpdate) SaveX(ctx context.Context) int {
	affected, err := pssu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pssu *ProvisioningScheduledStepUpdate) Exec(ctx context.Context) error {
	_, err := pssu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pssu *ProvisioningScheduledStepUpdate) ExecX(ctx context.Context) {
	if err := pssu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pssu *ProvisioningScheduledStepUpdate) check() error {
	if v, ok := pssu.mutation.GetType(); ok {
		if err := provisioningscheduledstep.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ProvisioningScheduledStep.type": %w`, err)}
		}
	}
	if _, ok := pssu.mutation.ProvisioningScheduledStepToScheduledStepID(); pssu.mutation.ProvisioningScheduledStepToScheduledStepCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ProvisioningScheduledStep.ProvisioningScheduledStepToScheduledStep"`)
	}
	if _, ok := pssu.mutation.ProvisioningScheduleStepToProvisionedHostID(); pssu.mutation.ProvisioningScheduleStepToProvisionedHostCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ProvisioningScheduledStep.ProvisioningScheduleStepToProvisionedHost"`)
	}
	return nil
}

func (pssu *ProvisioningScheduledStepUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   provisioningscheduledstep.Table,
			Columns: provisioningscheduledstep.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: provisioningscheduledstep.FieldID,
			},
		},
	}
	if ps := pssu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pssu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: provisioningscheduledstep.FieldType,
		})
	}
	if value, ok := pssu.mutation.RunTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: provisioningscheduledstep.FieldRunTime,
		})
	}
	if pssu.mutation.ProvisioningScheduledStepToStatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToStatusTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: status.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssu.mutation.ProvisioningScheduledStepToStatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToStatusTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: status.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssu.mutation.ProvisioningScheduledStepToScheduledStepCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToScheduledStepTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToScheduledStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: scheduledstep.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssu.mutation.ProvisioningScheduledStepToScheduledStepIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToScheduledStepTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToScheduledStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: scheduledstep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssu.mutation.ProvisioningScheduleStepToProvisionedHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisioningScheduleStepToProvisionedHostTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduleStepToProvisionedHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionedhost.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssu.mutation.ProvisioningScheduleStepToProvisionedHostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisioningScheduleStepToProvisionedHostTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduleStepToProvisionedHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionedhost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssu.mutation.ProvisioningScheduledStepToScriptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToScriptTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToScriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: script.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssu.mutation.ProvisioningScheduledStepToScriptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToScriptTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToScriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: script.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssu.mutation.ProvisioningScheduledStepToCommandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToCommandTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToCommandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: command.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssu.mutation.ProvisioningScheduledStepToCommandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToCommandTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToCommandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: command.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssu.mutation.ProvisioningScheduledStepToDNSRecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToDNSRecordTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToDNSRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dnsrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssu.mutation.ProvisioningScheduledStepToDNSRecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToDNSRecordTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToDNSRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dnsrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssu.mutation.ProvisioningScheduledStepToFileDeleteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToFileDeleteTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToFileDeleteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: filedelete.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssu.mutation.ProvisioningScheduledStepToFileDeleteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToFileDeleteTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToFileDeleteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: filedelete.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssu.mutation.ProvisioningScheduledStepToFileDownloadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToFileDownloadTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToFileDownloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: filedownload.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssu.mutation.ProvisioningScheduledStepToFileDownloadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToFileDownloadTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToFileDownloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: filedownload.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssu.mutation.ProvisioningScheduledStepToFileExtractCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToFileExtractTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToFileExtractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: fileextract.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssu.mutation.ProvisioningScheduledStepToFileExtractIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToFileExtractTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToFileExtractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: fileextract.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssu.mutation.ProvisioningScheduledStepToAnsibleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToAnsibleTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToAnsibleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ansible.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssu.mutation.ProvisioningScheduledStepToAnsibleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToAnsibleTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToAnsibleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ansible.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssu.mutation.ProvisioningScheduledStepToAgentTaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToAgentTaskTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToAgentTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: agenttask.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssu.mutation.ProvisioningScheduledStepToAgentTaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToAgentTaskTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToAgentTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: agenttask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssu.mutation.ProvisioningStepToPlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisioningscheduledstep.ProvisioningStepToPlanTable,
			Columns: []string{provisioningscheduledstep.ProvisioningStepToPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssu.mutation.ProvisioningStepToPlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisioningscheduledstep.ProvisioningStepToPlanTable,
			Columns: []string{provisioningscheduledstep.ProvisioningStepToPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssu.mutation.ProvisioningScheduledStepToGinFileMiddlewareCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToGinFileMiddlewareTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToGinFileMiddlewareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ginfilemiddleware.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssu.mutation.ProvisioningScheduledStepToGinFileMiddlewareIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToGinFileMiddlewareTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToGinFileMiddlewareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ginfilemiddleware.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pssu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{provisioningscheduledstep.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ProvisioningScheduledStepUpdateOne is the builder for updating a single ProvisioningScheduledStep entity.
type ProvisioningScheduledStepUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProvisioningScheduledStepMutation
}

// SetType sets the "type" field.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetType(pr provisioningscheduledstep.Type) *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.SetType(pr)
	return pssuo
}

// SetRunTime sets the "run_time" field.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetRunTime(t time.Time) *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.SetRunTime(t)
	return pssuo
}

// SetProvisioningScheduledStepToStatusID sets the "ProvisioningScheduledStepToStatus" edge to the Status entity by ID.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetProvisioningScheduledStepToStatusID(id uuid.UUID) *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.SetProvisioningScheduledStepToStatusID(id)
	return pssuo
}

// SetNillableProvisioningScheduledStepToStatusID sets the "ProvisioningScheduledStepToStatus" edge to the Status entity by ID if the given value is not nil.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetNillableProvisioningScheduledStepToStatusID(id *uuid.UUID) *ProvisioningScheduledStepUpdateOne {
	if id != nil {
		pssuo = pssuo.SetProvisioningScheduledStepToStatusID(*id)
	}
	return pssuo
}

// SetProvisioningScheduledStepToStatus sets the "ProvisioningScheduledStepToStatus" edge to the Status entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetProvisioningScheduledStepToStatus(s *Status) *ProvisioningScheduledStepUpdateOne {
	return pssuo.SetProvisioningScheduledStepToStatusID(s.ID)
}

// SetProvisioningScheduledStepToScheduledStepID sets the "ProvisioningScheduledStepToScheduledStep" edge to the ScheduledStep entity by ID.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetProvisioningScheduledStepToScheduledStepID(id uuid.UUID) *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.SetProvisioningScheduledStepToScheduledStepID(id)
	return pssuo
}

// SetProvisioningScheduledStepToScheduledStep sets the "ProvisioningScheduledStepToScheduledStep" edge to the ScheduledStep entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetProvisioningScheduledStepToScheduledStep(s *ScheduledStep) *ProvisioningScheduledStepUpdateOne {
	return pssuo.SetProvisioningScheduledStepToScheduledStepID(s.ID)
}

// SetProvisioningScheduleStepToProvisionedHostID sets the "ProvisioningScheduleStepToProvisionedHost" edge to the ProvisionedHost entity by ID.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetProvisioningScheduleStepToProvisionedHostID(id uuid.UUID) *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.SetProvisioningScheduleStepToProvisionedHostID(id)
	return pssuo
}

// SetProvisioningScheduleStepToProvisionedHost sets the "ProvisioningScheduleStepToProvisionedHost" edge to the ProvisionedHost entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetProvisioningScheduleStepToProvisionedHost(p *ProvisionedHost) *ProvisioningScheduledStepUpdateOne {
	return pssuo.SetProvisioningScheduleStepToProvisionedHostID(p.ID)
}

// SetProvisioningScheduledStepToScriptID sets the "ProvisioningScheduledStepToScript" edge to the Script entity by ID.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetProvisioningScheduledStepToScriptID(id uuid.UUID) *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.SetProvisioningScheduledStepToScriptID(id)
	return pssuo
}

// SetNillableProvisioningScheduledStepToScriptID sets the "ProvisioningScheduledStepToScript" edge to the Script entity by ID if the given value is not nil.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetNillableProvisioningScheduledStepToScriptID(id *uuid.UUID) *ProvisioningScheduledStepUpdateOne {
	if id != nil {
		pssuo = pssuo.SetProvisioningScheduledStepToScriptID(*id)
	}
	return pssuo
}

// SetProvisioningScheduledStepToScript sets the "ProvisioningScheduledStepToScript" edge to the Script entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetProvisioningScheduledStepToScript(s *Script) *ProvisioningScheduledStepUpdateOne {
	return pssuo.SetProvisioningScheduledStepToScriptID(s.ID)
}

// SetProvisioningScheduledStepToCommandID sets the "ProvisioningScheduledStepToCommand" edge to the Command entity by ID.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetProvisioningScheduledStepToCommandID(id uuid.UUID) *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.SetProvisioningScheduledStepToCommandID(id)
	return pssuo
}

// SetNillableProvisioningScheduledStepToCommandID sets the "ProvisioningScheduledStepToCommand" edge to the Command entity by ID if the given value is not nil.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetNillableProvisioningScheduledStepToCommandID(id *uuid.UUID) *ProvisioningScheduledStepUpdateOne {
	if id != nil {
		pssuo = pssuo.SetProvisioningScheduledStepToCommandID(*id)
	}
	return pssuo
}

// SetProvisioningScheduledStepToCommand sets the "ProvisioningScheduledStepToCommand" edge to the Command entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetProvisioningScheduledStepToCommand(c *Command) *ProvisioningScheduledStepUpdateOne {
	return pssuo.SetProvisioningScheduledStepToCommandID(c.ID)
}

// SetProvisioningScheduledStepToDNSRecordID sets the "ProvisioningScheduledStepToDNSRecord" edge to the DNSRecord entity by ID.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetProvisioningScheduledStepToDNSRecordID(id uuid.UUID) *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.SetProvisioningScheduledStepToDNSRecordID(id)
	return pssuo
}

// SetNillableProvisioningScheduledStepToDNSRecordID sets the "ProvisioningScheduledStepToDNSRecord" edge to the DNSRecord entity by ID if the given value is not nil.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetNillableProvisioningScheduledStepToDNSRecordID(id *uuid.UUID) *ProvisioningScheduledStepUpdateOne {
	if id != nil {
		pssuo = pssuo.SetProvisioningScheduledStepToDNSRecordID(*id)
	}
	return pssuo
}

// SetProvisioningScheduledStepToDNSRecord sets the "ProvisioningScheduledStepToDNSRecord" edge to the DNSRecord entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetProvisioningScheduledStepToDNSRecord(d *DNSRecord) *ProvisioningScheduledStepUpdateOne {
	return pssuo.SetProvisioningScheduledStepToDNSRecordID(d.ID)
}

// SetProvisioningScheduledStepToFileDeleteID sets the "ProvisioningScheduledStepToFileDelete" edge to the FileDelete entity by ID.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetProvisioningScheduledStepToFileDeleteID(id uuid.UUID) *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.SetProvisioningScheduledStepToFileDeleteID(id)
	return pssuo
}

// SetNillableProvisioningScheduledStepToFileDeleteID sets the "ProvisioningScheduledStepToFileDelete" edge to the FileDelete entity by ID if the given value is not nil.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetNillableProvisioningScheduledStepToFileDeleteID(id *uuid.UUID) *ProvisioningScheduledStepUpdateOne {
	if id != nil {
		pssuo = pssuo.SetProvisioningScheduledStepToFileDeleteID(*id)
	}
	return pssuo
}

// SetProvisioningScheduledStepToFileDelete sets the "ProvisioningScheduledStepToFileDelete" edge to the FileDelete entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetProvisioningScheduledStepToFileDelete(f *FileDelete) *ProvisioningScheduledStepUpdateOne {
	return pssuo.SetProvisioningScheduledStepToFileDeleteID(f.ID)
}

// SetProvisioningScheduledStepToFileDownloadID sets the "ProvisioningScheduledStepToFileDownload" edge to the FileDownload entity by ID.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetProvisioningScheduledStepToFileDownloadID(id uuid.UUID) *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.SetProvisioningScheduledStepToFileDownloadID(id)
	return pssuo
}

// SetNillableProvisioningScheduledStepToFileDownloadID sets the "ProvisioningScheduledStepToFileDownload" edge to the FileDownload entity by ID if the given value is not nil.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetNillableProvisioningScheduledStepToFileDownloadID(id *uuid.UUID) *ProvisioningScheduledStepUpdateOne {
	if id != nil {
		pssuo = pssuo.SetProvisioningScheduledStepToFileDownloadID(*id)
	}
	return pssuo
}

// SetProvisioningScheduledStepToFileDownload sets the "ProvisioningScheduledStepToFileDownload" edge to the FileDownload entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetProvisioningScheduledStepToFileDownload(f *FileDownload) *ProvisioningScheduledStepUpdateOne {
	return pssuo.SetProvisioningScheduledStepToFileDownloadID(f.ID)
}

// SetProvisioningScheduledStepToFileExtractID sets the "ProvisioningScheduledStepToFileExtract" edge to the FileExtract entity by ID.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetProvisioningScheduledStepToFileExtractID(id uuid.UUID) *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.SetProvisioningScheduledStepToFileExtractID(id)
	return pssuo
}

// SetNillableProvisioningScheduledStepToFileExtractID sets the "ProvisioningScheduledStepToFileExtract" edge to the FileExtract entity by ID if the given value is not nil.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetNillableProvisioningScheduledStepToFileExtractID(id *uuid.UUID) *ProvisioningScheduledStepUpdateOne {
	if id != nil {
		pssuo = pssuo.SetProvisioningScheduledStepToFileExtractID(*id)
	}
	return pssuo
}

// SetProvisioningScheduledStepToFileExtract sets the "ProvisioningScheduledStepToFileExtract" edge to the FileExtract entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetProvisioningScheduledStepToFileExtract(f *FileExtract) *ProvisioningScheduledStepUpdateOne {
	return pssuo.SetProvisioningScheduledStepToFileExtractID(f.ID)
}

// SetProvisioningScheduledStepToAnsibleID sets the "ProvisioningScheduledStepToAnsible" edge to the Ansible entity by ID.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetProvisioningScheduledStepToAnsibleID(id uuid.UUID) *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.SetProvisioningScheduledStepToAnsibleID(id)
	return pssuo
}

// SetNillableProvisioningScheduledStepToAnsibleID sets the "ProvisioningScheduledStepToAnsible" edge to the Ansible entity by ID if the given value is not nil.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetNillableProvisioningScheduledStepToAnsibleID(id *uuid.UUID) *ProvisioningScheduledStepUpdateOne {
	if id != nil {
		pssuo = pssuo.SetProvisioningScheduledStepToAnsibleID(*id)
	}
	return pssuo
}

// SetProvisioningScheduledStepToAnsible sets the "ProvisioningScheduledStepToAnsible" edge to the Ansible entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetProvisioningScheduledStepToAnsible(a *Ansible) *ProvisioningScheduledStepUpdateOne {
	return pssuo.SetProvisioningScheduledStepToAnsibleID(a.ID)
}

// SetProvisioningScheduledStepToAgentTaskID sets the "ProvisioningScheduledStepToAgentTask" edge to the AgentTask entity by ID.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetProvisioningScheduledStepToAgentTaskID(id uuid.UUID) *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.SetProvisioningScheduledStepToAgentTaskID(id)
	return pssuo
}

// SetNillableProvisioningScheduledStepToAgentTaskID sets the "ProvisioningScheduledStepToAgentTask" edge to the AgentTask entity by ID if the given value is not nil.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetNillableProvisioningScheduledStepToAgentTaskID(id *uuid.UUID) *ProvisioningScheduledStepUpdateOne {
	if id != nil {
		pssuo = pssuo.SetProvisioningScheduledStepToAgentTaskID(*id)
	}
	return pssuo
}

// SetProvisioningScheduledStepToAgentTask sets the "ProvisioningScheduledStepToAgentTask" edge to the AgentTask entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetProvisioningScheduledStepToAgentTask(a *AgentTask) *ProvisioningScheduledStepUpdateOne {
	return pssuo.SetProvisioningScheduledStepToAgentTaskID(a.ID)
}

// SetProvisioningStepToPlanID sets the "ProvisioningStepToPlan" edge to the Plan entity by ID.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetProvisioningStepToPlanID(id uuid.UUID) *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.SetProvisioningStepToPlanID(id)
	return pssuo
}

// SetNillableProvisioningStepToPlanID sets the "ProvisioningStepToPlan" edge to the Plan entity by ID if the given value is not nil.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetNillableProvisioningStepToPlanID(id *uuid.UUID) *ProvisioningScheduledStepUpdateOne {
	if id != nil {
		pssuo = pssuo.SetProvisioningStepToPlanID(*id)
	}
	return pssuo
}

// SetProvisioningStepToPlan sets the "ProvisioningStepToPlan" edge to the Plan entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetProvisioningStepToPlan(p *Plan) *ProvisioningScheduledStepUpdateOne {
	return pssuo.SetProvisioningStepToPlanID(p.ID)
}

// SetProvisioningScheduledStepToGinFileMiddlewareID sets the "ProvisioningScheduledStepToGinFileMiddleware" edge to the GinFileMiddleware entity by ID.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetProvisioningScheduledStepToGinFileMiddlewareID(id uuid.UUID) *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.SetProvisioningScheduledStepToGinFileMiddlewareID(id)
	return pssuo
}

// SetNillableProvisioningScheduledStepToGinFileMiddlewareID sets the "ProvisioningScheduledStepToGinFileMiddleware" edge to the GinFileMiddleware entity by ID if the given value is not nil.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetNillableProvisioningScheduledStepToGinFileMiddlewareID(id *uuid.UUID) *ProvisioningScheduledStepUpdateOne {
	if id != nil {
		pssuo = pssuo.SetProvisioningScheduledStepToGinFileMiddlewareID(*id)
	}
	return pssuo
}

// SetProvisioningScheduledStepToGinFileMiddleware sets the "ProvisioningScheduledStepToGinFileMiddleware" edge to the GinFileMiddleware entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) SetProvisioningScheduledStepToGinFileMiddleware(g *GinFileMiddleware) *ProvisioningScheduledStepUpdateOne {
	return pssuo.SetProvisioningScheduledStepToGinFileMiddlewareID(g.ID)
}

// Mutation returns the ProvisioningScheduledStepMutation object of the builder.
func (pssuo *ProvisioningScheduledStepUpdateOne) Mutation() *ProvisioningScheduledStepMutation {
	return pssuo.mutation
}

// ClearProvisioningScheduledStepToStatus clears the "ProvisioningScheduledStepToStatus" edge to the Status entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) ClearProvisioningScheduledStepToStatus() *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.ClearProvisioningScheduledStepToStatus()
	return pssuo
}

// ClearProvisioningScheduledStepToScheduledStep clears the "ProvisioningScheduledStepToScheduledStep" edge to the ScheduledStep entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) ClearProvisioningScheduledStepToScheduledStep() *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.ClearProvisioningScheduledStepToScheduledStep()
	return pssuo
}

// ClearProvisioningScheduleStepToProvisionedHost clears the "ProvisioningScheduleStepToProvisionedHost" edge to the ProvisionedHost entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) ClearProvisioningScheduleStepToProvisionedHost() *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.ClearProvisioningScheduleStepToProvisionedHost()
	return pssuo
}

// ClearProvisioningScheduledStepToScript clears the "ProvisioningScheduledStepToScript" edge to the Script entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) ClearProvisioningScheduledStepToScript() *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.ClearProvisioningScheduledStepToScript()
	return pssuo
}

// ClearProvisioningScheduledStepToCommand clears the "ProvisioningScheduledStepToCommand" edge to the Command entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) ClearProvisioningScheduledStepToCommand() *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.ClearProvisioningScheduledStepToCommand()
	return pssuo
}

// ClearProvisioningScheduledStepToDNSRecord clears the "ProvisioningScheduledStepToDNSRecord" edge to the DNSRecord entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) ClearProvisioningScheduledStepToDNSRecord() *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.ClearProvisioningScheduledStepToDNSRecord()
	return pssuo
}

// ClearProvisioningScheduledStepToFileDelete clears the "ProvisioningScheduledStepToFileDelete" edge to the FileDelete entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) ClearProvisioningScheduledStepToFileDelete() *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.ClearProvisioningScheduledStepToFileDelete()
	return pssuo
}

// ClearProvisioningScheduledStepToFileDownload clears the "ProvisioningScheduledStepToFileDownload" edge to the FileDownload entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) ClearProvisioningScheduledStepToFileDownload() *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.ClearProvisioningScheduledStepToFileDownload()
	return pssuo
}

// ClearProvisioningScheduledStepToFileExtract clears the "ProvisioningScheduledStepToFileExtract" edge to the FileExtract entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) ClearProvisioningScheduledStepToFileExtract() *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.ClearProvisioningScheduledStepToFileExtract()
	return pssuo
}

// ClearProvisioningScheduledStepToAnsible clears the "ProvisioningScheduledStepToAnsible" edge to the Ansible entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) ClearProvisioningScheduledStepToAnsible() *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.ClearProvisioningScheduledStepToAnsible()
	return pssuo
}

// ClearProvisioningScheduledStepToAgentTask clears the "ProvisioningScheduledStepToAgentTask" edge to the AgentTask entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) ClearProvisioningScheduledStepToAgentTask() *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.ClearProvisioningScheduledStepToAgentTask()
	return pssuo
}

// ClearProvisioningStepToPlan clears the "ProvisioningStepToPlan" edge to the Plan entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) ClearProvisioningStepToPlan() *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.ClearProvisioningStepToPlan()
	return pssuo
}

// ClearProvisioningScheduledStepToGinFileMiddleware clears the "ProvisioningScheduledStepToGinFileMiddleware" edge to the GinFileMiddleware entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) ClearProvisioningScheduledStepToGinFileMiddleware() *ProvisioningScheduledStepUpdateOne {
	pssuo.mutation.ClearProvisioningScheduledStepToGinFileMiddleware()
	return pssuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pssuo *ProvisioningScheduledStepUpdateOne) Select(field string, fields ...string) *ProvisioningScheduledStepUpdateOne {
	pssuo.fields = append([]string{field}, fields...)
	return pssuo
}

// Save executes the query and returns the updated ProvisioningScheduledStep entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) Save(ctx context.Context) (*ProvisioningScheduledStep, error) {
	var (
		err  error
		node *ProvisioningScheduledStep
	)
	if len(pssuo.hooks) == 0 {
		if err = pssuo.check(); err != nil {
			return nil, err
		}
		node, err = pssuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProvisioningScheduledStepMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pssuo.check(); err != nil {
				return nil, err
			}
			pssuo.mutation = mutation
			node, err = pssuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pssuo.hooks) - 1; i >= 0; i-- {
			if pssuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pssuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pssuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ProvisioningScheduledStep)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ProvisioningScheduledStepMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pssuo *ProvisioningScheduledStepUpdateOne) SaveX(ctx context.Context) *ProvisioningScheduledStep {
	node, err := pssuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pssuo *ProvisioningScheduledStepUpdateOne) Exec(ctx context.Context) error {
	_, err := pssuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pssuo *ProvisioningScheduledStepUpdateOne) ExecX(ctx context.Context) {
	if err := pssuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pssuo *ProvisioningScheduledStepUpdateOne) check() error {
	if v, ok := pssuo.mutation.GetType(); ok {
		if err := provisioningscheduledstep.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ProvisioningScheduledStep.type": %w`, err)}
		}
	}
	if _, ok := pssuo.mutation.ProvisioningScheduledStepToScheduledStepID(); pssuo.mutation.ProvisioningScheduledStepToScheduledStepCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ProvisioningScheduledStep.ProvisioningScheduledStepToScheduledStep"`)
	}
	if _, ok := pssuo.mutation.ProvisioningScheduleStepToProvisionedHostID(); pssuo.mutation.ProvisioningScheduleStepToProvisionedHostCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ProvisioningScheduledStep.ProvisioningScheduleStepToProvisionedHost"`)
	}
	return nil
}

func (pssuo *ProvisioningScheduledStepUpdateOne) sqlSave(ctx context.Context) (_node *ProvisioningScheduledStep, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   provisioningscheduledstep.Table,
			Columns: provisioningscheduledstep.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: provisioningscheduledstep.FieldID,
			},
		},
	}
	id, ok := pssuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProvisioningScheduledStep.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pssuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, provisioningscheduledstep.FieldID)
		for _, f := range fields {
			if !provisioningscheduledstep.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != provisioningscheduledstep.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pssuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pssuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: provisioningscheduledstep.FieldType,
		})
	}
	if value, ok := pssuo.mutation.RunTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: provisioningscheduledstep.FieldRunTime,
		})
	}
	if pssuo.mutation.ProvisioningScheduledStepToStatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToStatusTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: status.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssuo.mutation.ProvisioningScheduledStepToStatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToStatusTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: status.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssuo.mutation.ProvisioningScheduledStepToScheduledStepCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToScheduledStepTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToScheduledStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: scheduledstep.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssuo.mutation.ProvisioningScheduledStepToScheduledStepIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToScheduledStepTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToScheduledStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: scheduledstep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssuo.mutation.ProvisioningScheduleStepToProvisionedHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisioningScheduleStepToProvisionedHostTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduleStepToProvisionedHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionedhost.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssuo.mutation.ProvisioningScheduleStepToProvisionedHostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisioningScheduleStepToProvisionedHostTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduleStepToProvisionedHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionedhost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssuo.mutation.ProvisioningScheduledStepToScriptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToScriptTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToScriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: script.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssuo.mutation.ProvisioningScheduledStepToScriptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToScriptTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToScriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: script.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssuo.mutation.ProvisioningScheduledStepToCommandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToCommandTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToCommandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: command.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssuo.mutation.ProvisioningScheduledStepToCommandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToCommandTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToCommandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: command.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssuo.mutation.ProvisioningScheduledStepToDNSRecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToDNSRecordTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToDNSRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dnsrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssuo.mutation.ProvisioningScheduledStepToDNSRecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToDNSRecordTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToDNSRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dnsrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssuo.mutation.ProvisioningScheduledStepToFileDeleteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToFileDeleteTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToFileDeleteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: filedelete.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssuo.mutation.ProvisioningScheduledStepToFileDeleteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToFileDeleteTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToFileDeleteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: filedelete.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssuo.mutation.ProvisioningScheduledStepToFileDownloadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToFileDownloadTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToFileDownloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: filedownload.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssuo.mutation.ProvisioningScheduledStepToFileDownloadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToFileDownloadTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToFileDownloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: filedownload.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssuo.mutation.ProvisioningScheduledStepToFileExtractCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToFileExtractTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToFileExtractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: fileextract.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssuo.mutation.ProvisioningScheduledStepToFileExtractIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToFileExtractTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToFileExtractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: fileextract.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssuo.mutation.ProvisioningScheduledStepToAnsibleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToAnsibleTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToAnsibleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ansible.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssuo.mutation.ProvisioningScheduledStepToAnsibleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToAnsibleTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToAnsibleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ansible.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssuo.mutation.ProvisioningScheduledStepToAgentTaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToAgentTaskTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToAgentTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: agenttask.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssuo.mutation.ProvisioningScheduledStepToAgentTaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToAgentTaskTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToAgentTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: agenttask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssuo.mutation.ProvisioningStepToPlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisioningscheduledstep.ProvisioningStepToPlanTable,
			Columns: []string{provisioningscheduledstep.ProvisioningStepToPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssuo.mutation.ProvisioningStepToPlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisioningscheduledstep.ProvisioningStepToPlanTable,
			Columns: []string{provisioningscheduledstep.ProvisioningStepToPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssuo.mutation.ProvisioningScheduledStepToGinFileMiddlewareCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToGinFileMiddlewareTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToGinFileMiddlewareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ginfilemiddleware.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssuo.mutation.ProvisioningScheduledStepToGinFileMiddlewareIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisioningscheduledstep.ProvisioningScheduledStepToGinFileMiddlewareTable,
			Columns: []string{provisioningscheduledstep.ProvisioningScheduledStepToGinFileMiddlewareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ginfilemiddleware.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProvisioningScheduledStep{config: pssuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pssuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{provisioningscheduledstep.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
