// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/gen0cide/laforge/ent/agenttask"
	"github.com/gen0cide/laforge/ent/ansible"
	"github.com/gen0cide/laforge/ent/command"
	"github.com/gen0cide/laforge/ent/dnsrecord"
	"github.com/gen0cide/laforge/ent/filedelete"
	"github.com/gen0cide/laforge/ent/filedownload"
	"github.com/gen0cide/laforge/ent/fileextract"
	"github.com/gen0cide/laforge/ent/ginfilemiddleware"
	"github.com/gen0cide/laforge/ent/plan"
	"github.com/gen0cide/laforge/ent/provisionedhost"
	"github.com/gen0cide/laforge/ent/provisioningscheduledstep"
	"github.com/gen0cide/laforge/ent/scheduledstep"
	"github.com/gen0cide/laforge/ent/script"
	"github.com/gen0cide/laforge/ent/status"
	"github.com/google/uuid"
)

// ProvisioningScheduledStep is the model entity for the ProvisioningScheduledStep schema.
type ProvisioningScheduledStep struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type provisioningscheduledstep.Type `json:"type,omitempty"`
	// RunTime holds the value of the "run_time" field.
	RunTime time.Time `json:"run_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProvisioningScheduledStepQuery when eager-loading is set.
	Edges ProvisioningScheduledStepEdges `json:"edges"`

	// Edges put into the main struct to be loaded via hcl
	// ProvisioningScheduledStepToStatus holds the value of the ProvisioningScheduledStepToStatus edge.
	HCLProvisioningScheduledStepToStatus *Status `json:"ProvisioningScheduledStepToStatus,omitempty"`
	// ProvisioningScheduledStepToScheduledStep holds the value of the ProvisioningScheduledStepToScheduledStep edge.
	HCLProvisioningScheduledStepToScheduledStep *ScheduledStep `json:"ProvisioningScheduledStepToScheduledStep,omitempty"`
	// ProvisioningScheduleStepToProvisionedHost holds the value of the ProvisioningScheduleStepToProvisionedHost edge.
	HCLProvisioningScheduleStepToProvisionedHost *ProvisionedHost `json:"ProvisioningScheduleStepToProvisionedHost,omitempty"`
	// ProvisioningScheduledStepToScript holds the value of the ProvisioningScheduledStepToScript edge.
	HCLProvisioningScheduledStepToScript *Script `json:"ProvisioningScheduledStepToScript,omitempty"`
	// ProvisioningScheduledStepToCommand holds the value of the ProvisioningScheduledStepToCommand edge.
	HCLProvisioningScheduledStepToCommand *Command `json:"ProvisioningScheduledStepToCommand,omitempty"`
	// ProvisioningScheduledStepToDNSRecord holds the value of the ProvisioningScheduledStepToDNSRecord edge.
	HCLProvisioningScheduledStepToDNSRecord *DNSRecord `json:"ProvisioningScheduledStepToDNSRecord,omitempty"`
	// ProvisioningScheduledStepToFileDelete holds the value of the ProvisioningScheduledStepToFileDelete edge.
	HCLProvisioningScheduledStepToFileDelete *FileDelete `json:"ProvisioningScheduledStepToFileDelete,omitempty"`
	// ProvisioningScheduledStepToFileDownload holds the value of the ProvisioningScheduledStepToFileDownload edge.
	HCLProvisioningScheduledStepToFileDownload *FileDownload `json:"ProvisioningScheduledStepToFileDownload,omitempty"`
	// ProvisioningScheduledStepToFileExtract holds the value of the ProvisioningScheduledStepToFileExtract edge.
	HCLProvisioningScheduledStepToFileExtract *FileExtract `json:"ProvisioningScheduledStepToFileExtract,omitempty"`
	// ProvisioningScheduledStepToAnsible holds the value of the ProvisioningScheduledStepToAnsible edge.
	HCLProvisioningScheduledStepToAnsible *Ansible `json:"ProvisioningScheduledStepToAnsible,omitempty"`
	// ProvisioningScheduledStepToAgentTask holds the value of the ProvisioningScheduledStepToAgentTask edge.
	HCLProvisioningScheduledStepToAgentTask *AgentTask `json:"ProvisioningScheduledStepToAgentTask,omitempty"`
	// ProvisioningStepToPlan holds the value of the ProvisioningStepToPlan edge.
	HCLProvisioningStepToPlan *Plan `json:"ProvisioningStepToPlan,omitempty"`
	// ProvisioningScheduledStepToGinFileMiddleware holds the value of the ProvisioningScheduledStepToGinFileMiddleware edge.
	HCLProvisioningScheduledStepToGinFileMiddleware *GinFileMiddleware `json:"ProvisioningScheduledStepToGinFileMiddleware,omitempty"`
	//
	agent_task_agent_task_to_provisioning_scheduled_step                       *uuid.UUID
	gin_file_middleware_gin_file_middleware_to_provisioning_scheduled_step     *uuid.UUID
	plan_plan_to_provisioning_scheduled_step                                   *uuid.UUID
	provisioning_scheduled_step_provisioning_scheduled_step_to_scheduled_step  *uuid.UUID
	provisioning_scheduled_step_provisioning_schedule_step_to_provisioned_host *uuid.UUID
	provisioning_scheduled_step_provisioning_scheduled_step_to_script          *uuid.UUID
	provisioning_scheduled_step_provisioning_scheduled_step_to_command         *uuid.UUID
	provisioning_scheduled_step_provisioning_scheduled_step_to_dns_record      *uuid.UUID
	provisioning_scheduled_step_provisioning_scheduled_step_to_file_delete     *uuid.UUID
	provisioning_scheduled_step_provisioning_scheduled_step_to_file_download   *uuid.UUID
	provisioning_scheduled_step_provisioning_scheduled_step_to_file_extract    *uuid.UUID
	provisioning_scheduled_step_provisioning_scheduled_step_to_ansible         *uuid.UUID
}

// ProvisioningScheduledStepEdges holds the relations/edges for other nodes in the graph.
type ProvisioningScheduledStepEdges struct {
	// ProvisioningScheduledStepToStatus holds the value of the ProvisioningScheduledStepToStatus edge.
	ProvisioningScheduledStepToStatus *Status `json:"ProvisioningScheduledStepToStatus,omitempty"`
	// ProvisioningScheduledStepToScheduledStep holds the value of the ProvisioningScheduledStepToScheduledStep edge.
	ProvisioningScheduledStepToScheduledStep *ScheduledStep `json:"ProvisioningScheduledStepToScheduledStep,omitempty"`
	// ProvisioningScheduleStepToProvisionedHost holds the value of the ProvisioningScheduleStepToProvisionedHost edge.
	ProvisioningScheduleStepToProvisionedHost *ProvisionedHost `json:"ProvisioningScheduleStepToProvisionedHost,omitempty"`
	// ProvisioningScheduledStepToScript holds the value of the ProvisioningScheduledStepToScript edge.
	ProvisioningScheduledStepToScript *Script `json:"ProvisioningScheduledStepToScript,omitempty"`
	// ProvisioningScheduledStepToCommand holds the value of the ProvisioningScheduledStepToCommand edge.
	ProvisioningScheduledStepToCommand *Command `json:"ProvisioningScheduledStepToCommand,omitempty"`
	// ProvisioningScheduledStepToDNSRecord holds the value of the ProvisioningScheduledStepToDNSRecord edge.
	ProvisioningScheduledStepToDNSRecord *DNSRecord `json:"ProvisioningScheduledStepToDNSRecord,omitempty"`
	// ProvisioningScheduledStepToFileDelete holds the value of the ProvisioningScheduledStepToFileDelete edge.
	ProvisioningScheduledStepToFileDelete *FileDelete `json:"ProvisioningScheduledStepToFileDelete,omitempty"`
	// ProvisioningScheduledStepToFileDownload holds the value of the ProvisioningScheduledStepToFileDownload edge.
	ProvisioningScheduledStepToFileDownload *FileDownload `json:"ProvisioningScheduledStepToFileDownload,omitempty"`
	// ProvisioningScheduledStepToFileExtract holds the value of the ProvisioningScheduledStepToFileExtract edge.
	ProvisioningScheduledStepToFileExtract *FileExtract `json:"ProvisioningScheduledStepToFileExtract,omitempty"`
	// ProvisioningScheduledStepToAnsible holds the value of the ProvisioningScheduledStepToAnsible edge.
	ProvisioningScheduledStepToAnsible *Ansible `json:"ProvisioningScheduledStepToAnsible,omitempty"`
	// ProvisioningScheduledStepToAgentTask holds the value of the ProvisioningScheduledStepToAgentTask edge.
	ProvisioningScheduledStepToAgentTask *AgentTask `json:"ProvisioningScheduledStepToAgentTask,omitempty"`
	// ProvisioningStepToPlan holds the value of the ProvisioningStepToPlan edge.
	ProvisioningStepToPlan *Plan `json:"ProvisioningStepToPlan,omitempty"`
	// ProvisioningScheduledStepToGinFileMiddleware holds the value of the ProvisioningScheduledStepToGinFileMiddleware edge.
	ProvisioningScheduledStepToGinFileMiddleware *GinFileMiddleware `json:"ProvisioningScheduledStepToGinFileMiddleware,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [13]bool
}

// ProvisioningScheduledStepToStatusOrErr returns the ProvisioningScheduledStepToStatus value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProvisioningScheduledStepEdges) ProvisioningScheduledStepToStatusOrErr() (*Status, error) {
	if e.loadedTypes[0] {
		if e.ProvisioningScheduledStepToStatus == nil {
			// The edge ProvisioningScheduledStepToStatus was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: status.Label}
		}
		return e.ProvisioningScheduledStepToStatus, nil
	}
	return nil, &NotLoadedError{edge: "ProvisioningScheduledStepToStatus"}
}

// ProvisioningScheduledStepToScheduledStepOrErr returns the ProvisioningScheduledStepToScheduledStep value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProvisioningScheduledStepEdges) ProvisioningScheduledStepToScheduledStepOrErr() (*ScheduledStep, error) {
	if e.loadedTypes[1] {
		if e.ProvisioningScheduledStepToScheduledStep == nil {
			// The edge ProvisioningScheduledStepToScheduledStep was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: scheduledstep.Label}
		}
		return e.ProvisioningScheduledStepToScheduledStep, nil
	}
	return nil, &NotLoadedError{edge: "ProvisioningScheduledStepToScheduledStep"}
}

// ProvisioningScheduleStepToProvisionedHostOrErr returns the ProvisioningScheduleStepToProvisionedHost value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProvisioningScheduledStepEdges) ProvisioningScheduleStepToProvisionedHostOrErr() (*ProvisionedHost, error) {
	if e.loadedTypes[2] {
		if e.ProvisioningScheduleStepToProvisionedHost == nil {
			// The edge ProvisioningScheduleStepToProvisionedHost was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: provisionedhost.Label}
		}
		return e.ProvisioningScheduleStepToProvisionedHost, nil
	}
	return nil, &NotLoadedError{edge: "ProvisioningScheduleStepToProvisionedHost"}
}

// ProvisioningScheduledStepToScriptOrErr returns the ProvisioningScheduledStepToScript value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProvisioningScheduledStepEdges) ProvisioningScheduledStepToScriptOrErr() (*Script, error) {
	if e.loadedTypes[3] {
		if e.ProvisioningScheduledStepToScript == nil {
			// The edge ProvisioningScheduledStepToScript was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: script.Label}
		}
		return e.ProvisioningScheduledStepToScript, nil
	}
	return nil, &NotLoadedError{edge: "ProvisioningScheduledStepToScript"}
}

// ProvisioningScheduledStepToCommandOrErr returns the ProvisioningScheduledStepToCommand value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProvisioningScheduledStepEdges) ProvisioningScheduledStepToCommandOrErr() (*Command, error) {
	if e.loadedTypes[4] {
		if e.ProvisioningScheduledStepToCommand == nil {
			// The edge ProvisioningScheduledStepToCommand was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: command.Label}
		}
		return e.ProvisioningScheduledStepToCommand, nil
	}
	return nil, &NotLoadedError{edge: "ProvisioningScheduledStepToCommand"}
}

// ProvisioningScheduledStepToDNSRecordOrErr returns the ProvisioningScheduledStepToDNSRecord value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProvisioningScheduledStepEdges) ProvisioningScheduledStepToDNSRecordOrErr() (*DNSRecord, error) {
	if e.loadedTypes[5] {
		if e.ProvisioningScheduledStepToDNSRecord == nil {
			// The edge ProvisioningScheduledStepToDNSRecord was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: dnsrecord.Label}
		}
		return e.ProvisioningScheduledStepToDNSRecord, nil
	}
	return nil, &NotLoadedError{edge: "ProvisioningScheduledStepToDNSRecord"}
}

// ProvisioningScheduledStepToFileDeleteOrErr returns the ProvisioningScheduledStepToFileDelete value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProvisioningScheduledStepEdges) ProvisioningScheduledStepToFileDeleteOrErr() (*FileDelete, error) {
	if e.loadedTypes[6] {
		if e.ProvisioningScheduledStepToFileDelete == nil {
			// The edge ProvisioningScheduledStepToFileDelete was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: filedelete.Label}
		}
		return e.ProvisioningScheduledStepToFileDelete, nil
	}
	return nil, &NotLoadedError{edge: "ProvisioningScheduledStepToFileDelete"}
}

// ProvisioningScheduledStepToFileDownloadOrErr returns the ProvisioningScheduledStepToFileDownload value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProvisioningScheduledStepEdges) ProvisioningScheduledStepToFileDownloadOrErr() (*FileDownload, error) {
	if e.loadedTypes[7] {
		if e.ProvisioningScheduledStepToFileDownload == nil {
			// The edge ProvisioningScheduledStepToFileDownload was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: filedownload.Label}
		}
		return e.ProvisioningScheduledStepToFileDownload, nil
	}
	return nil, &NotLoadedError{edge: "ProvisioningScheduledStepToFileDownload"}
}

// ProvisioningScheduledStepToFileExtractOrErr returns the ProvisioningScheduledStepToFileExtract value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProvisioningScheduledStepEdges) ProvisioningScheduledStepToFileExtractOrErr() (*FileExtract, error) {
	if e.loadedTypes[8] {
		if e.ProvisioningScheduledStepToFileExtract == nil {
			// The edge ProvisioningScheduledStepToFileExtract was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: fileextract.Label}
		}
		return e.ProvisioningScheduledStepToFileExtract, nil
	}
	return nil, &NotLoadedError{edge: "ProvisioningScheduledStepToFileExtract"}
}

// ProvisioningScheduledStepToAnsibleOrErr returns the ProvisioningScheduledStepToAnsible value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProvisioningScheduledStepEdges) ProvisioningScheduledStepToAnsibleOrErr() (*Ansible, error) {
	if e.loadedTypes[9] {
		if e.ProvisioningScheduledStepToAnsible == nil {
			// The edge ProvisioningScheduledStepToAnsible was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: ansible.Label}
		}
		return e.ProvisioningScheduledStepToAnsible, nil
	}
	return nil, &NotLoadedError{edge: "ProvisioningScheduledStepToAnsible"}
}

// ProvisioningScheduledStepToAgentTaskOrErr returns the ProvisioningScheduledStepToAgentTask value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProvisioningScheduledStepEdges) ProvisioningScheduledStepToAgentTaskOrErr() (*AgentTask, error) {
	if e.loadedTypes[10] {
		if e.ProvisioningScheduledStepToAgentTask == nil {
			// The edge ProvisioningScheduledStepToAgentTask was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: agenttask.Label}
		}
		return e.ProvisioningScheduledStepToAgentTask, nil
	}
	return nil, &NotLoadedError{edge: "ProvisioningScheduledStepToAgentTask"}
}

// ProvisioningStepToPlanOrErr returns the ProvisioningStepToPlan value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProvisioningScheduledStepEdges) ProvisioningStepToPlanOrErr() (*Plan, error) {
	if e.loadedTypes[11] {
		if e.ProvisioningStepToPlan == nil {
			// The edge ProvisioningStepToPlan was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: plan.Label}
		}
		return e.ProvisioningStepToPlan, nil
	}
	return nil, &NotLoadedError{edge: "ProvisioningStepToPlan"}
}

// ProvisioningScheduledStepToGinFileMiddlewareOrErr returns the ProvisioningScheduledStepToGinFileMiddleware value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProvisioningScheduledStepEdges) ProvisioningScheduledStepToGinFileMiddlewareOrErr() (*GinFileMiddleware, error) {
	if e.loadedTypes[12] {
		if e.ProvisioningScheduledStepToGinFileMiddleware == nil {
			// The edge ProvisioningScheduledStepToGinFileMiddleware was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: ginfilemiddleware.Label}
		}
		return e.ProvisioningScheduledStepToGinFileMiddleware, nil
	}
	return nil, &NotLoadedError{edge: "ProvisioningScheduledStepToGinFileMiddleware"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProvisioningScheduledStep) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case provisioningscheduledstep.FieldType:
			values[i] = new(sql.NullString)
		case provisioningscheduledstep.FieldRunTime:
			values[i] = new(sql.NullTime)
		case provisioningscheduledstep.FieldID:
			values[i] = new(uuid.UUID)
		case provisioningscheduledstep.ForeignKeys[0]: // agent_task_agent_task_to_provisioning_scheduled_step
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case provisioningscheduledstep.ForeignKeys[1]: // gin_file_middleware_gin_file_middleware_to_provisioning_scheduled_step
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case provisioningscheduledstep.ForeignKeys[2]: // plan_plan_to_provisioning_scheduled_step
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case provisioningscheduledstep.ForeignKeys[3]: // provisioning_scheduled_step_provisioning_scheduled_step_to_scheduled_step
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case provisioningscheduledstep.ForeignKeys[4]: // provisioning_scheduled_step_provisioning_schedule_step_to_provisioned_host
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case provisioningscheduledstep.ForeignKeys[5]: // provisioning_scheduled_step_provisioning_scheduled_step_to_script
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case provisioningscheduledstep.ForeignKeys[6]: // provisioning_scheduled_step_provisioning_scheduled_step_to_command
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case provisioningscheduledstep.ForeignKeys[7]: // provisioning_scheduled_step_provisioning_scheduled_step_to_dns_record
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case provisioningscheduledstep.ForeignKeys[8]: // provisioning_scheduled_step_provisioning_scheduled_step_to_file_delete
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case provisioningscheduledstep.ForeignKeys[9]: // provisioning_scheduled_step_provisioning_scheduled_step_to_file_download
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case provisioningscheduledstep.ForeignKeys[10]: // provisioning_scheduled_step_provisioning_scheduled_step_to_file_extract
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case provisioningscheduledstep.ForeignKeys[11]: // provisioning_scheduled_step_provisioning_scheduled_step_to_ansible
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type ProvisioningScheduledStep", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProvisioningScheduledStep fields.
func (pss *ProvisioningScheduledStep) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case provisioningscheduledstep.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pss.ID = *value
			}
		case provisioningscheduledstep.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				pss.Type = provisioningscheduledstep.Type(value.String)
			}
		case provisioningscheduledstep.FieldRunTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field run_time", values[i])
			} else if value.Valid {
				pss.RunTime = value.Time
			}
		case provisioningscheduledstep.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field agent_task_agent_task_to_provisioning_scheduled_step", values[i])
			} else if value.Valid {
				pss.agent_task_agent_task_to_provisioning_scheduled_step = new(uuid.UUID)
				*pss.agent_task_agent_task_to_provisioning_scheduled_step = *value.S.(*uuid.UUID)
			}
		case provisioningscheduledstep.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field gin_file_middleware_gin_file_middleware_to_provisioning_scheduled_step", values[i])
			} else if value.Valid {
				pss.gin_file_middleware_gin_file_middleware_to_provisioning_scheduled_step = new(uuid.UUID)
				*pss.gin_file_middleware_gin_file_middleware_to_provisioning_scheduled_step = *value.S.(*uuid.UUID)
			}
		case provisioningscheduledstep.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field plan_plan_to_provisioning_scheduled_step", values[i])
			} else if value.Valid {
				pss.plan_plan_to_provisioning_scheduled_step = new(uuid.UUID)
				*pss.plan_plan_to_provisioning_scheduled_step = *value.S.(*uuid.UUID)
			}
		case provisioningscheduledstep.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field provisioning_scheduled_step_provisioning_scheduled_step_to_scheduled_step", values[i])
			} else if value.Valid {
				pss.provisioning_scheduled_step_provisioning_scheduled_step_to_scheduled_step = new(uuid.UUID)
				*pss.provisioning_scheduled_step_provisioning_scheduled_step_to_scheduled_step = *value.S.(*uuid.UUID)
			}
		case provisioningscheduledstep.ForeignKeys[4]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field provisioning_scheduled_step_provisioning_schedule_step_to_provisioned_host", values[i])
			} else if value.Valid {
				pss.provisioning_scheduled_step_provisioning_schedule_step_to_provisioned_host = new(uuid.UUID)
				*pss.provisioning_scheduled_step_provisioning_schedule_step_to_provisioned_host = *value.S.(*uuid.UUID)
			}
		case provisioningscheduledstep.ForeignKeys[5]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field provisioning_scheduled_step_provisioning_scheduled_step_to_script", values[i])
			} else if value.Valid {
				pss.provisioning_scheduled_step_provisioning_scheduled_step_to_script = new(uuid.UUID)
				*pss.provisioning_scheduled_step_provisioning_scheduled_step_to_script = *value.S.(*uuid.UUID)
			}
		case provisioningscheduledstep.ForeignKeys[6]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field provisioning_scheduled_step_provisioning_scheduled_step_to_command", values[i])
			} else if value.Valid {
				pss.provisioning_scheduled_step_provisioning_scheduled_step_to_command = new(uuid.UUID)
				*pss.provisioning_scheduled_step_provisioning_scheduled_step_to_command = *value.S.(*uuid.UUID)
			}
		case provisioningscheduledstep.ForeignKeys[7]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field provisioning_scheduled_step_provisioning_scheduled_step_to_dns_record", values[i])
			} else if value.Valid {
				pss.provisioning_scheduled_step_provisioning_scheduled_step_to_dns_record = new(uuid.UUID)
				*pss.provisioning_scheduled_step_provisioning_scheduled_step_to_dns_record = *value.S.(*uuid.UUID)
			}
		case provisioningscheduledstep.ForeignKeys[8]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field provisioning_scheduled_step_provisioning_scheduled_step_to_file_delete", values[i])
			} else if value.Valid {
				pss.provisioning_scheduled_step_provisioning_scheduled_step_to_file_delete = new(uuid.UUID)
				*pss.provisioning_scheduled_step_provisioning_scheduled_step_to_file_delete = *value.S.(*uuid.UUID)
			}
		case provisioningscheduledstep.ForeignKeys[9]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field provisioning_scheduled_step_provisioning_scheduled_step_to_file_download", values[i])
			} else if value.Valid {
				pss.provisioning_scheduled_step_provisioning_scheduled_step_to_file_download = new(uuid.UUID)
				*pss.provisioning_scheduled_step_provisioning_scheduled_step_to_file_download = *value.S.(*uuid.UUID)
			}
		case provisioningscheduledstep.ForeignKeys[10]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field provisioning_scheduled_step_provisioning_scheduled_step_to_file_extract", values[i])
			} else if value.Valid {
				pss.provisioning_scheduled_step_provisioning_scheduled_step_to_file_extract = new(uuid.UUID)
				*pss.provisioning_scheduled_step_provisioning_scheduled_step_to_file_extract = *value.S.(*uuid.UUID)
			}
		case provisioningscheduledstep.ForeignKeys[11]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field provisioning_scheduled_step_provisioning_scheduled_step_to_ansible", values[i])
			} else if value.Valid {
				pss.provisioning_scheduled_step_provisioning_scheduled_step_to_ansible = new(uuid.UUID)
				*pss.provisioning_scheduled_step_provisioning_scheduled_step_to_ansible = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryProvisioningScheduledStepToStatus queries the "ProvisioningScheduledStepToStatus" edge of the ProvisioningScheduledStep entity.
func (pss *ProvisioningScheduledStep) QueryProvisioningScheduledStepToStatus() *StatusQuery {
	return (&ProvisioningScheduledStepClient{config: pss.config}).QueryProvisioningScheduledStepToStatus(pss)
}

// QueryProvisioningScheduledStepToScheduledStep queries the "ProvisioningScheduledStepToScheduledStep" edge of the ProvisioningScheduledStep entity.
func (pss *ProvisioningScheduledStep) QueryProvisioningScheduledStepToScheduledStep() *ScheduledStepQuery {
	return (&ProvisioningScheduledStepClient{config: pss.config}).QueryProvisioningScheduledStepToScheduledStep(pss)
}

// QueryProvisioningScheduleStepToProvisionedHost queries the "ProvisioningScheduleStepToProvisionedHost" edge of the ProvisioningScheduledStep entity.
func (pss *ProvisioningScheduledStep) QueryProvisioningScheduleStepToProvisionedHost() *ProvisionedHostQuery {
	return (&ProvisioningScheduledStepClient{config: pss.config}).QueryProvisioningScheduleStepToProvisionedHost(pss)
}

// QueryProvisioningScheduledStepToScript queries the "ProvisioningScheduledStepToScript" edge of the ProvisioningScheduledStep entity.
func (pss *ProvisioningScheduledStep) QueryProvisioningScheduledStepToScript() *ScriptQuery {
	return (&ProvisioningScheduledStepClient{config: pss.config}).QueryProvisioningScheduledStepToScript(pss)
}

// QueryProvisioningScheduledStepToCommand queries the "ProvisioningScheduledStepToCommand" edge of the ProvisioningScheduledStep entity.
func (pss *ProvisioningScheduledStep) QueryProvisioningScheduledStepToCommand() *CommandQuery {
	return (&ProvisioningScheduledStepClient{config: pss.config}).QueryProvisioningScheduledStepToCommand(pss)
}

// QueryProvisioningScheduledStepToDNSRecord queries the "ProvisioningScheduledStepToDNSRecord" edge of the ProvisioningScheduledStep entity.
func (pss *ProvisioningScheduledStep) QueryProvisioningScheduledStepToDNSRecord() *DNSRecordQuery {
	return (&ProvisioningScheduledStepClient{config: pss.config}).QueryProvisioningScheduledStepToDNSRecord(pss)
}

// QueryProvisioningScheduledStepToFileDelete queries the "ProvisioningScheduledStepToFileDelete" edge of the ProvisioningScheduledStep entity.
func (pss *ProvisioningScheduledStep) QueryProvisioningScheduledStepToFileDelete() *FileDeleteQuery {
	return (&ProvisioningScheduledStepClient{config: pss.config}).QueryProvisioningScheduledStepToFileDelete(pss)
}

// QueryProvisioningScheduledStepToFileDownload queries the "ProvisioningScheduledStepToFileDownload" edge of the ProvisioningScheduledStep entity.
func (pss *ProvisioningScheduledStep) QueryProvisioningScheduledStepToFileDownload() *FileDownloadQuery {
	return (&ProvisioningScheduledStepClient{config: pss.config}).QueryProvisioningScheduledStepToFileDownload(pss)
}

// QueryProvisioningScheduledStepToFileExtract queries the "ProvisioningScheduledStepToFileExtract" edge of the ProvisioningScheduledStep entity.
func (pss *ProvisioningScheduledStep) QueryProvisioningScheduledStepToFileExtract() *FileExtractQuery {
	return (&ProvisioningScheduledStepClient{config: pss.config}).QueryProvisioningScheduledStepToFileExtract(pss)
}

// QueryProvisioningScheduledStepToAnsible queries the "ProvisioningScheduledStepToAnsible" edge of the ProvisioningScheduledStep entity.
func (pss *ProvisioningScheduledStep) QueryProvisioningScheduledStepToAnsible() *AnsibleQuery {
	return (&ProvisioningScheduledStepClient{config: pss.config}).QueryProvisioningScheduledStepToAnsible(pss)
}

// QueryProvisioningScheduledStepToAgentTask queries the "ProvisioningScheduledStepToAgentTask" edge of the ProvisioningScheduledStep entity.
func (pss *ProvisioningScheduledStep) QueryProvisioningScheduledStepToAgentTask() *AgentTaskQuery {
	return (&ProvisioningScheduledStepClient{config: pss.config}).QueryProvisioningScheduledStepToAgentTask(pss)
}

// QueryProvisioningStepToPlan queries the "ProvisioningStepToPlan" edge of the ProvisioningScheduledStep entity.
func (pss *ProvisioningScheduledStep) QueryProvisioningStepToPlan() *PlanQuery {
	return (&ProvisioningScheduledStepClient{config: pss.config}).QueryProvisioningStepToPlan(pss)
}

// QueryProvisioningScheduledStepToGinFileMiddleware queries the "ProvisioningScheduledStepToGinFileMiddleware" edge of the ProvisioningScheduledStep entity.
func (pss *ProvisioningScheduledStep) QueryProvisioningScheduledStepToGinFileMiddleware() *GinFileMiddlewareQuery {
	return (&ProvisioningScheduledStepClient{config: pss.config}).QueryProvisioningScheduledStepToGinFileMiddleware(pss)
}

// Update returns a builder for updating this ProvisioningScheduledStep.
// Note that you need to call ProvisioningScheduledStep.Unwrap() before calling this method if this ProvisioningScheduledStep
// was returned from a transaction, and the transaction was committed or rolled back.
func (pss *ProvisioningScheduledStep) Update() *ProvisioningScheduledStepUpdateOne {
	return (&ProvisioningScheduledStepClient{config: pss.config}).UpdateOne(pss)
}

// Unwrap unwraps the ProvisioningScheduledStep entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pss *ProvisioningScheduledStep) Unwrap() *ProvisioningScheduledStep {
	tx, ok := pss.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProvisioningScheduledStep is not a transactional entity")
	}
	pss.config.driver = tx.drv
	return pss
}

// String implements the fmt.Stringer.
func (pss *ProvisioningScheduledStep) String() string {
	var builder strings.Builder
	builder.WriteString("ProvisioningScheduledStep(")
	builder.WriteString(fmt.Sprintf("id=%v", pss.ID))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", pss.Type))
	builder.WriteString(", run_time=")
	builder.WriteString(pss.RunTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ProvisioningScheduledSteps is a parsable slice of ProvisioningScheduledStep.
type ProvisioningScheduledSteps []*ProvisioningScheduledStep

func (pss ProvisioningScheduledSteps) config(cfg config) {
	for _i := range pss {
		pss[_i].config = cfg
	}
}
