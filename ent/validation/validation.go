// Code generated by ent, DO NOT EDIT.

package validation

import (
	"fmt"
	"io"
	"strconv"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the validation type in the database.
	Label = "validation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHclID holds the string denoting the hcl_id field in the database.
	FieldHclID = "hcl_id"
	// FieldValidationType holds the string denoting the validation_type field in the database.
	FieldValidationType = "validation_type"
	// FieldHash holds the string denoting the hash field in the database.
	FieldHash = "hash"
	// FieldRegex holds the string denoting the regex field in the database.
	FieldRegex = "regex"
	// FieldIP holds the string denoting the ip field in the database.
	FieldIP = "ip"
	// FieldPort holds the string denoting the port field in the database.
	FieldPort = "port"
	// FieldHostname holds the string denoting the hostname field in the database.
	FieldHostname = "hostname"
	// FieldNameservers holds the string denoting the nameservers field in the database.
	FieldNameservers = "nameservers"
	// FieldPackageName holds the string denoting the package_name field in the database.
	FieldPackageName = "package_name"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldGroupName holds the string denoting the group_name field in the database.
	FieldGroupName = "group_name"
	// FieldFilePath holds the string denoting the file_path field in the database.
	FieldFilePath = "file_path"
	// FieldSearchString holds the string denoting the search_string field in the database.
	FieldSearchString = "search_string"
	// FieldServiceName holds the string denoting the service_name field in the database.
	FieldServiceName = "service_name"
	// FieldServiceStatus holds the string denoting the service_status field in the database.
	FieldServiceStatus = "service_status"
	// FieldProcessName holds the string denoting the process_name field in the database.
	FieldProcessName = "process_name"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "Users"
	// EdgeEnvironment holds the string denoting the environment edge name in mutations.
	EdgeEnvironment = "Environment"
	// Table holds the table name of the validation in the database.
	Table = "validations"
	// UsersTable is the table that holds the Users relation/edge.
	UsersTable = "users"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
	// UsersColumn is the table column denoting the Users relation/edge.
	UsersColumn = "validation_users"
	// EnvironmentTable is the table that holds the Environment relation/edge.
	EnvironmentTable = "validations"
	// EnvironmentInverseTable is the table name for the Environment entity.
	// It exists in this package in order to avoid circular dependency with the "environment" package.
	EnvironmentInverseTable = "environments"
	// EnvironmentColumn is the table column denoting the Environment relation/edge.
	EnvironmentColumn = "environment_validations"
)

// Columns holds all SQL columns for validation fields.
var Columns = []string{
	FieldID,
	FieldHclID,
	FieldValidationType,
	FieldHash,
	FieldRegex,
	FieldIP,
	FieldPort,
	FieldHostname,
	FieldNameservers,
	FieldPackageName,
	FieldUsername,
	FieldGroupName,
	FieldFilePath,
	FieldSearchString,
	FieldServiceName,
	FieldServiceStatus,
	FieldProcessName,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "validations"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"environment_validations",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// ValidationType defines the type for the "validation_type" enum field.
type ValidationType string

// ValidationType values.
const (
	ValidationTypeLinuxAptInstalled   ValidationType = "linux-apt-installed"
	ValidationTypeNetTCPOpen          ValidationType = "net-tcp-open"
	ValidationTypeNetUDPOpen          ValidationType = "net-udp-open"
	ValidationTypeNetHTTPContentRegex ValidationType = "net-http-content-regex"
	ValidationTypeFileExists          ValidationType = "file-exists"
	ValidationTypeFileHash            ValidationType = "file-hash"
	ValidationTypeFileContentRegex    ValidationType = "file-content-regex"
	ValidationTypeDirExists           ValidationType = "dir-exists"
	ValidationTypeUserExists          ValidationType = "user-exists"
	ValidationTypeUserGroupMembership ValidationType = "user-group-membership"
	ValidationTypeHostPortOpen        ValidationType = "host-port-open"
	ValidationTypeHostProcessRunning  ValidationType = "host-process-running"
	ValidationTypeHostServiceState    ValidationType = "host-service-state"
	ValidationTypeNetIcmp             ValidationType = "net-icmp"
	ValidationTypeFileContentString   ValidationType = "file-content-string"
	ValidationTypeFilePermission      ValidationType = "file-permission"
)

func (vt ValidationType) String() string {
	return string(vt)
}

// ValidationTypeValidator is a validator for the "validation_type" field enum values. It is called by the builders before save.
func ValidationTypeValidator(vt ValidationType) error {
	switch vt {
	case ValidationTypeLinuxAptInstalled, ValidationTypeNetTCPOpen, ValidationTypeNetUDPOpen, ValidationTypeNetHTTPContentRegex, ValidationTypeFileExists, ValidationTypeFileHash, ValidationTypeFileContentRegex, ValidationTypeDirExists, ValidationTypeUserExists, ValidationTypeUserGroupMembership, ValidationTypeHostPortOpen, ValidationTypeHostProcessRunning, ValidationTypeHostServiceState, ValidationTypeNetIcmp, ValidationTypeFileContentString, ValidationTypeFilePermission:
		return nil
	default:
		return fmt.Errorf("validation: invalid enum value for validation_type field: %q", vt)
	}
}

// ServiceStatus defines the type for the "service_status" enum field.
type ServiceStatus string

// ServiceStatusActive is the default value of the ServiceStatus enum.
const DefaultServiceStatus = ServiceStatusActive

// ServiceStatus values.
const (
	ServiceStatusActive   ServiceStatus = "active"
	ServiceStatusInactive ServiceStatus = "inactive"
	ServiceStatusEnabled  ServiceStatus = "enabled"
	ServiceStatusDisabled ServiceStatus = "disabled"
	ServiceStatusStatic   ServiceStatus = "static"
	ServiceStatusMasked   ServiceStatus = "masked"
	ServiceStatusAlias    ServiceStatus = "alias"
	ServiceStatusLinked   ServiceStatus = "linked"
)

func (ss ServiceStatus) String() string {
	return string(ss)
}

// ServiceStatusValidator is a validator for the "service_status" field enum values. It is called by the builders before save.
func ServiceStatusValidator(ss ServiceStatus) error {
	switch ss {
	case ServiceStatusActive, ServiceStatusInactive, ServiceStatusEnabled, ServiceStatusDisabled, ServiceStatusStatic, ServiceStatusMasked, ServiceStatusAlias, ServiceStatusLinked:
		return nil
	default:
		return fmt.Errorf("validation: invalid enum value for service_status field: %q", ss)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (vt ValidationType) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(vt.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (vt *ValidationType) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*vt = ValidationType(str)
	if err := ValidationTypeValidator(*vt); err != nil {
		return fmt.Errorf("%s is not a valid ValidationType", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (ss ServiceStatus) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(ss.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (ss *ServiceStatus) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*ss = ServiceStatus(str)
	if err := ServiceStatusValidator(*ss); err != nil {
		return fmt.Errorf("%s is not a valid ServiceStatus", str)
	}
	return nil
}
