// Code generated by ent, DO NOT EDIT.

package validation

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// HclID applies equality check predicate on the "hcl_id" field. It's identical to HclIDEQ.
func HclID(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHclID), v))
	})
}

// Output applies equality check predicate on the "output" field. It's identical to OutputEQ.
func Output(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOutput), v))
	})
}

// ErrorMessage applies equality check predicate on the "error_message" field. It's identical to ErrorMessageEQ.
func ErrorMessage(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldErrorMessage), v))
	})
}

// Hash applies equality check predicate on the "hash" field. It's identical to HashEQ.
func Hash(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHash), v))
	})
}

// Regex applies equality check predicate on the "regex" field. It's identical to RegexEQ.
func Regex(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegex), v))
	})
}

// IP applies equality check predicate on the "ip" field. It's identical to IPEQ.
func IP(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIP), v))
	})
}

// Port applies equality check predicate on the "port" field. It's identical to PortEQ.
func Port(v int) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPort), v))
	})
}

// Hostname applies equality check predicate on the "hostname" field. It's identical to HostnameEQ.
func Hostname(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHostname), v))
	})
}

// PackageName applies equality check predicate on the "package_name" field. It's identical to PackageNameEQ.
func PackageName(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPackageName), v))
	})
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUsername), v))
	})
}

// GroupName applies equality check predicate on the "group_name" field. It's identical to GroupNameEQ.
func GroupName(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGroupName), v))
	})
}

// FilePath applies equality check predicate on the "file_path" field. It's identical to FilePathEQ.
func FilePath(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFilePath), v))
	})
}

// SearchString applies equality check predicate on the "search_string" field. It's identical to SearchStringEQ.
func SearchString(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSearchString), v))
	})
}

// ServiceName applies equality check predicate on the "service_name" field. It's identical to ServiceNameEQ.
func ServiceName(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldServiceName), v))
	})
}

// ServiceStatus applies equality check predicate on the "service_status" field. It's identical to ServiceStatusEQ.
func ServiceStatus(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldServiceStatus), v))
	})
}

// ProcessName applies equality check predicate on the "process_name" field. It's identical to ProcessNameEQ.
func ProcessName(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProcessName), v))
	})
}

// HclIDEQ applies the EQ predicate on the "hcl_id" field.
func HclIDEQ(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHclID), v))
	})
}

// HclIDNEQ applies the NEQ predicate on the "hcl_id" field.
func HclIDNEQ(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHclID), v))
	})
}

// HclIDIn applies the In predicate on the "hcl_id" field.
func HclIDIn(vs ...string) predicate.Validation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldHclID), v...))
	})
}

// HclIDNotIn applies the NotIn predicate on the "hcl_id" field.
func HclIDNotIn(vs ...string) predicate.Validation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldHclID), v...))
	})
}

// HclIDGT applies the GT predicate on the "hcl_id" field.
func HclIDGT(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHclID), v))
	})
}

// HclIDGTE applies the GTE predicate on the "hcl_id" field.
func HclIDGTE(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHclID), v))
	})
}

// HclIDLT applies the LT predicate on the "hcl_id" field.
func HclIDLT(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHclID), v))
	})
}

// HclIDLTE applies the LTE predicate on the "hcl_id" field.
func HclIDLTE(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHclID), v))
	})
}

// HclIDContains applies the Contains predicate on the "hcl_id" field.
func HclIDContains(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHclID), v))
	})
}

// HclIDHasPrefix applies the HasPrefix predicate on the "hcl_id" field.
func HclIDHasPrefix(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHclID), v))
	})
}

// HclIDHasSuffix applies the HasSuffix predicate on the "hcl_id" field.
func HclIDHasSuffix(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHclID), v))
	})
}

// HclIDEqualFold applies the EqualFold predicate on the "hcl_id" field.
func HclIDEqualFold(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHclID), v))
	})
}

// HclIDContainsFold applies the ContainsFold predicate on the "hcl_id" field.
func HclIDContainsFold(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHclID), v))
	})
}

// ValidationTypeEQ applies the EQ predicate on the "validation_type" field.
func ValidationTypeEQ(v ValidationType) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldValidationType), v))
	})
}

// ValidationTypeNEQ applies the NEQ predicate on the "validation_type" field.
func ValidationTypeNEQ(v ValidationType) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldValidationType), v))
	})
}

// ValidationTypeIn applies the In predicate on the "validation_type" field.
func ValidationTypeIn(vs ...ValidationType) predicate.Validation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldValidationType), v...))
	})
}

// ValidationTypeNotIn applies the NotIn predicate on the "validation_type" field.
func ValidationTypeNotIn(vs ...ValidationType) predicate.Validation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldValidationType), v...))
	})
}

// OutputEQ applies the EQ predicate on the "output" field.
func OutputEQ(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOutput), v))
	})
}

// OutputNEQ applies the NEQ predicate on the "output" field.
func OutputNEQ(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOutput), v))
	})
}

// OutputIn applies the In predicate on the "output" field.
func OutputIn(vs ...string) predicate.Validation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOutput), v...))
	})
}

// OutputNotIn applies the NotIn predicate on the "output" field.
func OutputNotIn(vs ...string) predicate.Validation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOutput), v...))
	})
}

// OutputGT applies the GT predicate on the "output" field.
func OutputGT(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOutput), v))
	})
}

// OutputGTE applies the GTE predicate on the "output" field.
func OutputGTE(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOutput), v))
	})
}

// OutputLT applies the LT predicate on the "output" field.
func OutputLT(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOutput), v))
	})
}

// OutputLTE applies the LTE predicate on the "output" field.
func OutputLTE(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOutput), v))
	})
}

// OutputContains applies the Contains predicate on the "output" field.
func OutputContains(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOutput), v))
	})
}

// OutputHasPrefix applies the HasPrefix predicate on the "output" field.
func OutputHasPrefix(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOutput), v))
	})
}

// OutputHasSuffix applies the HasSuffix predicate on the "output" field.
func OutputHasSuffix(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOutput), v))
	})
}

// OutputEqualFold applies the EqualFold predicate on the "output" field.
func OutputEqualFold(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOutput), v))
	})
}

// OutputContainsFold applies the ContainsFold predicate on the "output" field.
func OutputContainsFold(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOutput), v))
	})
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v State) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldState), v))
	})
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v State) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldState), v))
	})
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...State) predicate.Validation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldState), v...))
	})
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...State) predicate.Validation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldState), v...))
	})
}

// ErrorMessageEQ applies the EQ predicate on the "error_message" field.
func ErrorMessageEQ(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldErrorMessage), v))
	})
}

// ErrorMessageNEQ applies the NEQ predicate on the "error_message" field.
func ErrorMessageNEQ(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldErrorMessage), v))
	})
}

// ErrorMessageIn applies the In predicate on the "error_message" field.
func ErrorMessageIn(vs ...string) predicate.Validation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldErrorMessage), v...))
	})
}

// ErrorMessageNotIn applies the NotIn predicate on the "error_message" field.
func ErrorMessageNotIn(vs ...string) predicate.Validation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldErrorMessage), v...))
	})
}

// ErrorMessageGT applies the GT predicate on the "error_message" field.
func ErrorMessageGT(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldErrorMessage), v))
	})
}

// ErrorMessageGTE applies the GTE predicate on the "error_message" field.
func ErrorMessageGTE(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldErrorMessage), v))
	})
}

// ErrorMessageLT applies the LT predicate on the "error_message" field.
func ErrorMessageLT(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldErrorMessage), v))
	})
}

// ErrorMessageLTE applies the LTE predicate on the "error_message" field.
func ErrorMessageLTE(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldErrorMessage), v))
	})
}

// ErrorMessageContains applies the Contains predicate on the "error_message" field.
func ErrorMessageContains(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldErrorMessage), v))
	})
}

// ErrorMessageHasPrefix applies the HasPrefix predicate on the "error_message" field.
func ErrorMessageHasPrefix(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldErrorMessage), v))
	})
}

// ErrorMessageHasSuffix applies the HasSuffix predicate on the "error_message" field.
func ErrorMessageHasSuffix(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldErrorMessage), v))
	})
}

// ErrorMessageEqualFold applies the EqualFold predicate on the "error_message" field.
func ErrorMessageEqualFold(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldErrorMessage), v))
	})
}

// ErrorMessageContainsFold applies the ContainsFold predicate on the "error_message" field.
func ErrorMessageContainsFold(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldErrorMessage), v))
	})
}

// HashEQ applies the EQ predicate on the "hash" field.
func HashEQ(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHash), v))
	})
}

// HashNEQ applies the NEQ predicate on the "hash" field.
func HashNEQ(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHash), v))
	})
}

// HashIn applies the In predicate on the "hash" field.
func HashIn(vs ...string) predicate.Validation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldHash), v...))
	})
}

// HashNotIn applies the NotIn predicate on the "hash" field.
func HashNotIn(vs ...string) predicate.Validation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldHash), v...))
	})
}

// HashGT applies the GT predicate on the "hash" field.
func HashGT(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHash), v))
	})
}

// HashGTE applies the GTE predicate on the "hash" field.
func HashGTE(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHash), v))
	})
}

// HashLT applies the LT predicate on the "hash" field.
func HashLT(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHash), v))
	})
}

// HashLTE applies the LTE predicate on the "hash" field.
func HashLTE(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHash), v))
	})
}

// HashContains applies the Contains predicate on the "hash" field.
func HashContains(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHash), v))
	})
}

// HashHasPrefix applies the HasPrefix predicate on the "hash" field.
func HashHasPrefix(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHash), v))
	})
}

// HashHasSuffix applies the HasSuffix predicate on the "hash" field.
func HashHasSuffix(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHash), v))
	})
}

// HashEqualFold applies the EqualFold predicate on the "hash" field.
func HashEqualFold(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHash), v))
	})
}

// HashContainsFold applies the ContainsFold predicate on the "hash" field.
func HashContainsFold(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHash), v))
	})
}

// RegexEQ applies the EQ predicate on the "regex" field.
func RegexEQ(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegex), v))
	})
}

// RegexNEQ applies the NEQ predicate on the "regex" field.
func RegexNEQ(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRegex), v))
	})
}

// RegexIn applies the In predicate on the "regex" field.
func RegexIn(vs ...string) predicate.Validation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRegex), v...))
	})
}

// RegexNotIn applies the NotIn predicate on the "regex" field.
func RegexNotIn(vs ...string) predicate.Validation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRegex), v...))
	})
}

// RegexGT applies the GT predicate on the "regex" field.
func RegexGT(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRegex), v))
	})
}

// RegexGTE applies the GTE predicate on the "regex" field.
func RegexGTE(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRegex), v))
	})
}

// RegexLT applies the LT predicate on the "regex" field.
func RegexLT(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRegex), v))
	})
}

// RegexLTE applies the LTE predicate on the "regex" field.
func RegexLTE(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRegex), v))
	})
}

// RegexContains applies the Contains predicate on the "regex" field.
func RegexContains(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRegex), v))
	})
}

// RegexHasPrefix applies the HasPrefix predicate on the "regex" field.
func RegexHasPrefix(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRegex), v))
	})
}

// RegexHasSuffix applies the HasSuffix predicate on the "regex" field.
func RegexHasSuffix(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRegex), v))
	})
}

// RegexEqualFold applies the EqualFold predicate on the "regex" field.
func RegexEqualFold(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRegex), v))
	})
}

// RegexContainsFold applies the ContainsFold predicate on the "regex" field.
func RegexContainsFold(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRegex), v))
	})
}

// IPEQ applies the EQ predicate on the "ip" field.
func IPEQ(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIP), v))
	})
}

// IPNEQ applies the NEQ predicate on the "ip" field.
func IPNEQ(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIP), v))
	})
}

// IPIn applies the In predicate on the "ip" field.
func IPIn(vs ...string) predicate.Validation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldIP), v...))
	})
}

// IPNotIn applies the NotIn predicate on the "ip" field.
func IPNotIn(vs ...string) predicate.Validation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldIP), v...))
	})
}

// IPGT applies the GT predicate on the "ip" field.
func IPGT(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIP), v))
	})
}

// IPGTE applies the GTE predicate on the "ip" field.
func IPGTE(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIP), v))
	})
}

// IPLT applies the LT predicate on the "ip" field.
func IPLT(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIP), v))
	})
}

// IPLTE applies the LTE predicate on the "ip" field.
func IPLTE(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIP), v))
	})
}

// IPContains applies the Contains predicate on the "ip" field.
func IPContains(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIP), v))
	})
}

// IPHasPrefix applies the HasPrefix predicate on the "ip" field.
func IPHasPrefix(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIP), v))
	})
}

// IPHasSuffix applies the HasSuffix predicate on the "ip" field.
func IPHasSuffix(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIP), v))
	})
}

// IPEqualFold applies the EqualFold predicate on the "ip" field.
func IPEqualFold(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIP), v))
	})
}

// IPContainsFold applies the ContainsFold predicate on the "ip" field.
func IPContainsFold(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIP), v))
	})
}

// PortEQ applies the EQ predicate on the "port" field.
func PortEQ(v int) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPort), v))
	})
}

// PortNEQ applies the NEQ predicate on the "port" field.
func PortNEQ(v int) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPort), v))
	})
}

// PortIn applies the In predicate on the "port" field.
func PortIn(vs ...int) predicate.Validation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPort), v...))
	})
}

// PortNotIn applies the NotIn predicate on the "port" field.
func PortNotIn(vs ...int) predicate.Validation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPort), v...))
	})
}

// PortGT applies the GT predicate on the "port" field.
func PortGT(v int) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPort), v))
	})
}

// PortGTE applies the GTE predicate on the "port" field.
func PortGTE(v int) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPort), v))
	})
}

// PortLT applies the LT predicate on the "port" field.
func PortLT(v int) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPort), v))
	})
}

// PortLTE applies the LTE predicate on the "port" field.
func PortLTE(v int) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPort), v))
	})
}

// HostnameEQ applies the EQ predicate on the "hostname" field.
func HostnameEQ(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHostname), v))
	})
}

// HostnameNEQ applies the NEQ predicate on the "hostname" field.
func HostnameNEQ(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHostname), v))
	})
}

// HostnameIn applies the In predicate on the "hostname" field.
func HostnameIn(vs ...string) predicate.Validation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldHostname), v...))
	})
}

// HostnameNotIn applies the NotIn predicate on the "hostname" field.
func HostnameNotIn(vs ...string) predicate.Validation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldHostname), v...))
	})
}

// HostnameGT applies the GT predicate on the "hostname" field.
func HostnameGT(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHostname), v))
	})
}

// HostnameGTE applies the GTE predicate on the "hostname" field.
func HostnameGTE(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHostname), v))
	})
}

// HostnameLT applies the LT predicate on the "hostname" field.
func HostnameLT(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHostname), v))
	})
}

// HostnameLTE applies the LTE predicate on the "hostname" field.
func HostnameLTE(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHostname), v))
	})
}

// HostnameContains applies the Contains predicate on the "hostname" field.
func HostnameContains(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHostname), v))
	})
}

// HostnameHasPrefix applies the HasPrefix predicate on the "hostname" field.
func HostnameHasPrefix(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHostname), v))
	})
}

// HostnameHasSuffix applies the HasSuffix predicate on the "hostname" field.
func HostnameHasSuffix(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHostname), v))
	})
}

// HostnameEqualFold applies the EqualFold predicate on the "hostname" field.
func HostnameEqualFold(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHostname), v))
	})
}

// HostnameContainsFold applies the ContainsFold predicate on the "hostname" field.
func HostnameContainsFold(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHostname), v))
	})
}

// PackageNameEQ applies the EQ predicate on the "package_name" field.
func PackageNameEQ(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPackageName), v))
	})
}

// PackageNameNEQ applies the NEQ predicate on the "package_name" field.
func PackageNameNEQ(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPackageName), v))
	})
}

// PackageNameIn applies the In predicate on the "package_name" field.
func PackageNameIn(vs ...string) predicate.Validation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPackageName), v...))
	})
}

// PackageNameNotIn applies the NotIn predicate on the "package_name" field.
func PackageNameNotIn(vs ...string) predicate.Validation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPackageName), v...))
	})
}

// PackageNameGT applies the GT predicate on the "package_name" field.
func PackageNameGT(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPackageName), v))
	})
}

// PackageNameGTE applies the GTE predicate on the "package_name" field.
func PackageNameGTE(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPackageName), v))
	})
}

// PackageNameLT applies the LT predicate on the "package_name" field.
func PackageNameLT(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPackageName), v))
	})
}

// PackageNameLTE applies the LTE predicate on the "package_name" field.
func PackageNameLTE(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPackageName), v))
	})
}

// PackageNameContains applies the Contains predicate on the "package_name" field.
func PackageNameContains(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPackageName), v))
	})
}

// PackageNameHasPrefix applies the HasPrefix predicate on the "package_name" field.
func PackageNameHasPrefix(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPackageName), v))
	})
}

// PackageNameHasSuffix applies the HasSuffix predicate on the "package_name" field.
func PackageNameHasSuffix(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPackageName), v))
	})
}

// PackageNameEqualFold applies the EqualFold predicate on the "package_name" field.
func PackageNameEqualFold(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPackageName), v))
	})
}

// PackageNameContainsFold applies the ContainsFold predicate on the "package_name" field.
func PackageNameContainsFold(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPackageName), v))
	})
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUsername), v))
	})
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUsername), v))
	})
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.Validation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUsername), v...))
	})
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.Validation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUsername), v...))
	})
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUsername), v))
	})
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUsername), v))
	})
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUsername), v))
	})
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUsername), v))
	})
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUsername), v))
	})
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUsername), v))
	})
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUsername), v))
	})
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUsername), v))
	})
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUsername), v))
	})
}

// GroupNameEQ applies the EQ predicate on the "group_name" field.
func GroupNameEQ(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGroupName), v))
	})
}

// GroupNameNEQ applies the NEQ predicate on the "group_name" field.
func GroupNameNEQ(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGroupName), v))
	})
}

// GroupNameIn applies the In predicate on the "group_name" field.
func GroupNameIn(vs ...string) predicate.Validation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldGroupName), v...))
	})
}

// GroupNameNotIn applies the NotIn predicate on the "group_name" field.
func GroupNameNotIn(vs ...string) predicate.Validation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldGroupName), v...))
	})
}

// GroupNameGT applies the GT predicate on the "group_name" field.
func GroupNameGT(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGroupName), v))
	})
}

// GroupNameGTE applies the GTE predicate on the "group_name" field.
func GroupNameGTE(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGroupName), v))
	})
}

// GroupNameLT applies the LT predicate on the "group_name" field.
func GroupNameLT(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGroupName), v))
	})
}

// GroupNameLTE applies the LTE predicate on the "group_name" field.
func GroupNameLTE(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGroupName), v))
	})
}

// GroupNameContains applies the Contains predicate on the "group_name" field.
func GroupNameContains(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGroupName), v))
	})
}

// GroupNameHasPrefix applies the HasPrefix predicate on the "group_name" field.
func GroupNameHasPrefix(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGroupName), v))
	})
}

// GroupNameHasSuffix applies the HasSuffix predicate on the "group_name" field.
func GroupNameHasSuffix(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGroupName), v))
	})
}

// GroupNameEqualFold applies the EqualFold predicate on the "group_name" field.
func GroupNameEqualFold(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGroupName), v))
	})
}

// GroupNameContainsFold applies the ContainsFold predicate on the "group_name" field.
func GroupNameContainsFold(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGroupName), v))
	})
}

// FilePathEQ applies the EQ predicate on the "file_path" field.
func FilePathEQ(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFilePath), v))
	})
}

// FilePathNEQ applies the NEQ predicate on the "file_path" field.
func FilePathNEQ(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFilePath), v))
	})
}

// FilePathIn applies the In predicate on the "file_path" field.
func FilePathIn(vs ...string) predicate.Validation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFilePath), v...))
	})
}

// FilePathNotIn applies the NotIn predicate on the "file_path" field.
func FilePathNotIn(vs ...string) predicate.Validation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFilePath), v...))
	})
}

// FilePathGT applies the GT predicate on the "file_path" field.
func FilePathGT(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFilePath), v))
	})
}

// FilePathGTE applies the GTE predicate on the "file_path" field.
func FilePathGTE(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFilePath), v))
	})
}

// FilePathLT applies the LT predicate on the "file_path" field.
func FilePathLT(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFilePath), v))
	})
}

// FilePathLTE applies the LTE predicate on the "file_path" field.
func FilePathLTE(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFilePath), v))
	})
}

// FilePathContains applies the Contains predicate on the "file_path" field.
func FilePathContains(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFilePath), v))
	})
}

// FilePathHasPrefix applies the HasPrefix predicate on the "file_path" field.
func FilePathHasPrefix(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFilePath), v))
	})
}

// FilePathHasSuffix applies the HasSuffix predicate on the "file_path" field.
func FilePathHasSuffix(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFilePath), v))
	})
}

// FilePathEqualFold applies the EqualFold predicate on the "file_path" field.
func FilePathEqualFold(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFilePath), v))
	})
}

// FilePathContainsFold applies the ContainsFold predicate on the "file_path" field.
func FilePathContainsFold(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFilePath), v))
	})
}

// SearchStringEQ applies the EQ predicate on the "search_string" field.
func SearchStringEQ(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSearchString), v))
	})
}

// SearchStringNEQ applies the NEQ predicate on the "search_string" field.
func SearchStringNEQ(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSearchString), v))
	})
}

// SearchStringIn applies the In predicate on the "search_string" field.
func SearchStringIn(vs ...string) predicate.Validation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSearchString), v...))
	})
}

// SearchStringNotIn applies the NotIn predicate on the "search_string" field.
func SearchStringNotIn(vs ...string) predicate.Validation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSearchString), v...))
	})
}

// SearchStringGT applies the GT predicate on the "search_string" field.
func SearchStringGT(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSearchString), v))
	})
}

// SearchStringGTE applies the GTE predicate on the "search_string" field.
func SearchStringGTE(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSearchString), v))
	})
}

// SearchStringLT applies the LT predicate on the "search_string" field.
func SearchStringLT(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSearchString), v))
	})
}

// SearchStringLTE applies the LTE predicate on the "search_string" field.
func SearchStringLTE(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSearchString), v))
	})
}

// SearchStringContains applies the Contains predicate on the "search_string" field.
func SearchStringContains(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSearchString), v))
	})
}

// SearchStringHasPrefix applies the HasPrefix predicate on the "search_string" field.
func SearchStringHasPrefix(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSearchString), v))
	})
}

// SearchStringHasSuffix applies the HasSuffix predicate on the "search_string" field.
func SearchStringHasSuffix(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSearchString), v))
	})
}

// SearchStringEqualFold applies the EqualFold predicate on the "search_string" field.
func SearchStringEqualFold(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSearchString), v))
	})
}

// SearchStringContainsFold applies the ContainsFold predicate on the "search_string" field.
func SearchStringContainsFold(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSearchString), v))
	})
}

// ServiceNameEQ applies the EQ predicate on the "service_name" field.
func ServiceNameEQ(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldServiceName), v))
	})
}

// ServiceNameNEQ applies the NEQ predicate on the "service_name" field.
func ServiceNameNEQ(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldServiceName), v))
	})
}

// ServiceNameIn applies the In predicate on the "service_name" field.
func ServiceNameIn(vs ...string) predicate.Validation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldServiceName), v...))
	})
}

// ServiceNameNotIn applies the NotIn predicate on the "service_name" field.
func ServiceNameNotIn(vs ...string) predicate.Validation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldServiceName), v...))
	})
}

// ServiceNameGT applies the GT predicate on the "service_name" field.
func ServiceNameGT(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldServiceName), v))
	})
}

// ServiceNameGTE applies the GTE predicate on the "service_name" field.
func ServiceNameGTE(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldServiceName), v))
	})
}

// ServiceNameLT applies the LT predicate on the "service_name" field.
func ServiceNameLT(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldServiceName), v))
	})
}

// ServiceNameLTE applies the LTE predicate on the "service_name" field.
func ServiceNameLTE(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldServiceName), v))
	})
}

// ServiceNameContains applies the Contains predicate on the "service_name" field.
func ServiceNameContains(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldServiceName), v))
	})
}

// ServiceNameHasPrefix applies the HasPrefix predicate on the "service_name" field.
func ServiceNameHasPrefix(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldServiceName), v))
	})
}

// ServiceNameHasSuffix applies the HasSuffix predicate on the "service_name" field.
func ServiceNameHasSuffix(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldServiceName), v))
	})
}

// ServiceNameEqualFold applies the EqualFold predicate on the "service_name" field.
func ServiceNameEqualFold(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldServiceName), v))
	})
}

// ServiceNameContainsFold applies the ContainsFold predicate on the "service_name" field.
func ServiceNameContainsFold(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldServiceName), v))
	})
}

// ServiceStatusEQ applies the EQ predicate on the "service_status" field.
func ServiceStatusEQ(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldServiceStatus), v))
	})
}

// ServiceStatusNEQ applies the NEQ predicate on the "service_status" field.
func ServiceStatusNEQ(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldServiceStatus), v))
	})
}

// ServiceStatusIn applies the In predicate on the "service_status" field.
func ServiceStatusIn(vs ...string) predicate.Validation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldServiceStatus), v...))
	})
}

// ServiceStatusNotIn applies the NotIn predicate on the "service_status" field.
func ServiceStatusNotIn(vs ...string) predicate.Validation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldServiceStatus), v...))
	})
}

// ServiceStatusGT applies the GT predicate on the "service_status" field.
func ServiceStatusGT(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldServiceStatus), v))
	})
}

// ServiceStatusGTE applies the GTE predicate on the "service_status" field.
func ServiceStatusGTE(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldServiceStatus), v))
	})
}

// ServiceStatusLT applies the LT predicate on the "service_status" field.
func ServiceStatusLT(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldServiceStatus), v))
	})
}

// ServiceStatusLTE applies the LTE predicate on the "service_status" field.
func ServiceStatusLTE(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldServiceStatus), v))
	})
}

// ServiceStatusContains applies the Contains predicate on the "service_status" field.
func ServiceStatusContains(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldServiceStatus), v))
	})
}

// ServiceStatusHasPrefix applies the HasPrefix predicate on the "service_status" field.
func ServiceStatusHasPrefix(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldServiceStatus), v))
	})
}

// ServiceStatusHasSuffix applies the HasSuffix predicate on the "service_status" field.
func ServiceStatusHasSuffix(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldServiceStatus), v))
	})
}

// ServiceStatusEqualFold applies the EqualFold predicate on the "service_status" field.
func ServiceStatusEqualFold(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldServiceStatus), v))
	})
}

// ServiceStatusContainsFold applies the ContainsFold predicate on the "service_status" field.
func ServiceStatusContainsFold(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldServiceStatus), v))
	})
}

// ProcessNameEQ applies the EQ predicate on the "process_name" field.
func ProcessNameEQ(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProcessName), v))
	})
}

// ProcessNameNEQ applies the NEQ predicate on the "process_name" field.
func ProcessNameNEQ(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProcessName), v))
	})
}

// ProcessNameIn applies the In predicate on the "process_name" field.
func ProcessNameIn(vs ...string) predicate.Validation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldProcessName), v...))
	})
}

// ProcessNameNotIn applies the NotIn predicate on the "process_name" field.
func ProcessNameNotIn(vs ...string) predicate.Validation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldProcessName), v...))
	})
}

// ProcessNameGT applies the GT predicate on the "process_name" field.
func ProcessNameGT(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProcessName), v))
	})
}

// ProcessNameGTE applies the GTE predicate on the "process_name" field.
func ProcessNameGTE(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProcessName), v))
	})
}

// ProcessNameLT applies the LT predicate on the "process_name" field.
func ProcessNameLT(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProcessName), v))
	})
}

// ProcessNameLTE applies the LTE predicate on the "process_name" field.
func ProcessNameLTE(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProcessName), v))
	})
}

// ProcessNameContains applies the Contains predicate on the "process_name" field.
func ProcessNameContains(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProcessName), v))
	})
}

// ProcessNameHasPrefix applies the HasPrefix predicate on the "process_name" field.
func ProcessNameHasPrefix(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProcessName), v))
	})
}

// ProcessNameHasSuffix applies the HasSuffix predicate on the "process_name" field.
func ProcessNameHasSuffix(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProcessName), v))
	})
}

// ProcessNameEqualFold applies the EqualFold predicate on the "process_name" field.
func ProcessNameEqualFold(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProcessName), v))
	})
}

// ProcessNameContainsFold applies the ContainsFold predicate on the "process_name" field.
func ProcessNameContainsFold(v string) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProcessName), v))
	})
}

// HasValidationToAgentTask applies the HasEdge predicate on the "ValidationToAgentTask" edge.
func HasValidationToAgentTask() predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ValidationToAgentTaskTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ValidationToAgentTaskTable, ValidationToAgentTaskColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasValidationToAgentTaskWith applies the HasEdge predicate on the "ValidationToAgentTask" edge with a given conditions (other predicates).
func HasValidationToAgentTaskWith(preds ...predicate.AgentTask) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ValidationToAgentTaskInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ValidationToAgentTaskTable, ValidationToAgentTaskColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasValidationToScript applies the HasEdge predicate on the "ValidationToScript" edge.
func HasValidationToScript() predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ValidationToScriptTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ValidationToScriptTable, ValidationToScriptColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasValidationToScriptWith applies the HasEdge predicate on the "ValidationToScript" edge with a given conditions (other predicates).
func HasValidationToScriptWith(preds ...predicate.Script) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ValidationToScriptInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ValidationToScriptTable, ValidationToScriptColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasValidationToEnvironment applies the HasEdge predicate on the "ValidationToEnvironment" edge.
func HasValidationToEnvironment() predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ValidationToEnvironmentTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ValidationToEnvironmentTable, ValidationToEnvironmentPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasValidationToEnvironmentWith applies the HasEdge predicate on the "ValidationToEnvironment" edge with a given conditions (other predicates).
func HasValidationToEnvironmentWith(preds ...predicate.Environment) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ValidationToEnvironmentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ValidationToEnvironmentTable, ValidationToEnvironmentPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Validation) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Validation) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Validation) predicate.Validation {
	return predicate.Validation(func(s *sql.Selector) {
		p(s.Not())
	})
}
