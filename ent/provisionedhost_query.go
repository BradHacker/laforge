// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/agentstatus"
	"github.com/gen0cide/laforge/ent/agenttask"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/ginfilemiddleware"
	"github.com/gen0cide/laforge/ent/host"
	"github.com/gen0cide/laforge/ent/plan"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/provisionedhost"
	"github.com/gen0cide/laforge/ent/provisionednetwork"
	"github.com/gen0cide/laforge/ent/provisioningstep"
	"github.com/gen0cide/laforge/ent/status"
	"github.com/google/uuid"
)

// ProvisionedHostQuery is the builder for querying ProvisionedHost entities.
type ProvisionedHostQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.ProvisionedHost
	// eager-loading edges.
	withProvisionedHostToStatus             *StatusQuery
	withProvisionedHostToProvisionedNetwork *ProvisionedNetworkQuery
	withProvisionedHostToHost               *HostQuery
	withProvisionedHostToEndStepPlan        *PlanQuery
	withProvisionedHostToBuild              *BuildQuery
	withProvisionedHostToProvisioningStep   *ProvisioningStepQuery
	withProvisionedHostToAgentStatus        *AgentStatusQuery
	withProvisionedHostToAgentTask          *AgentTaskQuery
	withProvisionedHostToPlan               *PlanQuery
	withProvisionedHostToGinFileMiddleware  *GinFileMiddlewareQuery
	withFKs                                 bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ProvisionedHostQuery builder.
func (phq *ProvisionedHostQuery) Where(ps ...predicate.ProvisionedHost) *ProvisionedHostQuery {
	phq.predicates = append(phq.predicates, ps...)
	return phq
}

// Limit adds a limit step to the query.
func (phq *ProvisionedHostQuery) Limit(limit int) *ProvisionedHostQuery {
	phq.limit = &limit
	return phq
}

// Offset adds an offset step to the query.
func (phq *ProvisionedHostQuery) Offset(offset int) *ProvisionedHostQuery {
	phq.offset = &offset
	return phq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (phq *ProvisionedHostQuery) Unique(unique bool) *ProvisionedHostQuery {
	phq.unique = &unique
	return phq
}

// Order adds an order step to the query.
func (phq *ProvisionedHostQuery) Order(o ...OrderFunc) *ProvisionedHostQuery {
	phq.order = append(phq.order, o...)
	return phq
}

// QueryProvisionedHostToStatus chains the current query on the "ProvisionedHostToStatus" edge.
func (phq *ProvisionedHostQuery) QueryProvisionedHostToStatus() *StatusQuery {
	query := &StatusQuery{config: phq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := phq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := phq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisionedhost.Table, provisionedhost.FieldID, selector),
			sqlgraph.To(status.Table, status.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, provisionedhost.ProvisionedHostToStatusTable, provisionedhost.ProvisionedHostToStatusColumn),
		)
		fromU = sqlgraph.SetNeighbors(phq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisionedHostToProvisionedNetwork chains the current query on the "ProvisionedHostToProvisionedNetwork" edge.
func (phq *ProvisionedHostQuery) QueryProvisionedHostToProvisionedNetwork() *ProvisionedNetworkQuery {
	query := &ProvisionedNetworkQuery{config: phq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := phq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := phq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisionedhost.Table, provisionedhost.FieldID, selector),
			sqlgraph.To(provisionednetwork.Table, provisionednetwork.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, provisionedhost.ProvisionedHostToProvisionedNetworkTable, provisionedhost.ProvisionedHostToProvisionedNetworkColumn),
		)
		fromU = sqlgraph.SetNeighbors(phq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisionedHostToHost chains the current query on the "ProvisionedHostToHost" edge.
func (phq *ProvisionedHostQuery) QueryProvisionedHostToHost() *HostQuery {
	query := &HostQuery{config: phq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := phq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := phq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisionedhost.Table, provisionedhost.FieldID, selector),
			sqlgraph.To(host.Table, host.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, provisionedhost.ProvisionedHostToHostTable, provisionedhost.ProvisionedHostToHostColumn),
		)
		fromU = sqlgraph.SetNeighbors(phq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisionedHostToEndStepPlan chains the current query on the "ProvisionedHostToEndStepPlan" edge.
func (phq *ProvisionedHostQuery) QueryProvisionedHostToEndStepPlan() *PlanQuery {
	query := &PlanQuery{config: phq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := phq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := phq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisionedhost.Table, provisionedhost.FieldID, selector),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, provisionedhost.ProvisionedHostToEndStepPlanTable, provisionedhost.ProvisionedHostToEndStepPlanColumn),
		)
		fromU = sqlgraph.SetNeighbors(phq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisionedHostToBuild chains the current query on the "ProvisionedHostToBuild" edge.
func (phq *ProvisionedHostQuery) QueryProvisionedHostToBuild() *BuildQuery {
	query := &BuildQuery{config: phq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := phq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := phq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisionedhost.Table, provisionedhost.FieldID, selector),
			sqlgraph.To(build.Table, build.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, provisionedhost.ProvisionedHostToBuildTable, provisionedhost.ProvisionedHostToBuildColumn),
		)
		fromU = sqlgraph.SetNeighbors(phq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisionedHostToProvisioningStep chains the current query on the "ProvisionedHostToProvisioningStep" edge.
func (phq *ProvisionedHostQuery) QueryProvisionedHostToProvisioningStep() *ProvisioningStepQuery {
	query := &ProvisioningStepQuery{config: phq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := phq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := phq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisionedhost.Table, provisionedhost.FieldID, selector),
			sqlgraph.To(provisioningstep.Table, provisioningstep.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, provisionedhost.ProvisionedHostToProvisioningStepTable, provisionedhost.ProvisionedHostToProvisioningStepColumn),
		)
		fromU = sqlgraph.SetNeighbors(phq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisionedHostToAgentStatus chains the current query on the "ProvisionedHostToAgentStatus" edge.
func (phq *ProvisionedHostQuery) QueryProvisionedHostToAgentStatus() *AgentStatusQuery {
	query := &AgentStatusQuery{config: phq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := phq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := phq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisionedhost.Table, provisionedhost.FieldID, selector),
			sqlgraph.To(agentstatus.Table, agentstatus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, provisionedhost.ProvisionedHostToAgentStatusTable, provisionedhost.ProvisionedHostToAgentStatusColumn),
		)
		fromU = sqlgraph.SetNeighbors(phq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisionedHostToAgentTask chains the current query on the "ProvisionedHostToAgentTask" edge.
func (phq *ProvisionedHostQuery) QueryProvisionedHostToAgentTask() *AgentTaskQuery {
	query := &AgentTaskQuery{config: phq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := phq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := phq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisionedhost.Table, provisionedhost.FieldID, selector),
			sqlgraph.To(agenttask.Table, agenttask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, provisionedhost.ProvisionedHostToAgentTaskTable, provisionedhost.ProvisionedHostToAgentTaskColumn),
		)
		fromU = sqlgraph.SetNeighbors(phq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisionedHostToPlan chains the current query on the "ProvisionedHostToPlan" edge.
func (phq *ProvisionedHostQuery) QueryProvisionedHostToPlan() *PlanQuery {
	query := &PlanQuery{config: phq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := phq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := phq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisionedhost.Table, provisionedhost.FieldID, selector),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, provisionedhost.ProvisionedHostToPlanTable, provisionedhost.ProvisionedHostToPlanColumn),
		)
		fromU = sqlgraph.SetNeighbors(phq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisionedHostToGinFileMiddleware chains the current query on the "ProvisionedHostToGinFileMiddleware" edge.
func (phq *ProvisionedHostQuery) QueryProvisionedHostToGinFileMiddleware() *GinFileMiddlewareQuery {
	query := &GinFileMiddlewareQuery{config: phq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := phq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := phq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisionedhost.Table, provisionedhost.FieldID, selector),
			sqlgraph.To(ginfilemiddleware.Table, ginfilemiddleware.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, provisionedhost.ProvisionedHostToGinFileMiddlewareTable, provisionedhost.ProvisionedHostToGinFileMiddlewareColumn),
		)
		fromU = sqlgraph.SetNeighbors(phq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ProvisionedHost entity from the query.
// Returns a *NotFoundError when no ProvisionedHost was found.
func (phq *ProvisionedHostQuery) First(ctx context.Context) (*ProvisionedHost, error) {
	nodes, err := phq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{provisionedhost.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (phq *ProvisionedHostQuery) FirstX(ctx context.Context) *ProvisionedHost {
	node, err := phq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ProvisionedHost ID from the query.
// Returns a *NotFoundError when no ProvisionedHost ID was found.
func (phq *ProvisionedHostQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = phq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{provisionedhost.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (phq *ProvisionedHostQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := phq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ProvisionedHost entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ProvisionedHost entity is found.
// Returns a *NotFoundError when no ProvisionedHost entities are found.
func (phq *ProvisionedHostQuery) Only(ctx context.Context) (*ProvisionedHost, error) {
	nodes, err := phq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{provisionedhost.Label}
	default:
		return nil, &NotSingularError{provisionedhost.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (phq *ProvisionedHostQuery) OnlyX(ctx context.Context) *ProvisionedHost {
	node, err := phq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ProvisionedHost ID in the query.
// Returns a *NotSingularError when more than one ProvisionedHost ID is found.
// Returns a *NotFoundError when no entities are found.
func (phq *ProvisionedHostQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = phq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{provisionedhost.Label}
	default:
		err = &NotSingularError{provisionedhost.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (phq *ProvisionedHostQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := phq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ProvisionedHosts.
func (phq *ProvisionedHostQuery) All(ctx context.Context) ([]*ProvisionedHost, error) {
	if err := phq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return phq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (phq *ProvisionedHostQuery) AllX(ctx context.Context) []*ProvisionedHost {
	nodes, err := phq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ProvisionedHost IDs.
func (phq *ProvisionedHostQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := phq.Select(provisionedhost.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (phq *ProvisionedHostQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := phq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (phq *ProvisionedHostQuery) Count(ctx context.Context) (int, error) {
	if err := phq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return phq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (phq *ProvisionedHostQuery) CountX(ctx context.Context) int {
	count, err := phq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (phq *ProvisionedHostQuery) Exist(ctx context.Context) (bool, error) {
	if err := phq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return phq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (phq *ProvisionedHostQuery) ExistX(ctx context.Context) bool {
	exist, err := phq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ProvisionedHostQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (phq *ProvisionedHostQuery) Clone() *ProvisionedHostQuery {
	if phq == nil {
		return nil
	}
	return &ProvisionedHostQuery{
		config:                                  phq.config,
		limit:                                   phq.limit,
		offset:                                  phq.offset,
		order:                                   append([]OrderFunc{}, phq.order...),
		predicates:                              append([]predicate.ProvisionedHost{}, phq.predicates...),
		withProvisionedHostToStatus:             phq.withProvisionedHostToStatus.Clone(),
		withProvisionedHostToProvisionedNetwork: phq.withProvisionedHostToProvisionedNetwork.Clone(),
		withProvisionedHostToHost:               phq.withProvisionedHostToHost.Clone(),
		withProvisionedHostToEndStepPlan:        phq.withProvisionedHostToEndStepPlan.Clone(),
		withProvisionedHostToBuild:              phq.withProvisionedHostToBuild.Clone(),
		withProvisionedHostToProvisioningStep:   phq.withProvisionedHostToProvisioningStep.Clone(),
		withProvisionedHostToAgentStatus:        phq.withProvisionedHostToAgentStatus.Clone(),
		withProvisionedHostToAgentTask:          phq.withProvisionedHostToAgentTask.Clone(),
		withProvisionedHostToPlan:               phq.withProvisionedHostToPlan.Clone(),
		withProvisionedHostToGinFileMiddleware:  phq.withProvisionedHostToGinFileMiddleware.Clone(),
		// clone intermediate query.
		sql:    phq.sql.Clone(),
		path:   phq.path,
		unique: phq.unique,
	}
}

// WithProvisionedHostToStatus tells the query-builder to eager-load the nodes that are connected to
// the "ProvisionedHostToStatus" edge. The optional arguments are used to configure the query builder of the edge.
func (phq *ProvisionedHostQuery) WithProvisionedHostToStatus(opts ...func(*StatusQuery)) *ProvisionedHostQuery {
	query := &StatusQuery{config: phq.config}
	for _, opt := range opts {
		opt(query)
	}
	phq.withProvisionedHostToStatus = query
	return phq
}

// WithProvisionedHostToProvisionedNetwork tells the query-builder to eager-load the nodes that are connected to
// the "ProvisionedHostToProvisionedNetwork" edge. The optional arguments are used to configure the query builder of the edge.
func (phq *ProvisionedHostQuery) WithProvisionedHostToProvisionedNetwork(opts ...func(*ProvisionedNetworkQuery)) *ProvisionedHostQuery {
	query := &ProvisionedNetworkQuery{config: phq.config}
	for _, opt := range opts {
		opt(query)
	}
	phq.withProvisionedHostToProvisionedNetwork = query
	return phq
}

// WithProvisionedHostToHost tells the query-builder to eager-load the nodes that are connected to
// the "ProvisionedHostToHost" edge. The optional arguments are used to configure the query builder of the edge.
func (phq *ProvisionedHostQuery) WithProvisionedHostToHost(opts ...func(*HostQuery)) *ProvisionedHostQuery {
	query := &HostQuery{config: phq.config}
	for _, opt := range opts {
		opt(query)
	}
	phq.withProvisionedHostToHost = query
	return phq
}

// WithProvisionedHostToEndStepPlan tells the query-builder to eager-load the nodes that are connected to
// the "ProvisionedHostToEndStepPlan" edge. The optional arguments are used to configure the query builder of the edge.
func (phq *ProvisionedHostQuery) WithProvisionedHostToEndStepPlan(opts ...func(*PlanQuery)) *ProvisionedHostQuery {
	query := &PlanQuery{config: phq.config}
	for _, opt := range opts {
		opt(query)
	}
	phq.withProvisionedHostToEndStepPlan = query
	return phq
}

// WithProvisionedHostToBuild tells the query-builder to eager-load the nodes that are connected to
// the "ProvisionedHostToBuild" edge. The optional arguments are used to configure the query builder of the edge.
func (phq *ProvisionedHostQuery) WithProvisionedHostToBuild(opts ...func(*BuildQuery)) *ProvisionedHostQuery {
	query := &BuildQuery{config: phq.config}
	for _, opt := range opts {
		opt(query)
	}
	phq.withProvisionedHostToBuild = query
	return phq
}

// WithProvisionedHostToProvisioningStep tells the query-builder to eager-load the nodes that are connected to
// the "ProvisionedHostToProvisioningStep" edge. The optional arguments are used to configure the query builder of the edge.
func (phq *ProvisionedHostQuery) WithProvisionedHostToProvisioningStep(opts ...func(*ProvisioningStepQuery)) *ProvisionedHostQuery {
	query := &ProvisioningStepQuery{config: phq.config}
	for _, opt := range opts {
		opt(query)
	}
	phq.withProvisionedHostToProvisioningStep = query
	return phq
}

// WithProvisionedHostToAgentStatus tells the query-builder to eager-load the nodes that are connected to
// the "ProvisionedHostToAgentStatus" edge. The optional arguments are used to configure the query builder of the edge.
func (phq *ProvisionedHostQuery) WithProvisionedHostToAgentStatus(opts ...func(*AgentStatusQuery)) *ProvisionedHostQuery {
	query := &AgentStatusQuery{config: phq.config}
	for _, opt := range opts {
		opt(query)
	}
	phq.withProvisionedHostToAgentStatus = query
	return phq
}

// WithProvisionedHostToAgentTask tells the query-builder to eager-load the nodes that are connected to
// the "ProvisionedHostToAgentTask" edge. The optional arguments are used to configure the query builder of the edge.
func (phq *ProvisionedHostQuery) WithProvisionedHostToAgentTask(opts ...func(*AgentTaskQuery)) *ProvisionedHostQuery {
	query := &AgentTaskQuery{config: phq.config}
	for _, opt := range opts {
		opt(query)
	}
	phq.withProvisionedHostToAgentTask = query
	return phq
}

// WithProvisionedHostToPlan tells the query-builder to eager-load the nodes that are connected to
// the "ProvisionedHostToPlan" edge. The optional arguments are used to configure the query builder of the edge.
func (phq *ProvisionedHostQuery) WithProvisionedHostToPlan(opts ...func(*PlanQuery)) *ProvisionedHostQuery {
	query := &PlanQuery{config: phq.config}
	for _, opt := range opts {
		opt(query)
	}
	phq.withProvisionedHostToPlan = query
	return phq
}

// WithProvisionedHostToGinFileMiddleware tells the query-builder to eager-load the nodes that are connected to
// the "ProvisionedHostToGinFileMiddleware" edge. The optional arguments are used to configure the query builder of the edge.
func (phq *ProvisionedHostQuery) WithProvisionedHostToGinFileMiddleware(opts ...func(*GinFileMiddlewareQuery)) *ProvisionedHostQuery {
	query := &GinFileMiddlewareQuery{config: phq.config}
	for _, opt := range opts {
		opt(query)
	}
	phq.withProvisionedHostToGinFileMiddleware = query
	return phq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		SubnetIP string `json:"subnet_ip,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ProvisionedHost.Query().
//		GroupBy(provisionedhost.FieldSubnetIP).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (phq *ProvisionedHostQuery) GroupBy(field string, fields ...string) *ProvisionedHostGroupBy {
	group := &ProvisionedHostGroupBy{config: phq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := phq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return phq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		SubnetIP string `json:"subnet_ip,omitempty"`
//	}
//
//	client.ProvisionedHost.Query().
//		Select(provisionedhost.FieldSubnetIP).
//		Scan(ctx, &v)
//
func (phq *ProvisionedHostQuery) Select(fields ...string) *ProvisionedHostSelect {
	phq.fields = append(phq.fields, fields...)
	return &ProvisionedHostSelect{ProvisionedHostQuery: phq}
}

func (phq *ProvisionedHostQuery) prepareQuery(ctx context.Context) error {
	for _, f := range phq.fields {
		if !provisionedhost.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if phq.path != nil {
		prev, err := phq.path(ctx)
		if err != nil {
			return err
		}
		phq.sql = prev
	}
	return nil
}

func (phq *ProvisionedHostQuery) sqlAll(ctx context.Context) ([]*ProvisionedHost, error) {
	var (
		nodes       = []*ProvisionedHost{}
		withFKs     = phq.withFKs
		_spec       = phq.querySpec()
		loadedTypes = [10]bool{
			phq.withProvisionedHostToStatus != nil,
			phq.withProvisionedHostToProvisionedNetwork != nil,
			phq.withProvisionedHostToHost != nil,
			phq.withProvisionedHostToEndStepPlan != nil,
			phq.withProvisionedHostToBuild != nil,
			phq.withProvisionedHostToProvisioningStep != nil,
			phq.withProvisionedHostToAgentStatus != nil,
			phq.withProvisionedHostToAgentTask != nil,
			phq.withProvisionedHostToPlan != nil,
			phq.withProvisionedHostToGinFileMiddleware != nil,
		}
	)
	if phq.withProvisionedHostToProvisionedNetwork != nil || phq.withProvisionedHostToHost != nil || phq.withProvisionedHostToEndStepPlan != nil || phq.withProvisionedHostToBuild != nil || phq.withProvisionedHostToPlan != nil || phq.withProvisionedHostToGinFileMiddleware != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, provisionedhost.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &ProvisionedHost{config: phq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, phq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := phq.withProvisionedHostToStatus; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[uuid.UUID]*ProvisionedHost)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.Status(func(s *sql.Selector) {
			s.Where(sql.InValues(provisionedhost.ProvisionedHostToStatusColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.provisioned_host_provisioned_host_to_status
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "provisioned_host_provisioned_host_to_status" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "provisioned_host_provisioned_host_to_status" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.ProvisionedHostToStatus = n
		}
	}

	if query := phq.withProvisionedHostToProvisionedNetwork; query != nil {
		ids := make([]uuid.UUID, 0, len(nodes))
		nodeids := make(map[uuid.UUID][]*ProvisionedHost)
		for i := range nodes {
			if nodes[i].provisioned_host_provisioned_host_to_provisioned_network == nil {
				continue
			}
			fk := *nodes[i].provisioned_host_provisioned_host_to_provisioned_network
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(provisionednetwork.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "provisioned_host_provisioned_host_to_provisioned_network" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.ProvisionedHostToProvisionedNetwork = n
			}
		}
	}

	if query := phq.withProvisionedHostToHost; query != nil {
		ids := make([]uuid.UUID, 0, len(nodes))
		nodeids := make(map[uuid.UUID][]*ProvisionedHost)
		for i := range nodes {
			if nodes[i].provisioned_host_provisioned_host_to_host == nil {
				continue
			}
			fk := *nodes[i].provisioned_host_provisioned_host_to_host
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(host.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "provisioned_host_provisioned_host_to_host" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.ProvisionedHostToHost = n
			}
		}
	}

	if query := phq.withProvisionedHostToEndStepPlan; query != nil {
		ids := make([]uuid.UUID, 0, len(nodes))
		nodeids := make(map[uuid.UUID][]*ProvisionedHost)
		for i := range nodes {
			if nodes[i].provisioned_host_provisioned_host_to_end_step_plan == nil {
				continue
			}
			fk := *nodes[i].provisioned_host_provisioned_host_to_end_step_plan
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(plan.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "provisioned_host_provisioned_host_to_end_step_plan" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.ProvisionedHostToEndStepPlan = n
			}
		}
	}

	if query := phq.withProvisionedHostToBuild; query != nil {
		ids := make([]uuid.UUID, 0, len(nodes))
		nodeids := make(map[uuid.UUID][]*ProvisionedHost)
		for i := range nodes {
			if nodes[i].provisioned_host_provisioned_host_to_build == nil {
				continue
			}
			fk := *nodes[i].provisioned_host_provisioned_host_to_build
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(build.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "provisioned_host_provisioned_host_to_build" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.ProvisionedHostToBuild = n
			}
		}
	}

	if query := phq.withProvisionedHostToProvisioningStep; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[uuid.UUID]*ProvisionedHost)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ProvisionedHostToProvisioningStep = []*ProvisioningStep{}
		}
		query.withFKs = true
		query.Where(predicate.ProvisioningStep(func(s *sql.Selector) {
			s.Where(sql.InValues(provisionedhost.ProvisionedHostToProvisioningStepColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.provisioning_step_provisioning_step_to_provisioned_host
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "provisioning_step_provisioning_step_to_provisioned_host" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "provisioning_step_provisioning_step_to_provisioned_host" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.ProvisionedHostToProvisioningStep = append(node.Edges.ProvisionedHostToProvisioningStep, n)
		}
	}

	if query := phq.withProvisionedHostToAgentStatus; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[uuid.UUID]*ProvisionedHost)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ProvisionedHostToAgentStatus = []*AgentStatus{}
		}
		query.withFKs = true
		query.Where(predicate.AgentStatus(func(s *sql.Selector) {
			s.Where(sql.InValues(provisionedhost.ProvisionedHostToAgentStatusColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.agent_status_agent_status_to_provisioned_host
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "agent_status_agent_status_to_provisioned_host" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "agent_status_agent_status_to_provisioned_host" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.ProvisionedHostToAgentStatus = append(node.Edges.ProvisionedHostToAgentStatus, n)
		}
	}

	if query := phq.withProvisionedHostToAgentTask; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[uuid.UUID]*ProvisionedHost)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ProvisionedHostToAgentTask = []*AgentTask{}
		}
		query.withFKs = true
		query.Where(predicate.AgentTask(func(s *sql.Selector) {
			s.Where(sql.InValues(provisionedhost.ProvisionedHostToAgentTaskColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.agent_task_agent_task_to_provisioned_host
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "agent_task_agent_task_to_provisioned_host" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "agent_task_agent_task_to_provisioned_host" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.ProvisionedHostToAgentTask = append(node.Edges.ProvisionedHostToAgentTask, n)
		}
	}

	if query := phq.withProvisionedHostToPlan; query != nil {
		ids := make([]uuid.UUID, 0, len(nodes))
		nodeids := make(map[uuid.UUID][]*ProvisionedHost)
		for i := range nodes {
			if nodes[i].plan_plan_to_provisioned_host == nil {
				continue
			}
			fk := *nodes[i].plan_plan_to_provisioned_host
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(plan.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "plan_plan_to_provisioned_host" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.ProvisionedHostToPlan = n
			}
		}
	}

	if query := phq.withProvisionedHostToGinFileMiddleware; query != nil {
		ids := make([]uuid.UUID, 0, len(nodes))
		nodeids := make(map[uuid.UUID][]*ProvisionedHost)
		for i := range nodes {
			if nodes[i].gin_file_middleware_gin_file_middleware_to_provisioned_host == nil {
				continue
			}
			fk := *nodes[i].gin_file_middleware_gin_file_middleware_to_provisioned_host
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(ginfilemiddleware.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "gin_file_middleware_gin_file_middleware_to_provisioned_host" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.ProvisionedHostToGinFileMiddleware = n
			}
		}
	}

	return nodes, nil
}

func (phq *ProvisionedHostQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := phq.querySpec()
	_spec.Node.Columns = phq.fields
	if len(phq.fields) > 0 {
		_spec.Unique = phq.unique != nil && *phq.unique
	}
	return sqlgraph.CountNodes(ctx, phq.driver, _spec)
}

func (phq *ProvisionedHostQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := phq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (phq *ProvisionedHostQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   provisionedhost.Table,
			Columns: provisionedhost.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: provisionedhost.FieldID,
			},
		},
		From:   phq.sql,
		Unique: true,
	}
	if unique := phq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := phq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, provisionedhost.FieldID)
		for i := range fields {
			if fields[i] != provisionedhost.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := phq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := phq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := phq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := phq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (phq *ProvisionedHostQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(phq.driver.Dialect())
	t1 := builder.Table(provisionedhost.Table)
	columns := phq.fields
	if len(columns) == 0 {
		columns = provisionedhost.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if phq.sql != nil {
		selector = phq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if phq.unique != nil && *phq.unique {
		selector.Distinct()
	}
	for _, p := range phq.predicates {
		p(selector)
	}
	for _, p := range phq.order {
		p(selector)
	}
	if offset := phq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := phq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ProvisionedHostGroupBy is the group-by builder for ProvisionedHost entities.
type ProvisionedHostGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (phgb *ProvisionedHostGroupBy) Aggregate(fns ...AggregateFunc) *ProvisionedHostGroupBy {
	phgb.fns = append(phgb.fns, fns...)
	return phgb
}

// Scan applies the group-by query and scans the result into the given value.
func (phgb *ProvisionedHostGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := phgb.path(ctx)
	if err != nil {
		return err
	}
	phgb.sql = query
	return phgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (phgb *ProvisionedHostGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := phgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (phgb *ProvisionedHostGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(phgb.fields) > 1 {
		return nil, errors.New("ent: ProvisionedHostGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := phgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (phgb *ProvisionedHostGroupBy) StringsX(ctx context.Context) []string {
	v, err := phgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (phgb *ProvisionedHostGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = phgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{provisionedhost.Label}
	default:
		err = fmt.Errorf("ent: ProvisionedHostGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (phgb *ProvisionedHostGroupBy) StringX(ctx context.Context) string {
	v, err := phgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (phgb *ProvisionedHostGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(phgb.fields) > 1 {
		return nil, errors.New("ent: ProvisionedHostGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := phgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (phgb *ProvisionedHostGroupBy) IntsX(ctx context.Context) []int {
	v, err := phgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (phgb *ProvisionedHostGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = phgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{provisionedhost.Label}
	default:
		err = fmt.Errorf("ent: ProvisionedHostGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (phgb *ProvisionedHostGroupBy) IntX(ctx context.Context) int {
	v, err := phgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (phgb *ProvisionedHostGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(phgb.fields) > 1 {
		return nil, errors.New("ent: ProvisionedHostGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := phgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (phgb *ProvisionedHostGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := phgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (phgb *ProvisionedHostGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = phgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{provisionedhost.Label}
	default:
		err = fmt.Errorf("ent: ProvisionedHostGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (phgb *ProvisionedHostGroupBy) Float64X(ctx context.Context) float64 {
	v, err := phgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (phgb *ProvisionedHostGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(phgb.fields) > 1 {
		return nil, errors.New("ent: ProvisionedHostGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := phgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (phgb *ProvisionedHostGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := phgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (phgb *ProvisionedHostGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = phgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{provisionedhost.Label}
	default:
		err = fmt.Errorf("ent: ProvisionedHostGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (phgb *ProvisionedHostGroupBy) BoolX(ctx context.Context) bool {
	v, err := phgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (phgb *ProvisionedHostGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range phgb.fields {
		if !provisionedhost.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := phgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := phgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (phgb *ProvisionedHostGroupBy) sqlQuery() *sql.Selector {
	selector := phgb.sql.Select()
	aggregation := make([]string, 0, len(phgb.fns))
	for _, fn := range phgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(phgb.fields)+len(phgb.fns))
		for _, f := range phgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(phgb.fields...)...)
}

// ProvisionedHostSelect is the builder for selecting fields of ProvisionedHost entities.
type ProvisionedHostSelect struct {
	*ProvisionedHostQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (phs *ProvisionedHostSelect) Scan(ctx context.Context, v interface{}) error {
	if err := phs.prepareQuery(ctx); err != nil {
		return err
	}
	phs.sql = phs.ProvisionedHostQuery.sqlQuery(ctx)
	return phs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (phs *ProvisionedHostSelect) ScanX(ctx context.Context, v interface{}) {
	if err := phs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (phs *ProvisionedHostSelect) Strings(ctx context.Context) ([]string, error) {
	if len(phs.fields) > 1 {
		return nil, errors.New("ent: ProvisionedHostSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := phs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (phs *ProvisionedHostSelect) StringsX(ctx context.Context) []string {
	v, err := phs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (phs *ProvisionedHostSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = phs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{provisionedhost.Label}
	default:
		err = fmt.Errorf("ent: ProvisionedHostSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (phs *ProvisionedHostSelect) StringX(ctx context.Context) string {
	v, err := phs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (phs *ProvisionedHostSelect) Ints(ctx context.Context) ([]int, error) {
	if len(phs.fields) > 1 {
		return nil, errors.New("ent: ProvisionedHostSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := phs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (phs *ProvisionedHostSelect) IntsX(ctx context.Context) []int {
	v, err := phs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (phs *ProvisionedHostSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = phs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{provisionedhost.Label}
	default:
		err = fmt.Errorf("ent: ProvisionedHostSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (phs *ProvisionedHostSelect) IntX(ctx context.Context) int {
	v, err := phs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (phs *ProvisionedHostSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(phs.fields) > 1 {
		return nil, errors.New("ent: ProvisionedHostSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := phs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (phs *ProvisionedHostSelect) Float64sX(ctx context.Context) []float64 {
	v, err := phs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (phs *ProvisionedHostSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = phs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{provisionedhost.Label}
	default:
		err = fmt.Errorf("ent: ProvisionedHostSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (phs *ProvisionedHostSelect) Float64X(ctx context.Context) float64 {
	v, err := phs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (phs *ProvisionedHostSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(phs.fields) > 1 {
		return nil, errors.New("ent: ProvisionedHostSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := phs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (phs *ProvisionedHostSelect) BoolsX(ctx context.Context) []bool {
	v, err := phs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (phs *ProvisionedHostSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = phs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{provisionedhost.Label}
	default:
		err = fmt.Errorf("ent: ProvisionedHostSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (phs *ProvisionedHostSelect) BoolX(ctx context.Context) bool {
	v, err := phs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (phs *ProvisionedHostSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := phs.sql.Query()
	if err := phs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
