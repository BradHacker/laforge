// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/validation"
	"github.com/google/uuid"
)

// Validation is the model entity for the Validation schema.
type Validation struct {
	config ` json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// HCLID holds the value of the "hcl_id" field.
	HCLID string `json:"hcl_id,omitempty" hcl:"id,label"`
	// ValidationType holds the value of the "validation_type" field.
	ValidationType validation.ValidationType `json:"validation_type,omitempty" hcl:"validation_type"`
	// Hash holds the value of the "hash" field.
	Hash string `json:"hash,omitempty" hcl:"hash,optional"`
	// Regex holds the value of the "regex" field.
	Regex string `json:"regex,omitempty" hcl:"regex,optional"`
	// IP holds the value of the "ip" field.
	IP string `json:"ip,omitempty" hcl:"ip,optional"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty" hcl:"url,optional"`
	// Port holds the value of the "port" field.
	Port int `json:"port,omitempty" hcl:"port,optional"`
	// Hostname holds the value of the "hostname" field.
	Hostname string `json:"hostname,omitempty" hcl:"hostname,optional"`
	// Nameservers holds the value of the "nameservers" field.
	Nameservers []string `json:"nameservers,omitempty" hcl:"nameservers,optional"`
	// PackageName holds the value of the "package_name" field.
	PackageName string `json:"package_name,omitempty" hcl:"package_name,optional"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty" hcl:"username,optional"`
	// GroupName holds the value of the "group_name" field.
	GroupName string `json:"group_name,omitempty" hcl:"group_name,optional"`
	// FilePath holds the value of the "file_path" field.
	FilePath string `json:"file_path,omitempty" hcl:"file_path,optional"`
	// SearchString holds the value of the "search_string" field.
	SearchString string `json:"search_string,omitempty" hcl:"search_string,optional"`
	// ServiceName holds the value of the "service_name" field.
	ServiceName string `json:"service_name,omitempty" hcl:"service_name,optional"`
	// FilePermission holds the value of the "file_permission" field.
	FilePermission string `json:"file_permission,omitempty" hcl:"file_permission,optional"`
	// ServiceStatus holds the value of the "service_status" field.
	ServiceStatus validation.ServiceStatus `json:"service_status,omitempty" hcl:"service_status,optional"`
	// ProcessName holds the value of the "process_name" field.
	ProcessName string `json:"process_name,omitempty" hcl:"process_name,optional"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ValidationQuery when eager-loading is set.
	Edges ValidationEdges `json:"edges"`

	// Edges put into the main struct to be loaded via hcl
	// Users holds the value of the Users edge.
	HCLUsers []*User `json:"Users,omitempty" hcl:"maintainer,block"`
	// Environment holds the value of the Environment edge.
	HCLEnvironment          *Environment `json:"Environment,omitempty"`
	environment_validations *uuid.UUID
	selectValues            sql.SelectValues
}

// ValidationEdges holds the relations/edges for other nodes in the graph.
type ValidationEdges struct {
	// Users holds the value of the Users edge.
	Users []*User `json:"Users,omitempty" hcl:"maintainer,block"`
	// Environment holds the value of the Environment edge.
	Environment *Environment `json:"Environment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedUsers map[string][]*User
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e ValidationEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "Users"}
}

// EnvironmentOrErr returns the Environment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ValidationEdges) EnvironmentOrErr() (*Environment, error) {
	if e.loadedTypes[1] {
		if e.Environment == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: environment.Label}
		}
		return e.Environment, nil
	}
	return nil, &NotLoadedError{edge: "Environment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Validation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case validation.FieldNameservers:
			values[i] = new([]byte)
		case validation.FieldPort:
			values[i] = new(sql.NullInt64)
		case validation.FieldHCLID, validation.FieldValidationType, validation.FieldHash, validation.FieldRegex, validation.FieldIP, validation.FieldURL, validation.FieldHostname, validation.FieldPackageName, validation.FieldUsername, validation.FieldGroupName, validation.FieldFilePath, validation.FieldSearchString, validation.FieldServiceName, validation.FieldFilePermission, validation.FieldServiceStatus, validation.FieldProcessName:
			values[i] = new(sql.NullString)
		case validation.FieldID:
			values[i] = new(uuid.UUID)
		case validation.ForeignKeys[0]: // environment_validations
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Validation fields.
func (v *Validation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case validation.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				v.ID = *value
			}
		case validation.FieldHCLID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hcl_id", values[i])
			} else if value.Valid {
				v.HCLID = value.String
			}
		case validation.FieldValidationType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field validation_type", values[i])
			} else if value.Valid {
				v.ValidationType = validation.ValidationType(value.String)
			}
		case validation.FieldHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hash", values[i])
			} else if value.Valid {
				v.Hash = value.String
			}
		case validation.FieldRegex:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field regex", values[i])
			} else if value.Valid {
				v.Regex = value.String
			}
		case validation.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value.Valid {
				v.IP = value.String
			}
		case validation.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				v.URL = value.String
			}
		case validation.FieldPort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field port", values[i])
			} else if value.Valid {
				v.Port = int(value.Int64)
			}
		case validation.FieldHostname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hostname", values[i])
			} else if value.Valid {
				v.Hostname = value.String
			}
		case validation.FieldNameservers:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field nameservers", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &v.Nameservers); err != nil {
					return fmt.Errorf("unmarshal field nameservers: %w", err)
				}
			}
		case validation.FieldPackageName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field package_name", values[i])
			} else if value.Valid {
				v.PackageName = value.String
			}
		case validation.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				v.Username = value.String
			}
		case validation.FieldGroupName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field group_name", values[i])
			} else if value.Valid {
				v.GroupName = value.String
			}
		case validation.FieldFilePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_path", values[i])
			} else if value.Valid {
				v.FilePath = value.String
			}
		case validation.FieldSearchString:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field search_string", values[i])
			} else if value.Valid {
				v.SearchString = value.String
			}
		case validation.FieldServiceName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field service_name", values[i])
			} else if value.Valid {
				v.ServiceName = value.String
			}
		case validation.FieldFilePermission:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_permission", values[i])
			} else if value.Valid {
				v.FilePermission = value.String
			}
		case validation.FieldServiceStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field service_status", values[i])
			} else if value.Valid {
				v.ServiceStatus = validation.ServiceStatus(value.String)
			}
		case validation.FieldProcessName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field process_name", values[i])
			} else if value.Valid {
				v.ProcessName = value.String
			}
		case validation.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field environment_validations", values[i])
			} else if value.Valid {
				v.environment_validations = new(uuid.UUID)
				*v.environment_validations = *value.S.(*uuid.UUID)
			}
		default:
			v.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Validation.
// This includes values selected through modifiers, order, etc.
func (v *Validation) Value(name string) (ent.Value, error) {
	return v.selectValues.Get(name)
}

// QueryUsers queries the "Users" edge of the Validation entity.
func (v *Validation) QueryUsers() *UserQuery {
	return NewValidationClient(v.config).QueryUsers(v)
}

// QueryEnvironment queries the "Environment" edge of the Validation entity.
func (v *Validation) QueryEnvironment() *EnvironmentQuery {
	return NewValidationClient(v.config).QueryEnvironment(v)
}

// Update returns a builder for updating this Validation.
// Note that you need to call Validation.Unwrap() before calling this method if this Validation
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Validation) Update() *ValidationUpdateOne {
	return NewValidationClient(v.config).UpdateOne(v)
}

// Unwrap unwraps the Validation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *Validation) Unwrap() *Validation {
	_tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Validation is not a transactional entity")
	}
	v.config.driver = _tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Validation) String() string {
	var builder strings.Builder
	builder.WriteString("Validation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", v.ID))
	builder.WriteString("hcl_id=")
	builder.WriteString(v.HCLID)
	builder.WriteString(", ")
	builder.WriteString("validation_type=")
	builder.WriteString(fmt.Sprintf("%v", v.ValidationType))
	builder.WriteString(", ")
	builder.WriteString("hash=")
	builder.WriteString(v.Hash)
	builder.WriteString(", ")
	builder.WriteString("regex=")
	builder.WriteString(v.Regex)
	builder.WriteString(", ")
	builder.WriteString("ip=")
	builder.WriteString(v.IP)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(v.URL)
	builder.WriteString(", ")
	builder.WriteString("port=")
	builder.WriteString(fmt.Sprintf("%v", v.Port))
	builder.WriteString(", ")
	builder.WriteString("hostname=")
	builder.WriteString(v.Hostname)
	builder.WriteString(", ")
	builder.WriteString("nameservers=")
	builder.WriteString(fmt.Sprintf("%v", v.Nameservers))
	builder.WriteString(", ")
	builder.WriteString("package_name=")
	builder.WriteString(v.PackageName)
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(v.Username)
	builder.WriteString(", ")
	builder.WriteString("group_name=")
	builder.WriteString(v.GroupName)
	builder.WriteString(", ")
	builder.WriteString("file_path=")
	builder.WriteString(v.FilePath)
	builder.WriteString(", ")
	builder.WriteString("search_string=")
	builder.WriteString(v.SearchString)
	builder.WriteString(", ")
	builder.WriteString("service_name=")
	builder.WriteString(v.ServiceName)
	builder.WriteString(", ")
	builder.WriteString("file_permission=")
	builder.WriteString(v.FilePermission)
	builder.WriteString(", ")
	builder.WriteString("service_status=")
	builder.WriteString(fmt.Sprintf("%v", v.ServiceStatus))
	builder.WriteString(", ")
	builder.WriteString("process_name=")
	builder.WriteString(v.ProcessName)
	builder.WriteByte(')')
	return builder.String()
}

// NamedUsers returns the Users named value or an error if the edge was not
// loaded in eager-loading with this name.
func (v *Validation) NamedUsers(name string) ([]*User, error) {
	if v.Edges.namedUsers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := v.Edges.namedUsers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (v *Validation) appendNamedUsers(name string, edges ...*User) {
	if v.Edges.namedUsers == nil {
		v.Edges.namedUsers = make(map[string][]*User)
	}
	if len(edges) == 0 {
		v.Edges.namedUsers[name] = []*User{}
	} else {
		v.Edges.namedUsers[name] = append(v.Edges.namedUsers[name], edges...)
	}
}

// Validations is a parsable slice of Validation.
type Validations []*Validation
