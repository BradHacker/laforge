// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/gen0cide/laforge/ent/agenttask"
	"github.com/gen0cide/laforge/ent/validation"
	"github.com/google/uuid"
)

// Validation is the model entity for the Validation schema.
type Validation struct {
	config ` json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// HclID holds the value of the "hcl_id" field.
	HclID string `json:"hcl_id,omitempty" hcl:"id,label"`
	// ValidationType holds the value of the "validation_type" field.
	ValidationType string `json:"validation_type,omitempty" hcl:"validation_type"`
	// Output holds the value of the "output" field.
	Output string `json:"output,omitempty"`
	// State holds the value of the "state" field.
	State validation.State `json:"state,omitempty"`
	// ErrorMessage holds the value of the "error_message" field.
	ErrorMessage string `json:"error_message,omitempty"`
	// Hash holds the value of the "hash" field.
	Hash string `json:"hash,omitempty" hcl:"hash,optional"`
	// Regex holds the value of the "regex" field.
	Regex string `json:"regex,omitempty" hcl:"regex,optional"`
	// IP holds the value of the "ip" field.
	IP string `json:"ip,omitempty" hcl:"ip,optional"`
	// Port holds the value of the "port" field.
	Port int `json:"port,omitempty" hcl:"port,optional"`
	// Hostname holds the value of the "hostname" field.
	Hostname string `json:"hostname,omitempty" hcl:"hostname,optional"`
	// Nameservers holds the value of the "nameservers" field.
	Nameservers []string `json:"nameservers,omitempty" hcl:"nameservers,optional"`
	// PackageName holds the value of the "package_name" field.
	PackageName string `json:"package_name,omitempty" hcl:"package_name,optional"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty" hcl:"username,optional"`
	// GroupName holds the value of the "group_name" field.
	GroupName string `json:"group_name,omitempty" hcl:"group_name,optional"`
	// FilePath holds the value of the "file_path" field.
	FilePath string `json:"file_path,omitempty" hcl:"file_path,optional"`
	// SearchString holds the value of the "search_string" field.
	SearchString string `json:"search_string,omitempty" hcl:"search_string,optional"`
	// ServiceName holds the value of the "service_name" field.
	ServiceName string `json:"service_name,omitempty" hcl:"service_name,optional"`
	// ServiceStatus holds the value of the "service_status" field.
	ServiceStatus string `json:"service_status,omitempty" hcl:"service_status,optional"`
	// ProcessName holds the value of the "process_name" field.
	ProcessName string `json:"process_name,omitempty" hcl:"process_name,optional"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ValidationQuery when eager-loading is set.
	Edges ValidationEdges `json:"edges"`

	// Edges put into the main struct to be loaded via hcl
	// ValidationToAgentTask holds the value of the ValidationToAgentTask edge.
	HCLValidationToAgentTask *AgentTask `json:"ValidationToAgentTask,omitempty"`
	// ValidationToScript holds the value of the ValidationToScript edge.
	HCLValidationToScript []*Script `json:"ValidationToScript,omitempty"`
	// ValidationToEnvironment holds the value of the ValidationToEnvironment edge.
	HCLValidationToEnvironment []*Environment `json:"ValidationToEnvironment,omitempty"`
	//
	agent_task_agent_task_to_validation *uuid.UUID
}

// ValidationEdges holds the relations/edges for other nodes in the graph.
type ValidationEdges struct {
	// ValidationToAgentTask holds the value of the ValidationToAgentTask edge.
	ValidationToAgentTask *AgentTask `json:"ValidationToAgentTask,omitempty"`
	// ValidationToScript holds the value of the ValidationToScript edge.
	ValidationToScript []*Script `json:"ValidationToScript,omitempty"`
	// ValidationToEnvironment holds the value of the ValidationToEnvironment edge.
	ValidationToEnvironment []*Environment `json:"ValidationToEnvironment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ValidationToAgentTaskOrErr returns the ValidationToAgentTask value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ValidationEdges) ValidationToAgentTaskOrErr() (*AgentTask, error) {
	if e.loadedTypes[0] {
		if e.ValidationToAgentTask == nil {
			// The edge ValidationToAgentTask was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: agenttask.Label}
		}
		return e.ValidationToAgentTask, nil
	}
	return nil, &NotLoadedError{edge: "ValidationToAgentTask"}
}

// ValidationToScriptOrErr returns the ValidationToScript value or an error if the edge
// was not loaded in eager-loading.
func (e ValidationEdges) ValidationToScriptOrErr() ([]*Script, error) {
	if e.loadedTypes[1] {
		return e.ValidationToScript, nil
	}
	return nil, &NotLoadedError{edge: "ValidationToScript"}
}

// ValidationToEnvironmentOrErr returns the ValidationToEnvironment value or an error if the edge
// was not loaded in eager-loading.
func (e ValidationEdges) ValidationToEnvironmentOrErr() ([]*Environment, error) {
	if e.loadedTypes[2] {
		return e.ValidationToEnvironment, nil
	}
	return nil, &NotLoadedError{edge: "ValidationToEnvironment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Validation) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case validation.FieldNameservers:
			values[i] = new([]byte)
		case validation.FieldPort:
			values[i] = new(sql.NullInt64)
		case validation.FieldHclID, validation.FieldValidationType, validation.FieldOutput, validation.FieldState, validation.FieldErrorMessage, validation.FieldHash, validation.FieldRegex, validation.FieldIP, validation.FieldHostname, validation.FieldPackageName, validation.FieldUsername, validation.FieldGroupName, validation.FieldFilePath, validation.FieldSearchString, validation.FieldServiceName, validation.FieldServiceStatus, validation.FieldProcessName:
			values[i] = new(sql.NullString)
		case validation.FieldID:
			values[i] = new(uuid.UUID)
		case validation.ForeignKeys[0]: // agent_task_agent_task_to_validation
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Validation", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Validation fields.
func (v *Validation) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case validation.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				v.ID = *value
			}
		case validation.FieldHclID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hcl_id", values[i])
			} else if value.Valid {
				v.HclID = value.String
			}
		case validation.FieldValidationType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field validation_type", values[i])
			} else if value.Valid {
				v.ValidationType = value.String
			}
		case validation.FieldOutput:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field output", values[i])
			} else if value.Valid {
				v.Output = value.String
			}
		case validation.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				v.State = validation.State(value.String)
			}
		case validation.FieldErrorMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error_message", values[i])
			} else if value.Valid {
				v.ErrorMessage = value.String
			}
		case validation.FieldHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hash", values[i])
			} else if value.Valid {
				v.Hash = value.String
			}
		case validation.FieldRegex:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field regex", values[i])
			} else if value.Valid {
				v.Regex = value.String
			}
		case validation.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value.Valid {
				v.IP = value.String
			}
		case validation.FieldPort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field port", values[i])
			} else if value.Valid {
				v.Port = int(value.Int64)
			}
		case validation.FieldHostname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hostname", values[i])
			} else if value.Valid {
				v.Hostname = value.String
			}
		case validation.FieldNameservers:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field nameservers", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &v.Nameservers); err != nil {
					return fmt.Errorf("unmarshal field nameservers: %w", err)
				}
			}
		case validation.FieldPackageName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field package_name", values[i])
			} else if value.Valid {
				v.PackageName = value.String
			}
		case validation.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				v.Username = value.String
			}
		case validation.FieldGroupName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field group_name", values[i])
			} else if value.Valid {
				v.GroupName = value.String
			}
		case validation.FieldFilePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_path", values[i])
			} else if value.Valid {
				v.FilePath = value.String
			}
		case validation.FieldSearchString:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field search_string", values[i])
			} else if value.Valid {
				v.SearchString = value.String
			}
		case validation.FieldServiceName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field service_name", values[i])
			} else if value.Valid {
				v.ServiceName = value.String
			}
		case validation.FieldServiceStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field service_status", values[i])
			} else if value.Valid {
				v.ServiceStatus = value.String
			}
		case validation.FieldProcessName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field process_name", values[i])
			} else if value.Valid {
				v.ProcessName = value.String
			}
		case validation.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field agent_task_agent_task_to_validation", values[i])
			} else if value.Valid {
				v.agent_task_agent_task_to_validation = new(uuid.UUID)
				*v.agent_task_agent_task_to_validation = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryValidationToAgentTask queries the "ValidationToAgentTask" edge of the Validation entity.
func (v *Validation) QueryValidationToAgentTask() *AgentTaskQuery {
	return (&ValidationClient{config: v.config}).QueryValidationToAgentTask(v)
}

// QueryValidationToScript queries the "ValidationToScript" edge of the Validation entity.
func (v *Validation) QueryValidationToScript() *ScriptQuery {
	return (&ValidationClient{config: v.config}).QueryValidationToScript(v)
}

// QueryValidationToEnvironment queries the "ValidationToEnvironment" edge of the Validation entity.
func (v *Validation) QueryValidationToEnvironment() *EnvironmentQuery {
	return (&ValidationClient{config: v.config}).QueryValidationToEnvironment(v)
}

// Update returns a builder for updating this Validation.
// Note that you need to call Validation.Unwrap() before calling this method if this Validation
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Validation) Update() *ValidationUpdateOne {
	return (&ValidationClient{config: v.config}).UpdateOne(v)
}

// Unwrap unwraps the Validation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *Validation) Unwrap() *Validation {
	tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Validation is not a transactional entity")
	}
	v.config.driver = tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Validation) String() string {
	var builder strings.Builder
	builder.WriteString("Validation(")
	builder.WriteString(fmt.Sprintf("id=%v", v.ID))
	builder.WriteString(", hcl_id=")
	builder.WriteString(v.HclID)
	builder.WriteString(", validation_type=")
	builder.WriteString(v.ValidationType)
	builder.WriteString(", output=")
	builder.WriteString(v.Output)
	builder.WriteString(", state=")
	builder.WriteString(fmt.Sprintf("%v", v.State))
	builder.WriteString(", error_message=")
	builder.WriteString(v.ErrorMessage)
	builder.WriteString(", hash=")
	builder.WriteString(v.Hash)
	builder.WriteString(", regex=")
	builder.WriteString(v.Regex)
	builder.WriteString(", ip=")
	builder.WriteString(v.IP)
	builder.WriteString(", port=")
	builder.WriteString(fmt.Sprintf("%v", v.Port))
	builder.WriteString(", hostname=")
	builder.WriteString(v.Hostname)
	builder.WriteString(", nameservers=")
	builder.WriteString(fmt.Sprintf("%v", v.Nameservers))
	builder.WriteString(", package_name=")
	builder.WriteString(v.PackageName)
	builder.WriteString(", username=")
	builder.WriteString(v.Username)
	builder.WriteString(", group_name=")
	builder.WriteString(v.GroupName)
	builder.WriteString(", file_path=")
	builder.WriteString(v.FilePath)
	builder.WriteString(", search_string=")
	builder.WriteString(v.SearchString)
	builder.WriteString(", service_name=")
	builder.WriteString(v.ServiceName)
	builder.WriteString(", service_status=")
	builder.WriteString(v.ServiceStatus)
	builder.WriteString(", process_name=")
	builder.WriteString(v.ProcessName)
	builder.WriteByte(')')
	return builder.String()
}

// Validations is a parsable slice of Validation.
type Validations []*Validation

func (v Validations) config(cfg config) {
	for _i := range v {
		v[_i].config = cfg
	}
}
