// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/finding"
	"github.com/gen0cide/laforge/ent/script"
	"github.com/gen0cide/laforge/ent/user"
	"github.com/google/uuid"
)

// ScriptCreate is the builder for creating a Script entity.
type ScriptCreate struct {
	config
	mutation *ScriptMutation
	hooks    []Hook
}

// SetHclID sets the "hcl_id" field.
func (sc *ScriptCreate) SetHclID(s string) *ScriptCreate {
	sc.mutation.SetHclID(s)
	return sc
}

// SetName sets the "name" field.
func (sc *ScriptCreate) SetName(s string) *ScriptCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetLanguage sets the "language" field.
func (sc *ScriptCreate) SetLanguage(s string) *ScriptCreate {
	sc.mutation.SetLanguage(s)
	return sc
}

// SetDescription sets the "description" field.
func (sc *ScriptCreate) SetDescription(s string) *ScriptCreate {
	sc.mutation.SetDescription(s)
	return sc
}

// SetSource sets the "source" field.
func (sc *ScriptCreate) SetSource(s string) *ScriptCreate {
	sc.mutation.SetSource(s)
	return sc
}

// SetSourceType sets the "source_type" field.
func (sc *ScriptCreate) SetSourceType(s string) *ScriptCreate {
	sc.mutation.SetSourceType(s)
	return sc
}

// SetCooldown sets the "cooldown" field.
func (sc *ScriptCreate) SetCooldown(i int) *ScriptCreate {
	sc.mutation.SetCooldown(i)
	return sc
}

// SetTimeout sets the "timeout" field.
func (sc *ScriptCreate) SetTimeout(i int) *ScriptCreate {
	sc.mutation.SetTimeout(i)
	return sc
}

// SetIgnoreErrors sets the "ignore_errors" field.
func (sc *ScriptCreate) SetIgnoreErrors(b bool) *ScriptCreate {
	sc.mutation.SetIgnoreErrors(b)
	return sc
}

// SetArgs sets the "args" field.
func (sc *ScriptCreate) SetArgs(s []string) *ScriptCreate {
	sc.mutation.SetArgs(s)
	return sc
}

// SetDisabled sets the "disabled" field.
func (sc *ScriptCreate) SetDisabled(b bool) *ScriptCreate {
	sc.mutation.SetDisabled(b)
	return sc
}

// SetVars sets the "vars" field.
func (sc *ScriptCreate) SetVars(m map[string]string) *ScriptCreate {
	sc.mutation.SetVars(m)
	return sc
}

// SetAbsPath sets the "abs_path" field.
func (sc *ScriptCreate) SetAbsPath(s string) *ScriptCreate {
	sc.mutation.SetAbsPath(s)
	return sc
}

// SetTags sets the "tags" field.
func (sc *ScriptCreate) SetTags(m map[string]string) *ScriptCreate {
	sc.mutation.SetTags(m)
	return sc
}

// SetID sets the "id" field.
func (sc *ScriptCreate) SetID(u uuid.UUID) *ScriptCreate {
	sc.mutation.SetID(u)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *ScriptCreate) SetNillableID(u *uuid.UUID) *ScriptCreate {
	if u != nil {
		sc.SetID(*u)
	}
	return sc
}

// AddScriptToUserIDs adds the "ScriptToUser" edge to the User entity by IDs.
func (sc *ScriptCreate) AddScriptToUserIDs(ids ...uuid.UUID) *ScriptCreate {
	sc.mutation.AddScriptToUserIDs(ids...)
	return sc
}

// AddScriptToUser adds the "ScriptToUser" edges to the User entity.
func (sc *ScriptCreate) AddScriptToUser(u ...*User) *ScriptCreate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return sc.AddScriptToUserIDs(ids...)
}

// AddScriptToFindingIDs adds the "ScriptToFinding" edge to the Finding entity by IDs.
func (sc *ScriptCreate) AddScriptToFindingIDs(ids ...uuid.UUID) *ScriptCreate {
	sc.mutation.AddScriptToFindingIDs(ids...)
	return sc
}

// AddScriptToFinding adds the "ScriptToFinding" edges to the Finding entity.
func (sc *ScriptCreate) AddScriptToFinding(f ...*Finding) *ScriptCreate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return sc.AddScriptToFindingIDs(ids...)
}

// SetScriptToEnvironmentID sets the "ScriptToEnvironment" edge to the Environment entity by ID.
func (sc *ScriptCreate) SetScriptToEnvironmentID(id uuid.UUID) *ScriptCreate {
	sc.mutation.SetScriptToEnvironmentID(id)
	return sc
}

// SetNillableScriptToEnvironmentID sets the "ScriptToEnvironment" edge to the Environment entity by ID if the given value is not nil.
func (sc *ScriptCreate) SetNillableScriptToEnvironmentID(id *uuid.UUID) *ScriptCreate {
	if id != nil {
		sc = sc.SetScriptToEnvironmentID(*id)
	}
	return sc
}

// SetScriptToEnvironment sets the "ScriptToEnvironment" edge to the Environment entity.
func (sc *ScriptCreate) SetScriptToEnvironment(e *Environment) *ScriptCreate {
	return sc.SetScriptToEnvironmentID(e.ID)
}

// Mutation returns the ScriptMutation object of the builder.
func (sc *ScriptCreate) Mutation() *ScriptMutation {
	return sc.mutation
}

// Save creates the Script in the database.
func (sc *ScriptCreate) Save(ctx context.Context) (*Script, error) {
	var (
		err  error
		node *Script
	)
	sc.defaults()
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ScriptMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *ScriptCreate) SaveX(ctx context.Context) *Script {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *ScriptCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *ScriptCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *ScriptCreate) defaults() {
	if _, ok := sc.mutation.ID(); !ok {
		v := script.DefaultID()
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *ScriptCreate) check() error {
	if _, ok := sc.mutation.HclID(); !ok {
		return &ValidationError{Name: "hcl_id", err: errors.New(`ent: missing required field "Script.hcl_id"`)}
	}
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Script.name"`)}
	}
	if _, ok := sc.mutation.Language(); !ok {
		return &ValidationError{Name: "language", err: errors.New(`ent: missing required field "Script.language"`)}
	}
	if _, ok := sc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Script.description"`)}
	}
	if _, ok := sc.mutation.Source(); !ok {
		return &ValidationError{Name: "source", err: errors.New(`ent: missing required field "Script.source"`)}
	}
	if _, ok := sc.mutation.SourceType(); !ok {
		return &ValidationError{Name: "source_type", err: errors.New(`ent: missing required field "Script.source_type"`)}
	}
	if _, ok := sc.mutation.Cooldown(); !ok {
		return &ValidationError{Name: "cooldown", err: errors.New(`ent: missing required field "Script.cooldown"`)}
	}
	if _, ok := sc.mutation.Timeout(); !ok {
		return &ValidationError{Name: "timeout", err: errors.New(`ent: missing required field "Script.timeout"`)}
	}
	if _, ok := sc.mutation.IgnoreErrors(); !ok {
		return &ValidationError{Name: "ignore_errors", err: errors.New(`ent: missing required field "Script.ignore_errors"`)}
	}
	if _, ok := sc.mutation.Args(); !ok {
		return &ValidationError{Name: "args", err: errors.New(`ent: missing required field "Script.args"`)}
	}
	if _, ok := sc.mutation.Disabled(); !ok {
		return &ValidationError{Name: "disabled", err: errors.New(`ent: missing required field "Script.disabled"`)}
	}
	if _, ok := sc.mutation.Vars(); !ok {
		return &ValidationError{Name: "vars", err: errors.New(`ent: missing required field "Script.vars"`)}
	}
	if _, ok := sc.mutation.AbsPath(); !ok {
		return &ValidationError{Name: "abs_path", err: errors.New(`ent: missing required field "Script.abs_path"`)}
	}
	if _, ok := sc.mutation.Tags(); !ok {
		return &ValidationError{Name: "tags", err: errors.New(`ent: missing required field "Script.tags"`)}
	}
	return nil
}

func (sc *ScriptCreate) sqlSave(ctx context.Context) (*Script, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (sc *ScriptCreate) createSpec() (*Script, *sqlgraph.CreateSpec) {
	var (
		_node = &Script{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: script.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: script.FieldID,
			},
		}
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sc.mutation.HclID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: script.FieldHclID,
		})
		_node.HclID = value
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: script.FieldName,
		})
		_node.Name = value
	}
	if value, ok := sc.mutation.Language(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: script.FieldLanguage,
		})
		_node.Language = value
	}
	if value, ok := sc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: script.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := sc.mutation.Source(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: script.FieldSource,
		})
		_node.Source = value
	}
	if value, ok := sc.mutation.SourceType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: script.FieldSourceType,
		})
		_node.SourceType = value
	}
	if value, ok := sc.mutation.Cooldown(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: script.FieldCooldown,
		})
		_node.Cooldown = value
	}
	if value, ok := sc.mutation.Timeout(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: script.FieldTimeout,
		})
		_node.Timeout = value
	}
	if value, ok := sc.mutation.IgnoreErrors(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: script.FieldIgnoreErrors,
		})
		_node.IgnoreErrors = value
	}
	if value, ok := sc.mutation.Args(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: script.FieldArgs,
		})
		_node.Args = value
	}
	if value, ok := sc.mutation.Disabled(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: script.FieldDisabled,
		})
		_node.Disabled = value
	}
	if value, ok := sc.mutation.Vars(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: script.FieldVars,
		})
		_node.Vars = value
	}
	if value, ok := sc.mutation.AbsPath(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: script.FieldAbsPath,
		})
		_node.AbsPath = value
	}
	if value, ok := sc.mutation.Tags(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: script.FieldTags,
		})
		_node.Tags = value
	}
	if nodes := sc.mutation.ScriptToUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   script.ScriptToUserTable,
			Columns: []string{script.ScriptToUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ScriptToFindingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   script.ScriptToFindingTable,
			Columns: []string{script.ScriptToFindingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: finding.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ScriptToEnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   script.ScriptToEnvironmentTable,
			Columns: []string{script.ScriptToEnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: environment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.environment_environment_to_script = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ScriptCreateBulk is the builder for creating many Script entities in bulk.
type ScriptCreateBulk struct {
	config
	builders []*ScriptCreate
}

// Save creates the Script entities in the database.
func (scb *ScriptCreateBulk) Save(ctx context.Context) ([]*Script, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Script, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScriptMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *ScriptCreateBulk) SaveX(ctx context.Context) []*Script {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *ScriptCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *ScriptCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
