// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/agenttask"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/provisionedhost"
	"github.com/gen0cide/laforge/ent/provisionedschedulestep"
	"github.com/gen0cide/laforge/ent/schedulestep"
	"github.com/gen0cide/laforge/ent/status"
	"github.com/google/uuid"
)

// ProvisionedScheduleStepQuery is the builder for querying ProvisionedScheduleStep entities.
type ProvisionedScheduleStepQuery struct {
	config
	limit                                        *int
	offset                                       *int
	unique                                       *bool
	order                                        []OrderFunc
	fields                                       []string
	predicates                                   []predicate.ProvisionedScheduleStep
	withProvisionedScheduleStepToStatus          *StatusQuery
	withProvisionedScheduleStepToScheduleStep    *ScheduleStepQuery
	withProvisionedScheduleStepToProvisionedHost *ProvisionedHostQuery
	withProvisionedScheduleStepToAgentTask       *AgentTaskQuery
	withFKs                                      bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ProvisionedScheduleStepQuery builder.
func (pssq *ProvisionedScheduleStepQuery) Where(ps ...predicate.ProvisionedScheduleStep) *ProvisionedScheduleStepQuery {
	pssq.predicates = append(pssq.predicates, ps...)
	return pssq
}

// Limit adds a limit step to the query.
func (pssq *ProvisionedScheduleStepQuery) Limit(limit int) *ProvisionedScheduleStepQuery {
	pssq.limit = &limit
	return pssq
}

// Offset adds an offset step to the query.
func (pssq *ProvisionedScheduleStepQuery) Offset(offset int) *ProvisionedScheduleStepQuery {
	pssq.offset = &offset
	return pssq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pssq *ProvisionedScheduleStepQuery) Unique(unique bool) *ProvisionedScheduleStepQuery {
	pssq.unique = &unique
	return pssq
}

// Order adds an order step to the query.
func (pssq *ProvisionedScheduleStepQuery) Order(o ...OrderFunc) *ProvisionedScheduleStepQuery {
	pssq.order = append(pssq.order, o...)
	return pssq
}

// QueryProvisionedScheduleStepToStatus chains the current query on the "ProvisionedScheduleStepToStatus" edge.
func (pssq *ProvisionedScheduleStepQuery) QueryProvisionedScheduleStepToStatus() *StatusQuery {
	query := &StatusQuery{config: pssq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pssq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisionedschedulestep.Table, provisionedschedulestep.FieldID, selector),
			sqlgraph.To(status.Table, status.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, provisionedschedulestep.ProvisionedScheduleStepToStatusTable, provisionedschedulestep.ProvisionedScheduleStepToStatusColumn),
		)
		fromU = sqlgraph.SetNeighbors(pssq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisionedScheduleStepToScheduleStep chains the current query on the "ProvisionedScheduleStepToScheduleStep" edge.
func (pssq *ProvisionedScheduleStepQuery) QueryProvisionedScheduleStepToScheduleStep() *ScheduleStepQuery {
	query := &ScheduleStepQuery{config: pssq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pssq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisionedschedulestep.Table, provisionedschedulestep.FieldID, selector),
			sqlgraph.To(schedulestep.Table, schedulestep.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, provisionedschedulestep.ProvisionedScheduleStepToScheduleStepTable, provisionedschedulestep.ProvisionedScheduleStepToScheduleStepColumn),
		)
		fromU = sqlgraph.SetNeighbors(pssq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisionedScheduleStepToProvisionedHost chains the current query on the "ProvisionedScheduleStepToProvisionedHost" edge.
func (pssq *ProvisionedScheduleStepQuery) QueryProvisionedScheduleStepToProvisionedHost() *ProvisionedHostQuery {
	query := &ProvisionedHostQuery{config: pssq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pssq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisionedschedulestep.Table, provisionedschedulestep.FieldID, selector),
			sqlgraph.To(provisionedhost.Table, provisionedhost.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, provisionedschedulestep.ProvisionedScheduleStepToProvisionedHostTable, provisionedschedulestep.ProvisionedScheduleStepToProvisionedHostColumn),
		)
		fromU = sqlgraph.SetNeighbors(pssq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisionedScheduleStepToAgentTask chains the current query on the "ProvisionedScheduleStepToAgentTask" edge.
func (pssq *ProvisionedScheduleStepQuery) QueryProvisionedScheduleStepToAgentTask() *AgentTaskQuery {
	query := &AgentTaskQuery{config: pssq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pssq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisionedschedulestep.Table, provisionedschedulestep.FieldID, selector),
			sqlgraph.To(agenttask.Table, agenttask.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, provisionedschedulestep.ProvisionedScheduleStepToAgentTaskTable, provisionedschedulestep.ProvisionedScheduleStepToAgentTaskColumn),
		)
		fromU = sqlgraph.SetNeighbors(pssq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ProvisionedScheduleStep entity from the query.
// Returns a *NotFoundError when no ProvisionedScheduleStep was found.
func (pssq *ProvisionedScheduleStepQuery) First(ctx context.Context) (*ProvisionedScheduleStep, error) {
	nodes, err := pssq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{provisionedschedulestep.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pssq *ProvisionedScheduleStepQuery) FirstX(ctx context.Context) *ProvisionedScheduleStep {
	node, err := pssq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ProvisionedScheduleStep ID from the query.
// Returns a *NotFoundError when no ProvisionedScheduleStep ID was found.
func (pssq *ProvisionedScheduleStepQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = pssq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{provisionedschedulestep.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pssq *ProvisionedScheduleStepQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := pssq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ProvisionedScheduleStep entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ProvisionedScheduleStep entity is found.
// Returns a *NotFoundError when no ProvisionedScheduleStep entities are found.
func (pssq *ProvisionedScheduleStepQuery) Only(ctx context.Context) (*ProvisionedScheduleStep, error) {
	nodes, err := pssq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{provisionedschedulestep.Label}
	default:
		return nil, &NotSingularError{provisionedschedulestep.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pssq *ProvisionedScheduleStepQuery) OnlyX(ctx context.Context) *ProvisionedScheduleStep {
	node, err := pssq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ProvisionedScheduleStep ID in the query.
// Returns a *NotSingularError when more than one ProvisionedScheduleStep ID is found.
// Returns a *NotFoundError when no entities are found.
func (pssq *ProvisionedScheduleStepQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = pssq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{provisionedschedulestep.Label}
	default:
		err = &NotSingularError{provisionedschedulestep.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pssq *ProvisionedScheduleStepQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := pssq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ProvisionedScheduleSteps.
func (pssq *ProvisionedScheduleStepQuery) All(ctx context.Context) ([]*ProvisionedScheduleStep, error) {
	if err := pssq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return pssq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (pssq *ProvisionedScheduleStepQuery) AllX(ctx context.Context) []*ProvisionedScheduleStep {
	nodes, err := pssq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ProvisionedScheduleStep IDs.
func (pssq *ProvisionedScheduleStepQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := pssq.Select(provisionedschedulestep.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pssq *ProvisionedScheduleStepQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := pssq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pssq *ProvisionedScheduleStepQuery) Count(ctx context.Context) (int, error) {
	if err := pssq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return pssq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (pssq *ProvisionedScheduleStepQuery) CountX(ctx context.Context) int {
	count, err := pssq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pssq *ProvisionedScheduleStepQuery) Exist(ctx context.Context) (bool, error) {
	if err := pssq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return pssq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (pssq *ProvisionedScheduleStepQuery) ExistX(ctx context.Context) bool {
	exist, err := pssq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ProvisionedScheduleStepQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pssq *ProvisionedScheduleStepQuery) Clone() *ProvisionedScheduleStepQuery {
	if pssq == nil {
		return nil
	}
	return &ProvisionedScheduleStepQuery{
		config:                              pssq.config,
		limit:                               pssq.limit,
		offset:                              pssq.offset,
		order:                               append([]OrderFunc{}, pssq.order...),
		predicates:                          append([]predicate.ProvisionedScheduleStep{}, pssq.predicates...),
		withProvisionedScheduleStepToStatus: pssq.withProvisionedScheduleStepToStatus.Clone(),
		withProvisionedScheduleStepToScheduleStep:    pssq.withProvisionedScheduleStepToScheduleStep.Clone(),
		withProvisionedScheduleStepToProvisionedHost: pssq.withProvisionedScheduleStepToProvisionedHost.Clone(),
		withProvisionedScheduleStepToAgentTask:       pssq.withProvisionedScheduleStepToAgentTask.Clone(),
		// clone intermediate query.
		sql:    pssq.sql.Clone(),
		path:   pssq.path,
		unique: pssq.unique,
	}
}

// WithProvisionedScheduleStepToStatus tells the query-builder to eager-load the nodes that are connected to
// the "ProvisionedScheduleStepToStatus" edge. The optional arguments are used to configure the query builder of the edge.
func (pssq *ProvisionedScheduleStepQuery) WithProvisionedScheduleStepToStatus(opts ...func(*StatusQuery)) *ProvisionedScheduleStepQuery {
	query := &StatusQuery{config: pssq.config}
	for _, opt := range opts {
		opt(query)
	}
	pssq.withProvisionedScheduleStepToStatus = query
	return pssq
}

// WithProvisionedScheduleStepToScheduleStep tells the query-builder to eager-load the nodes that are connected to
// the "ProvisionedScheduleStepToScheduleStep" edge. The optional arguments are used to configure the query builder of the edge.
func (pssq *ProvisionedScheduleStepQuery) WithProvisionedScheduleStepToScheduleStep(opts ...func(*ScheduleStepQuery)) *ProvisionedScheduleStepQuery {
	query := &ScheduleStepQuery{config: pssq.config}
	for _, opt := range opts {
		opt(query)
	}
	pssq.withProvisionedScheduleStepToScheduleStep = query
	return pssq
}

// WithProvisionedScheduleStepToProvisionedHost tells the query-builder to eager-load the nodes that are connected to
// the "ProvisionedScheduleStepToProvisionedHost" edge. The optional arguments are used to configure the query builder of the edge.
func (pssq *ProvisionedScheduleStepQuery) WithProvisionedScheduleStepToProvisionedHost(opts ...func(*ProvisionedHostQuery)) *ProvisionedScheduleStepQuery {
	query := &ProvisionedHostQuery{config: pssq.config}
	for _, opt := range opts {
		opt(query)
	}
	pssq.withProvisionedScheduleStepToProvisionedHost = query
	return pssq
}

// WithProvisionedScheduleStepToAgentTask tells the query-builder to eager-load the nodes that are connected to
// the "ProvisionedScheduleStepToAgentTask" edge. The optional arguments are used to configure the query builder of the edge.
func (pssq *ProvisionedScheduleStepQuery) WithProvisionedScheduleStepToAgentTask(opts ...func(*AgentTaskQuery)) *ProvisionedScheduleStepQuery {
	query := &AgentTaskQuery{config: pssq.config}
	for _, opt := range opts {
		opt(query)
	}
	pssq.withProvisionedScheduleStepToAgentTask = query
	return pssq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		RunTime time.Time `json:"run_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ProvisionedScheduleStep.Query().
//		GroupBy(provisionedschedulestep.FieldRunTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (pssq *ProvisionedScheduleStepQuery) GroupBy(field string, fields ...string) *ProvisionedScheduleStepGroupBy {
	grbuild := &ProvisionedScheduleStepGroupBy{config: pssq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := pssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return pssq.sqlQuery(ctx), nil
	}
	grbuild.label = provisionedschedulestep.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		RunTime time.Time `json:"run_time,omitempty"`
//	}
//
//	client.ProvisionedScheduleStep.Query().
//		Select(provisionedschedulestep.FieldRunTime).
//		Scan(ctx, &v)
func (pssq *ProvisionedScheduleStepQuery) Select(fields ...string) *ProvisionedScheduleStepSelect {
	pssq.fields = append(pssq.fields, fields...)
	selbuild := &ProvisionedScheduleStepSelect{ProvisionedScheduleStepQuery: pssq}
	selbuild.label = provisionedschedulestep.Label
	selbuild.flds, selbuild.scan = &pssq.fields, selbuild.Scan
	return selbuild
}

func (pssq *ProvisionedScheduleStepQuery) prepareQuery(ctx context.Context) error {
	for _, f := range pssq.fields {
		if !provisionedschedulestep.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pssq.path != nil {
		prev, err := pssq.path(ctx)
		if err != nil {
			return err
		}
		pssq.sql = prev
	}
	return nil
}

func (pssq *ProvisionedScheduleStepQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ProvisionedScheduleStep, error) {
	var (
		nodes       = []*ProvisionedScheduleStep{}
		withFKs     = pssq.withFKs
		_spec       = pssq.querySpec()
		loadedTypes = [4]bool{
			pssq.withProvisionedScheduleStepToStatus != nil,
			pssq.withProvisionedScheduleStepToScheduleStep != nil,
			pssq.withProvisionedScheduleStepToProvisionedHost != nil,
			pssq.withProvisionedScheduleStepToAgentTask != nil,
		}
	)
	if pssq.withProvisionedScheduleStepToScheduleStep != nil || pssq.withProvisionedScheduleStepToProvisionedHost != nil || pssq.withProvisionedScheduleStepToAgentTask != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, provisionedschedulestep.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*ProvisionedScheduleStep).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &ProvisionedScheduleStep{config: pssq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pssq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := pssq.withProvisionedScheduleStepToStatus; query != nil {
		if err := pssq.loadProvisionedScheduleStepToStatus(ctx, query, nodes, nil,
			func(n *ProvisionedScheduleStep, e *Status) { n.Edges.ProvisionedScheduleStepToStatus = e }); err != nil {
			return nil, err
		}
	}
	if query := pssq.withProvisionedScheduleStepToScheduleStep; query != nil {
		if err := pssq.loadProvisionedScheduleStepToScheduleStep(ctx, query, nodes, nil,
			func(n *ProvisionedScheduleStep, e *ScheduleStep) { n.Edges.ProvisionedScheduleStepToScheduleStep = e }); err != nil {
			return nil, err
		}
	}
	if query := pssq.withProvisionedScheduleStepToProvisionedHost; query != nil {
		if err := pssq.loadProvisionedScheduleStepToProvisionedHost(ctx, query, nodes, nil,
			func(n *ProvisionedScheduleStep, e *ProvisionedHost) {
				n.Edges.ProvisionedScheduleStepToProvisionedHost = e
			}); err != nil {
			return nil, err
		}
	}
	if query := pssq.withProvisionedScheduleStepToAgentTask; query != nil {
		if err := pssq.loadProvisionedScheduleStepToAgentTask(ctx, query, nodes, nil,
			func(n *ProvisionedScheduleStep, e *AgentTask) { n.Edges.ProvisionedScheduleStepToAgentTask = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pssq *ProvisionedScheduleStepQuery) loadProvisionedScheduleStepToStatus(ctx context.Context, query *StatusQuery, nodes []*ProvisionedScheduleStep, init func(*ProvisionedScheduleStep), assign func(*ProvisionedScheduleStep, *Status)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*ProvisionedScheduleStep)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.Status(func(s *sql.Selector) {
		s.Where(sql.InValues(provisionedschedulestep.ProvisionedScheduleStepToStatusColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.provisioned_schedule_step_provisioned_schedule_step_to_status
		if fk == nil {
			return fmt.Errorf(`foreign-key "provisioned_schedule_step_provisioned_schedule_step_to_status" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "provisioned_schedule_step_provisioned_schedule_step_to_status" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pssq *ProvisionedScheduleStepQuery) loadProvisionedScheduleStepToScheduleStep(ctx context.Context, query *ScheduleStepQuery, nodes []*ProvisionedScheduleStep, init func(*ProvisionedScheduleStep), assign func(*ProvisionedScheduleStep, *ScheduleStep)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ProvisionedScheduleStep)
	for i := range nodes {
		if nodes[i].schedule_step_schedule_step_to_provisioned_schedule_step == nil {
			continue
		}
		fk := *nodes[i].schedule_step_schedule_step_to_provisioned_schedule_step
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(schedulestep.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "schedule_step_schedule_step_to_provisioned_schedule_step" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pssq *ProvisionedScheduleStepQuery) loadProvisionedScheduleStepToProvisionedHost(ctx context.Context, query *ProvisionedHostQuery, nodes []*ProvisionedScheduleStep, init func(*ProvisionedScheduleStep), assign func(*ProvisionedScheduleStep, *ProvisionedHost)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ProvisionedScheduleStep)
	for i := range nodes {
		if nodes[i].provisioned_host_provisioned_host_to_provisioned_schedule_step == nil {
			continue
		}
		fk := *nodes[i].provisioned_host_provisioned_host_to_provisioned_schedule_step
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(provisionedhost.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "provisioned_host_provisioned_host_to_provisioned_schedule_step" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pssq *ProvisionedScheduleStepQuery) loadProvisionedScheduleStepToAgentTask(ctx context.Context, query *AgentTaskQuery, nodes []*ProvisionedScheduleStep, init func(*ProvisionedScheduleStep), assign func(*ProvisionedScheduleStep, *AgentTask)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ProvisionedScheduleStep)
	for i := range nodes {
		if nodes[i].agent_task_agent_task_to_provisioned_schedule_step == nil {
			continue
		}
		fk := *nodes[i].agent_task_agent_task_to_provisioned_schedule_step
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(agenttask.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "agent_task_agent_task_to_provisioned_schedule_step" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (pssq *ProvisionedScheduleStepQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pssq.querySpec()
	_spec.Node.Columns = pssq.fields
	if len(pssq.fields) > 0 {
		_spec.Unique = pssq.unique != nil && *pssq.unique
	}
	return sqlgraph.CountNodes(ctx, pssq.driver, _spec)
}

func (pssq *ProvisionedScheduleStepQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := pssq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (pssq *ProvisionedScheduleStepQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   provisionedschedulestep.Table,
			Columns: provisionedschedulestep.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: provisionedschedulestep.FieldID,
			},
		},
		From:   pssq.sql,
		Unique: true,
	}
	if unique := pssq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := pssq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, provisionedschedulestep.FieldID)
		for i := range fields {
			if fields[i] != provisionedschedulestep.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := pssq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pssq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pssq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pssq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pssq *ProvisionedScheduleStepQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pssq.driver.Dialect())
	t1 := builder.Table(provisionedschedulestep.Table)
	columns := pssq.fields
	if len(columns) == 0 {
		columns = provisionedschedulestep.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pssq.sql != nil {
		selector = pssq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pssq.unique != nil && *pssq.unique {
		selector.Distinct()
	}
	for _, p := range pssq.predicates {
		p(selector)
	}
	for _, p := range pssq.order {
		p(selector)
	}
	if offset := pssq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pssq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ProvisionedScheduleStepGroupBy is the group-by builder for ProvisionedScheduleStep entities.
type ProvisionedScheduleStepGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pssgb *ProvisionedScheduleStepGroupBy) Aggregate(fns ...AggregateFunc) *ProvisionedScheduleStepGroupBy {
	pssgb.fns = append(pssgb.fns, fns...)
	return pssgb
}

// Scan applies the group-by query and scans the result into the given value.
func (pssgb *ProvisionedScheduleStepGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := pssgb.path(ctx)
	if err != nil {
		return err
	}
	pssgb.sql = query
	return pssgb.sqlScan(ctx, v)
}

func (pssgb *ProvisionedScheduleStepGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range pssgb.fields {
		if !provisionedschedulestep.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := pssgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pssgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (pssgb *ProvisionedScheduleStepGroupBy) sqlQuery() *sql.Selector {
	selector := pssgb.sql.Select()
	aggregation := make([]string, 0, len(pssgb.fns))
	for _, fn := range pssgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(pssgb.fields)+len(pssgb.fns))
		for _, f := range pssgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(pssgb.fields...)...)
}

// ProvisionedScheduleStepSelect is the builder for selecting fields of ProvisionedScheduleStep entities.
type ProvisionedScheduleStepSelect struct {
	*ProvisionedScheduleStepQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (psss *ProvisionedScheduleStepSelect) Scan(ctx context.Context, v interface{}) error {
	if err := psss.prepareQuery(ctx); err != nil {
		return err
	}
	psss.sql = psss.ProvisionedScheduleStepQuery.sqlQuery(ctx)
	return psss.sqlScan(ctx, v)
}

func (psss *ProvisionedScheduleStepSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := psss.sql.Query()
	if err := psss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
