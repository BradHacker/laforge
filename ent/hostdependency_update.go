// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/host"
	"github.com/gen0cide/laforge/ent/hostdependency"
	"github.com/gen0cide/laforge/ent/network"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/google/uuid"
)

// HostDependencyUpdate is the builder for updating HostDependency entities.
type HostDependencyUpdate struct {
	config
	hooks    []Hook
	mutation *HostDependencyMutation
}

// Where appends a list predicates to the HostDependencyUpdate builder.
func (hdu *HostDependencyUpdate) Where(ps ...predicate.HostDependency) *HostDependencyUpdate {
	hdu.mutation.Where(ps...)
	return hdu
}

// SetHostID sets the "host_id" field.
func (hdu *HostDependencyUpdate) SetHostID(s string) *HostDependencyUpdate {
	hdu.mutation.SetHostID(s)
	return hdu
}

// SetNetworkID sets the "network_id" field.
func (hdu *HostDependencyUpdate) SetNetworkID(s string) *HostDependencyUpdate {
	hdu.mutation.SetNetworkID(s)
	return hdu
}

// SetDependOnID sets the "DependOn" edge to the Host entity by ID.
func (hdu *HostDependencyUpdate) SetDependOnID(id uuid.UUID) *HostDependencyUpdate {
	hdu.mutation.SetDependOnID(id)
	return hdu
}

// SetNillableDependOnID sets the "DependOn" edge to the Host entity by ID if the given value is not nil.
func (hdu *HostDependencyUpdate) SetNillableDependOnID(id *uuid.UUID) *HostDependencyUpdate {
	if id != nil {
		hdu = hdu.SetDependOnID(*id)
	}
	return hdu
}

// SetDependOn sets the "DependOn" edge to the Host entity.
func (hdu *HostDependencyUpdate) SetDependOn(h *Host) *HostDependencyUpdate {
	return hdu.SetDependOnID(h.ID)
}

// SetRequiredByID sets the "RequiredBy" edge to the Host entity by ID.
func (hdu *HostDependencyUpdate) SetRequiredByID(id uuid.UUID) *HostDependencyUpdate {
	hdu.mutation.SetRequiredByID(id)
	return hdu
}

// SetNillableRequiredByID sets the "RequiredBy" edge to the Host entity by ID if the given value is not nil.
func (hdu *HostDependencyUpdate) SetNillableRequiredByID(id *uuid.UUID) *HostDependencyUpdate {
	if id != nil {
		hdu = hdu.SetRequiredByID(*id)
	}
	return hdu
}

// SetRequiredBy sets the "RequiredBy" edge to the Host entity.
func (hdu *HostDependencyUpdate) SetRequiredBy(h *Host) *HostDependencyUpdate {
	return hdu.SetRequiredByID(h.ID)
}

// SetNetworkID sets the "Network" edge to the Network entity by ID.
func (hdu *HostDependencyUpdate) SetNetworkID(id uuid.UUID) *HostDependencyUpdate {
	hdu.mutation.SetNetworkID(id)
	return hdu
}

// SetNillableNetworkID sets the "Network" edge to the Network entity by ID if the given value is not nil.
func (hdu *HostDependencyUpdate) SetNillableNetworkID(id *uuid.UUID) *HostDependencyUpdate {
	if id != nil {
		hdu = hdu.SetNetworkID(*id)
	}
	return hdu
}

// SetNetwork sets the "Network" edge to the Network entity.
func (hdu *HostDependencyUpdate) SetNetwork(n *Network) *HostDependencyUpdate {
	return hdu.SetNetworkID(n.ID)
}

// SetEnvironmentID sets the "Environment" edge to the Environment entity by ID.
func (hdu *HostDependencyUpdate) SetEnvironmentID(id uuid.UUID) *HostDependencyUpdate {
	hdu.mutation.SetEnvironmentID(id)
	return hdu
}

// SetNillableEnvironmentID sets the "Environment" edge to the Environment entity by ID if the given value is not nil.
func (hdu *HostDependencyUpdate) SetNillableEnvironmentID(id *uuid.UUID) *HostDependencyUpdate {
	if id != nil {
		hdu = hdu.SetEnvironmentID(*id)
	}
	return hdu
}

// SetEnvironment sets the "Environment" edge to the Environment entity.
func (hdu *HostDependencyUpdate) SetEnvironment(e *Environment) *HostDependencyUpdate {
	return hdu.SetEnvironmentID(e.ID)
}

// Mutation returns the HostDependencyMutation object of the builder.
func (hdu *HostDependencyUpdate) Mutation() *HostDependencyMutation {
	return hdu.mutation
}

// ClearDependOn clears the "DependOn" edge to the Host entity.
func (hdu *HostDependencyUpdate) ClearDependOn() *HostDependencyUpdate {
	hdu.mutation.ClearDependOn()
	return hdu
}

// ClearRequiredBy clears the "RequiredBy" edge to the Host entity.
func (hdu *HostDependencyUpdate) ClearRequiredBy() *HostDependencyUpdate {
	hdu.mutation.ClearRequiredBy()
	return hdu
}

// ClearNetwork clears the "Network" edge to the Network entity.
func (hdu *HostDependencyUpdate) ClearNetwork() *HostDependencyUpdate {
	hdu.mutation.ClearNetwork()
	return hdu
}

// ClearEnvironment clears the "Environment" edge to the Environment entity.
func (hdu *HostDependencyUpdate) ClearEnvironment() *HostDependencyUpdate {
	hdu.mutation.ClearEnvironment()
	return hdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hdu *HostDependencyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(hdu.hooks) == 0 {
		affected, err = hdu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HostDependencyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			hdu.mutation = mutation
			affected, err = hdu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(hdu.hooks) - 1; i >= 0; i-- {
			if hdu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = hdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, hdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (hdu *HostDependencyUpdate) SaveX(ctx context.Context) int {
	affected, err := hdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hdu *HostDependencyUpdate) Exec(ctx context.Context) error {
	_, err := hdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hdu *HostDependencyUpdate) ExecX(ctx context.Context) {
	if err := hdu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (hdu *HostDependencyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   hostdependency.Table,
			Columns: hostdependency.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: hostdependency.FieldID,
			},
		},
	}
	if ps := hdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hdu.mutation.HostID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: hostdependency.FieldHostID,
		})
	}
	if value, ok := hdu.mutation.NetworkID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: hostdependency.FieldNetworkID,
		})
	}
	if hdu.mutation.DependOnCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostdependency.DependOnTable,
			Columns: []string{hostdependency.DependOnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: host.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hdu.mutation.DependOnIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostdependency.DependOnTable,
			Columns: []string{hostdependency.DependOnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hdu.mutation.RequiredByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostdependency.RequiredByTable,
			Columns: []string{hostdependency.RequiredByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: host.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hdu.mutation.RequiredByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostdependency.RequiredByTable,
			Columns: []string{hostdependency.RequiredByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hdu.mutation.NetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostdependency.NetworkTable,
			Columns: []string{hostdependency.NetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: network.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hdu.mutation.NetworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostdependency.NetworkTable,
			Columns: []string{hostdependency.NetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: network.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hdu.mutation.EnvironmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hostdependency.EnvironmentTable,
			Columns: []string{hostdependency.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: environment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hdu.mutation.EnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hostdependency.EnvironmentTable,
			Columns: []string{hostdependency.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: environment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hostdependency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// HostDependencyUpdateOne is the builder for updating a single HostDependency entity.
type HostDependencyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HostDependencyMutation
}

// SetHostID sets the "host_id" field.
func (hduo *HostDependencyUpdateOne) SetHostID(s string) *HostDependencyUpdateOne {
	hduo.mutation.SetHostID(s)
	return hduo
}

// SetNetworkID sets the "network_id" field.
func (hduo *HostDependencyUpdateOne) SetNetworkID(s string) *HostDependencyUpdateOne {
	hduo.mutation.SetNetworkID(s)
	return hduo
}

// SetDependOnID sets the "DependOn" edge to the Host entity by ID.
func (hduo *HostDependencyUpdateOne) SetDependOnID(id uuid.UUID) *HostDependencyUpdateOne {
	hduo.mutation.SetDependOnID(id)
	return hduo
}

// SetNillableDependOnID sets the "DependOn" edge to the Host entity by ID if the given value is not nil.
func (hduo *HostDependencyUpdateOne) SetNillableDependOnID(id *uuid.UUID) *HostDependencyUpdateOne {
	if id != nil {
		hduo = hduo.SetDependOnID(*id)
	}
	return hduo
}

// SetDependOn sets the "DependOn" edge to the Host entity.
func (hduo *HostDependencyUpdateOne) SetDependOn(h *Host) *HostDependencyUpdateOne {
	return hduo.SetDependOnID(h.ID)
}

// SetRequiredByID sets the "RequiredBy" edge to the Host entity by ID.
func (hduo *HostDependencyUpdateOne) SetRequiredByID(id uuid.UUID) *HostDependencyUpdateOne {
	hduo.mutation.SetRequiredByID(id)
	return hduo
}

// SetNillableRequiredByID sets the "RequiredBy" edge to the Host entity by ID if the given value is not nil.
func (hduo *HostDependencyUpdateOne) SetNillableRequiredByID(id *uuid.UUID) *HostDependencyUpdateOne {
	if id != nil {
		hduo = hduo.SetRequiredByID(*id)
	}
	return hduo
}

// SetRequiredBy sets the "RequiredBy" edge to the Host entity.
func (hduo *HostDependencyUpdateOne) SetRequiredBy(h *Host) *HostDependencyUpdateOne {
	return hduo.SetRequiredByID(h.ID)
}

// SetNetworkID sets the "Network" edge to the Network entity by ID.
func (hduo *HostDependencyUpdateOne) SetNetworkID(id uuid.UUID) *HostDependencyUpdateOne {
	hduo.mutation.SetNetworkID(id)
	return hduo
}

// SetNillableNetworkID sets the "Network" edge to the Network entity by ID if the given value is not nil.
func (hduo *HostDependencyUpdateOne) SetNillableNetworkID(id *uuid.UUID) *HostDependencyUpdateOne {
	if id != nil {
		hduo = hduo.SetNetworkID(*id)
	}
	return hduo
}

// SetNetwork sets the "Network" edge to the Network entity.
func (hduo *HostDependencyUpdateOne) SetNetwork(n *Network) *HostDependencyUpdateOne {
	return hduo.SetNetworkID(n.ID)
}

// SetEnvironmentID sets the "Environment" edge to the Environment entity by ID.
func (hduo *HostDependencyUpdateOne) SetEnvironmentID(id uuid.UUID) *HostDependencyUpdateOne {
	hduo.mutation.SetEnvironmentID(id)
	return hduo
}

// SetNillableEnvironmentID sets the "Environment" edge to the Environment entity by ID if the given value is not nil.
func (hduo *HostDependencyUpdateOne) SetNillableEnvironmentID(id *uuid.UUID) *HostDependencyUpdateOne {
	if id != nil {
		hduo = hduo.SetEnvironmentID(*id)
	}
	return hduo
}

// SetEnvironment sets the "Environment" edge to the Environment entity.
func (hduo *HostDependencyUpdateOne) SetEnvironment(e *Environment) *HostDependencyUpdateOne {
	return hduo.SetEnvironmentID(e.ID)
}

// Mutation returns the HostDependencyMutation object of the builder.
func (hduo *HostDependencyUpdateOne) Mutation() *HostDependencyMutation {
	return hduo.mutation
}

// ClearDependOn clears the "DependOn" edge to the Host entity.
func (hduo *HostDependencyUpdateOne) ClearDependOn() *HostDependencyUpdateOne {
	hduo.mutation.ClearDependOn()
	return hduo
}

// ClearRequiredBy clears the "RequiredBy" edge to the Host entity.
func (hduo *HostDependencyUpdateOne) ClearRequiredBy() *HostDependencyUpdateOne {
	hduo.mutation.ClearRequiredBy()
	return hduo
}

// ClearNetwork clears the "Network" edge to the Network entity.
func (hduo *HostDependencyUpdateOne) ClearNetwork() *HostDependencyUpdateOne {
	hduo.mutation.ClearNetwork()
	return hduo
}

// ClearEnvironment clears the "Environment" edge to the Environment entity.
func (hduo *HostDependencyUpdateOne) ClearEnvironment() *HostDependencyUpdateOne {
	hduo.mutation.ClearEnvironment()
	return hduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (hduo *HostDependencyUpdateOne) Select(field string, fields ...string) *HostDependencyUpdateOne {
	hduo.fields = append([]string{field}, fields...)
	return hduo
}

// Save executes the query and returns the updated HostDependency entity.
func (hduo *HostDependencyUpdateOne) Save(ctx context.Context) (*HostDependency, error) {
	var (
		err  error
		node *HostDependency
	)
	if len(hduo.hooks) == 0 {
		node, err = hduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HostDependencyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			hduo.mutation = mutation
			node, err = hduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(hduo.hooks) - 1; i >= 0; i-- {
			if hduo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = hduo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, hduo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*HostDependency)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from HostDependencyMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (hduo *HostDependencyUpdateOne) SaveX(ctx context.Context) *HostDependency {
	node, err := hduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (hduo *HostDependencyUpdateOne) Exec(ctx context.Context) error {
	_, err := hduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hduo *HostDependencyUpdateOne) ExecX(ctx context.Context) {
	if err := hduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (hduo *HostDependencyUpdateOne) sqlSave(ctx context.Context) (_node *HostDependency, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   hostdependency.Table,
			Columns: hostdependency.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: hostdependency.FieldID,
			},
		},
	}
	id, ok := hduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HostDependency.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := hduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hostdependency.FieldID)
		for _, f := range fields {
			if !hostdependency.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hostdependency.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := hduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hduo.mutation.HostID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: hostdependency.FieldHostID,
		})
	}
	if value, ok := hduo.mutation.NetworkID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: hostdependency.FieldNetworkID,
		})
	}
	if hduo.mutation.DependOnCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostdependency.DependOnTable,
			Columns: []string{hostdependency.DependOnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: host.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hduo.mutation.DependOnIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostdependency.DependOnTable,
			Columns: []string{hostdependency.DependOnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hduo.mutation.RequiredByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostdependency.RequiredByTable,
			Columns: []string{hostdependency.RequiredByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: host.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hduo.mutation.RequiredByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostdependency.RequiredByTable,
			Columns: []string{hostdependency.RequiredByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hduo.mutation.NetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostdependency.NetworkTable,
			Columns: []string{hostdependency.NetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: network.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hduo.mutation.NetworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostdependency.NetworkTable,
			Columns: []string{hostdependency.NetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: network.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hduo.mutation.EnvironmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hostdependency.EnvironmentTable,
			Columns: []string{hostdependency.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: environment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hduo.mutation.EnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hostdependency.EnvironmentTable,
			Columns: []string{hostdependency.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: environment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &HostDependency{config: hduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, hduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hostdependency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
