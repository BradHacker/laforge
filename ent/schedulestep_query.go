// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/ansible"
	"github.com/gen0cide/laforge/ent/command"
	"github.com/gen0cide/laforge/ent/filedelete"
	"github.com/gen0cide/laforge/ent/filedownload"
	"github.com/gen0cide/laforge/ent/fileextract"
	"github.com/gen0cide/laforge/ent/host"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/provisionedschedulestep"
	"github.com/gen0cide/laforge/ent/schedulestep"
	"github.com/gen0cide/laforge/ent/script"
	"github.com/gen0cide/laforge/ent/status"
	"github.com/google/uuid"
)

// ScheduleStepQuery is the builder for querying ScheduleStep entities.
type ScheduleStepQuery struct {
	config
	limit                                     *int
	offset                                    *int
	unique                                    *bool
	order                                     []OrderFunc
	fields                                    []string
	predicates                                []predicate.ScheduleStep
	withScheduleStepToStatus                  *StatusQuery
	withScheduleStepToScript                  *ScriptQuery
	withScheduleStepToCommand                 *CommandQuery
	withScheduleStepToFileDelete              *FileDeleteQuery
	withScheduleStepToFileDownload            *FileDownloadQuery
	withScheduleStepToFileExtract             *FileExtractQuery
	withScheduleStepToAnsible                 *AnsibleQuery
	withScheduleStepToProvisionedScheduleStep *ProvisionedScheduleStepQuery
	withScheduleStepToHost                    *HostQuery
	withFKs                                   bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ScheduleStepQuery builder.
func (ssq *ScheduleStepQuery) Where(ps ...predicate.ScheduleStep) *ScheduleStepQuery {
	ssq.predicates = append(ssq.predicates, ps...)
	return ssq
}

// Limit adds a limit step to the query.
func (ssq *ScheduleStepQuery) Limit(limit int) *ScheduleStepQuery {
	ssq.limit = &limit
	return ssq
}

// Offset adds an offset step to the query.
func (ssq *ScheduleStepQuery) Offset(offset int) *ScheduleStepQuery {
	ssq.offset = &offset
	return ssq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ssq *ScheduleStepQuery) Unique(unique bool) *ScheduleStepQuery {
	ssq.unique = &unique
	return ssq
}

// Order adds an order step to the query.
func (ssq *ScheduleStepQuery) Order(o ...OrderFunc) *ScheduleStepQuery {
	ssq.order = append(ssq.order, o...)
	return ssq
}

// QueryScheduleStepToStatus chains the current query on the "ScheduleStepToStatus" edge.
func (ssq *ScheduleStepQuery) QueryScheduleStepToStatus() *StatusQuery {
	query := &StatusQuery{config: ssq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ssq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(schedulestep.Table, schedulestep.FieldID, selector),
			sqlgraph.To(status.Table, status.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, schedulestep.ScheduleStepToStatusTable, schedulestep.ScheduleStepToStatusColumn),
		)
		fromU = sqlgraph.SetNeighbors(ssq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryScheduleStepToScript chains the current query on the "ScheduleStepToScript" edge.
func (ssq *ScheduleStepQuery) QueryScheduleStepToScript() *ScriptQuery {
	query := &ScriptQuery{config: ssq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ssq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(schedulestep.Table, schedulestep.FieldID, selector),
			sqlgraph.To(script.Table, script.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, schedulestep.ScheduleStepToScriptTable, schedulestep.ScheduleStepToScriptColumn),
		)
		fromU = sqlgraph.SetNeighbors(ssq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryScheduleStepToCommand chains the current query on the "ScheduleStepToCommand" edge.
func (ssq *ScheduleStepQuery) QueryScheduleStepToCommand() *CommandQuery {
	query := &CommandQuery{config: ssq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ssq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(schedulestep.Table, schedulestep.FieldID, selector),
			sqlgraph.To(command.Table, command.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, schedulestep.ScheduleStepToCommandTable, schedulestep.ScheduleStepToCommandColumn),
		)
		fromU = sqlgraph.SetNeighbors(ssq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryScheduleStepToFileDelete chains the current query on the "ScheduleStepToFileDelete" edge.
func (ssq *ScheduleStepQuery) QueryScheduleStepToFileDelete() *FileDeleteQuery {
	query := &FileDeleteQuery{config: ssq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ssq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(schedulestep.Table, schedulestep.FieldID, selector),
			sqlgraph.To(filedelete.Table, filedelete.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, schedulestep.ScheduleStepToFileDeleteTable, schedulestep.ScheduleStepToFileDeleteColumn),
		)
		fromU = sqlgraph.SetNeighbors(ssq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryScheduleStepToFileDownload chains the current query on the "ScheduleStepToFileDownload" edge.
func (ssq *ScheduleStepQuery) QueryScheduleStepToFileDownload() *FileDownloadQuery {
	query := &FileDownloadQuery{config: ssq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ssq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(schedulestep.Table, schedulestep.FieldID, selector),
			sqlgraph.To(filedownload.Table, filedownload.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, schedulestep.ScheduleStepToFileDownloadTable, schedulestep.ScheduleStepToFileDownloadColumn),
		)
		fromU = sqlgraph.SetNeighbors(ssq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryScheduleStepToFileExtract chains the current query on the "ScheduleStepToFileExtract" edge.
func (ssq *ScheduleStepQuery) QueryScheduleStepToFileExtract() *FileExtractQuery {
	query := &FileExtractQuery{config: ssq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ssq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(schedulestep.Table, schedulestep.FieldID, selector),
			sqlgraph.To(fileextract.Table, fileextract.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, schedulestep.ScheduleStepToFileExtractTable, schedulestep.ScheduleStepToFileExtractColumn),
		)
		fromU = sqlgraph.SetNeighbors(ssq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryScheduleStepToAnsible chains the current query on the "ScheduleStepToAnsible" edge.
func (ssq *ScheduleStepQuery) QueryScheduleStepToAnsible() *AnsibleQuery {
	query := &AnsibleQuery{config: ssq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ssq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(schedulestep.Table, schedulestep.FieldID, selector),
			sqlgraph.To(ansible.Table, ansible.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, schedulestep.ScheduleStepToAnsibleTable, schedulestep.ScheduleStepToAnsibleColumn),
		)
		fromU = sqlgraph.SetNeighbors(ssq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryScheduleStepToProvisionedScheduleStep chains the current query on the "ScheduleStepToProvisionedScheduleStep" edge.
func (ssq *ScheduleStepQuery) QueryScheduleStepToProvisionedScheduleStep() *ProvisionedScheduleStepQuery {
	query := &ProvisionedScheduleStepQuery{config: ssq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ssq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(schedulestep.Table, schedulestep.FieldID, selector),
			sqlgraph.To(provisionedschedulestep.Table, provisionedschedulestep.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, schedulestep.ScheduleStepToProvisionedScheduleStepTable, schedulestep.ScheduleStepToProvisionedScheduleStepColumn),
		)
		fromU = sqlgraph.SetNeighbors(ssq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryScheduleStepToHost chains the current query on the "ScheduleStepToHost" edge.
func (ssq *ScheduleStepQuery) QueryScheduleStepToHost() *HostQuery {
	query := &HostQuery{config: ssq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ssq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(schedulestep.Table, schedulestep.FieldID, selector),
			sqlgraph.To(host.Table, host.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, schedulestep.ScheduleStepToHostTable, schedulestep.ScheduleStepToHostColumn),
		)
		fromU = sqlgraph.SetNeighbors(ssq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ScheduleStep entity from the query.
// Returns a *NotFoundError when no ScheduleStep was found.
func (ssq *ScheduleStepQuery) First(ctx context.Context) (*ScheduleStep, error) {
	nodes, err := ssq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{schedulestep.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ssq *ScheduleStepQuery) FirstX(ctx context.Context) *ScheduleStep {
	node, err := ssq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ScheduleStep ID from the query.
// Returns a *NotFoundError when no ScheduleStep ID was found.
func (ssq *ScheduleStepQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = ssq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{schedulestep.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ssq *ScheduleStepQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := ssq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ScheduleStep entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ScheduleStep entity is found.
// Returns a *NotFoundError when no ScheduleStep entities are found.
func (ssq *ScheduleStepQuery) Only(ctx context.Context) (*ScheduleStep, error) {
	nodes, err := ssq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{schedulestep.Label}
	default:
		return nil, &NotSingularError{schedulestep.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ssq *ScheduleStepQuery) OnlyX(ctx context.Context) *ScheduleStep {
	node, err := ssq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ScheduleStep ID in the query.
// Returns a *NotSingularError when more than one ScheduleStep ID is found.
// Returns a *NotFoundError when no entities are found.
func (ssq *ScheduleStepQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = ssq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{schedulestep.Label}
	default:
		err = &NotSingularError{schedulestep.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ssq *ScheduleStepQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := ssq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ScheduleSteps.
func (ssq *ScheduleStepQuery) All(ctx context.Context) ([]*ScheduleStep, error) {
	if err := ssq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return ssq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (ssq *ScheduleStepQuery) AllX(ctx context.Context) []*ScheduleStep {
	nodes, err := ssq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ScheduleStep IDs.
func (ssq *ScheduleStepQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := ssq.Select(schedulestep.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ssq *ScheduleStepQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := ssq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ssq *ScheduleStepQuery) Count(ctx context.Context) (int, error) {
	if err := ssq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return ssq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (ssq *ScheduleStepQuery) CountX(ctx context.Context) int {
	count, err := ssq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ssq *ScheduleStepQuery) Exist(ctx context.Context) (bool, error) {
	if err := ssq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return ssq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (ssq *ScheduleStepQuery) ExistX(ctx context.Context) bool {
	exist, err := ssq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ScheduleStepQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ssq *ScheduleStepQuery) Clone() *ScheduleStepQuery {
	if ssq == nil {
		return nil
	}
	return &ScheduleStepQuery{
		config:                         ssq.config,
		limit:                          ssq.limit,
		offset:                         ssq.offset,
		order:                          append([]OrderFunc{}, ssq.order...),
		predicates:                     append([]predicate.ScheduleStep{}, ssq.predicates...),
		withScheduleStepToStatus:       ssq.withScheduleStepToStatus.Clone(),
		withScheduleStepToScript:       ssq.withScheduleStepToScript.Clone(),
		withScheduleStepToCommand:      ssq.withScheduleStepToCommand.Clone(),
		withScheduleStepToFileDelete:   ssq.withScheduleStepToFileDelete.Clone(),
		withScheduleStepToFileDownload: ssq.withScheduleStepToFileDownload.Clone(),
		withScheduleStepToFileExtract:  ssq.withScheduleStepToFileExtract.Clone(),
		withScheduleStepToAnsible:      ssq.withScheduleStepToAnsible.Clone(),
		withScheduleStepToProvisionedScheduleStep: ssq.withScheduleStepToProvisionedScheduleStep.Clone(),
		withScheduleStepToHost:                    ssq.withScheduleStepToHost.Clone(),
		// clone intermediate query.
		sql:    ssq.sql.Clone(),
		path:   ssq.path,
		unique: ssq.unique,
	}
}

// WithScheduleStepToStatus tells the query-builder to eager-load the nodes that are connected to
// the "ScheduleStepToStatus" edge. The optional arguments are used to configure the query builder of the edge.
func (ssq *ScheduleStepQuery) WithScheduleStepToStatus(opts ...func(*StatusQuery)) *ScheduleStepQuery {
	query := &StatusQuery{config: ssq.config}
	for _, opt := range opts {
		opt(query)
	}
	ssq.withScheduleStepToStatus = query
	return ssq
}

// WithScheduleStepToScript tells the query-builder to eager-load the nodes that are connected to
// the "ScheduleStepToScript" edge. The optional arguments are used to configure the query builder of the edge.
func (ssq *ScheduleStepQuery) WithScheduleStepToScript(opts ...func(*ScriptQuery)) *ScheduleStepQuery {
	query := &ScriptQuery{config: ssq.config}
	for _, opt := range opts {
		opt(query)
	}
	ssq.withScheduleStepToScript = query
	return ssq
}

// WithScheduleStepToCommand tells the query-builder to eager-load the nodes that are connected to
// the "ScheduleStepToCommand" edge. The optional arguments are used to configure the query builder of the edge.
func (ssq *ScheduleStepQuery) WithScheduleStepToCommand(opts ...func(*CommandQuery)) *ScheduleStepQuery {
	query := &CommandQuery{config: ssq.config}
	for _, opt := range opts {
		opt(query)
	}
	ssq.withScheduleStepToCommand = query
	return ssq
}

// WithScheduleStepToFileDelete tells the query-builder to eager-load the nodes that are connected to
// the "ScheduleStepToFileDelete" edge. The optional arguments are used to configure the query builder of the edge.
func (ssq *ScheduleStepQuery) WithScheduleStepToFileDelete(opts ...func(*FileDeleteQuery)) *ScheduleStepQuery {
	query := &FileDeleteQuery{config: ssq.config}
	for _, opt := range opts {
		opt(query)
	}
	ssq.withScheduleStepToFileDelete = query
	return ssq
}

// WithScheduleStepToFileDownload tells the query-builder to eager-load the nodes that are connected to
// the "ScheduleStepToFileDownload" edge. The optional arguments are used to configure the query builder of the edge.
func (ssq *ScheduleStepQuery) WithScheduleStepToFileDownload(opts ...func(*FileDownloadQuery)) *ScheduleStepQuery {
	query := &FileDownloadQuery{config: ssq.config}
	for _, opt := range opts {
		opt(query)
	}
	ssq.withScheduleStepToFileDownload = query
	return ssq
}

// WithScheduleStepToFileExtract tells the query-builder to eager-load the nodes that are connected to
// the "ScheduleStepToFileExtract" edge. The optional arguments are used to configure the query builder of the edge.
func (ssq *ScheduleStepQuery) WithScheduleStepToFileExtract(opts ...func(*FileExtractQuery)) *ScheduleStepQuery {
	query := &FileExtractQuery{config: ssq.config}
	for _, opt := range opts {
		opt(query)
	}
	ssq.withScheduleStepToFileExtract = query
	return ssq
}

// WithScheduleStepToAnsible tells the query-builder to eager-load the nodes that are connected to
// the "ScheduleStepToAnsible" edge. The optional arguments are used to configure the query builder of the edge.
func (ssq *ScheduleStepQuery) WithScheduleStepToAnsible(opts ...func(*AnsibleQuery)) *ScheduleStepQuery {
	query := &AnsibleQuery{config: ssq.config}
	for _, opt := range opts {
		opt(query)
	}
	ssq.withScheduleStepToAnsible = query
	return ssq
}

// WithScheduleStepToProvisionedScheduleStep tells the query-builder to eager-load the nodes that are connected to
// the "ScheduleStepToProvisionedScheduleStep" edge. The optional arguments are used to configure the query builder of the edge.
func (ssq *ScheduleStepQuery) WithScheduleStepToProvisionedScheduleStep(opts ...func(*ProvisionedScheduleStepQuery)) *ScheduleStepQuery {
	query := &ProvisionedScheduleStepQuery{config: ssq.config}
	for _, opt := range opts {
		opt(query)
	}
	ssq.withScheduleStepToProvisionedScheduleStep = query
	return ssq
}

// WithScheduleStepToHost tells the query-builder to eager-load the nodes that are connected to
// the "ScheduleStepToHost" edge. The optional arguments are used to configure the query builder of the edge.
func (ssq *ScheduleStepQuery) WithScheduleStepToHost(opts ...func(*HostQuery)) *ScheduleStepQuery {
	query := &HostQuery{config: ssq.config}
	for _, opt := range opts {
		opt(query)
	}
	ssq.withScheduleStepToHost = query
	return ssq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Type schedulestep.Type `json:"type,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ScheduleStep.Query().
//		GroupBy(schedulestep.FieldType).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ssq *ScheduleStepQuery) GroupBy(field string, fields ...string) *ScheduleStepGroupBy {
	grbuild := &ScheduleStepGroupBy{config: ssq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := ssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return ssq.sqlQuery(ctx), nil
	}
	grbuild.label = schedulestep.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Type schedulestep.Type `json:"type,omitempty"`
//	}
//
//	client.ScheduleStep.Query().
//		Select(schedulestep.FieldType).
//		Scan(ctx, &v)
func (ssq *ScheduleStepQuery) Select(fields ...string) *ScheduleStepSelect {
	ssq.fields = append(ssq.fields, fields...)
	selbuild := &ScheduleStepSelect{ScheduleStepQuery: ssq}
	selbuild.label = schedulestep.Label
	selbuild.flds, selbuild.scan = &ssq.fields, selbuild.Scan
	return selbuild
}

func (ssq *ScheduleStepQuery) prepareQuery(ctx context.Context) error {
	for _, f := range ssq.fields {
		if !schedulestep.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ssq.path != nil {
		prev, err := ssq.path(ctx)
		if err != nil {
			return err
		}
		ssq.sql = prev
	}
	return nil
}

func (ssq *ScheduleStepQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ScheduleStep, error) {
	var (
		nodes       = []*ScheduleStep{}
		withFKs     = ssq.withFKs
		_spec       = ssq.querySpec()
		loadedTypes = [9]bool{
			ssq.withScheduleStepToStatus != nil,
			ssq.withScheduleStepToScript != nil,
			ssq.withScheduleStepToCommand != nil,
			ssq.withScheduleStepToFileDelete != nil,
			ssq.withScheduleStepToFileDownload != nil,
			ssq.withScheduleStepToFileExtract != nil,
			ssq.withScheduleStepToAnsible != nil,
			ssq.withScheduleStepToProvisionedScheduleStep != nil,
			ssq.withScheduleStepToHost != nil,
		}
	)
	if ssq.withScheduleStepToScript != nil || ssq.withScheduleStepToCommand != nil || ssq.withScheduleStepToFileDelete != nil || ssq.withScheduleStepToFileDownload != nil || ssq.withScheduleStepToFileExtract != nil || ssq.withScheduleStepToAnsible != nil || ssq.withScheduleStepToHost != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, schedulestep.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*ScheduleStep).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &ScheduleStep{config: ssq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ssq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ssq.withScheduleStepToStatus; query != nil {
		if err := ssq.loadScheduleStepToStatus(ctx, query, nodes, nil,
			func(n *ScheduleStep, e *Status) { n.Edges.ScheduleStepToStatus = e }); err != nil {
			return nil, err
		}
	}
	if query := ssq.withScheduleStepToScript; query != nil {
		if err := ssq.loadScheduleStepToScript(ctx, query, nodes, nil,
			func(n *ScheduleStep, e *Script) { n.Edges.ScheduleStepToScript = e }); err != nil {
			return nil, err
		}
	}
	if query := ssq.withScheduleStepToCommand; query != nil {
		if err := ssq.loadScheduleStepToCommand(ctx, query, nodes, nil,
			func(n *ScheduleStep, e *Command) { n.Edges.ScheduleStepToCommand = e }); err != nil {
			return nil, err
		}
	}
	if query := ssq.withScheduleStepToFileDelete; query != nil {
		if err := ssq.loadScheduleStepToFileDelete(ctx, query, nodes, nil,
			func(n *ScheduleStep, e *FileDelete) { n.Edges.ScheduleStepToFileDelete = e }); err != nil {
			return nil, err
		}
	}
	if query := ssq.withScheduleStepToFileDownload; query != nil {
		if err := ssq.loadScheduleStepToFileDownload(ctx, query, nodes, nil,
			func(n *ScheduleStep, e *FileDownload) { n.Edges.ScheduleStepToFileDownload = e }); err != nil {
			return nil, err
		}
	}
	if query := ssq.withScheduleStepToFileExtract; query != nil {
		if err := ssq.loadScheduleStepToFileExtract(ctx, query, nodes, nil,
			func(n *ScheduleStep, e *FileExtract) { n.Edges.ScheduleStepToFileExtract = e }); err != nil {
			return nil, err
		}
	}
	if query := ssq.withScheduleStepToAnsible; query != nil {
		if err := ssq.loadScheduleStepToAnsible(ctx, query, nodes, nil,
			func(n *ScheduleStep, e *Ansible) { n.Edges.ScheduleStepToAnsible = e }); err != nil {
			return nil, err
		}
	}
	if query := ssq.withScheduleStepToProvisionedScheduleStep; query != nil {
		if err := ssq.loadScheduleStepToProvisionedScheduleStep(ctx, query, nodes,
			func(n *ScheduleStep) { n.Edges.ScheduleStepToProvisionedScheduleStep = []*ProvisionedScheduleStep{} },
			func(n *ScheduleStep, e *ProvisionedScheduleStep) {
				n.Edges.ScheduleStepToProvisionedScheduleStep = append(n.Edges.ScheduleStepToProvisionedScheduleStep, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := ssq.withScheduleStepToHost; query != nil {
		if err := ssq.loadScheduleStepToHost(ctx, query, nodes, nil,
			func(n *ScheduleStep, e *Host) { n.Edges.ScheduleStepToHost = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ssq *ScheduleStepQuery) loadScheduleStepToStatus(ctx context.Context, query *StatusQuery, nodes []*ScheduleStep, init func(*ScheduleStep), assign func(*ScheduleStep, *Status)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*ScheduleStep)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.Status(func(s *sql.Selector) {
		s.Where(sql.InValues(schedulestep.ScheduleStepToStatusColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.schedule_step_schedule_step_to_status
		if fk == nil {
			return fmt.Errorf(`foreign-key "schedule_step_schedule_step_to_status" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "schedule_step_schedule_step_to_status" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (ssq *ScheduleStepQuery) loadScheduleStepToScript(ctx context.Context, query *ScriptQuery, nodes []*ScheduleStep, init func(*ScheduleStep), assign func(*ScheduleStep, *Script)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ScheduleStep)
	for i := range nodes {
		if nodes[i].schedule_step_schedule_step_to_script == nil {
			continue
		}
		fk := *nodes[i].schedule_step_schedule_step_to_script
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(script.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "schedule_step_schedule_step_to_script" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ssq *ScheduleStepQuery) loadScheduleStepToCommand(ctx context.Context, query *CommandQuery, nodes []*ScheduleStep, init func(*ScheduleStep), assign func(*ScheduleStep, *Command)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ScheduleStep)
	for i := range nodes {
		if nodes[i].schedule_step_schedule_step_to_command == nil {
			continue
		}
		fk := *nodes[i].schedule_step_schedule_step_to_command
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(command.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "schedule_step_schedule_step_to_command" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ssq *ScheduleStepQuery) loadScheduleStepToFileDelete(ctx context.Context, query *FileDeleteQuery, nodes []*ScheduleStep, init func(*ScheduleStep), assign func(*ScheduleStep, *FileDelete)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ScheduleStep)
	for i := range nodes {
		if nodes[i].schedule_step_schedule_step_to_file_delete == nil {
			continue
		}
		fk := *nodes[i].schedule_step_schedule_step_to_file_delete
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(filedelete.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "schedule_step_schedule_step_to_file_delete" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ssq *ScheduleStepQuery) loadScheduleStepToFileDownload(ctx context.Context, query *FileDownloadQuery, nodes []*ScheduleStep, init func(*ScheduleStep), assign func(*ScheduleStep, *FileDownload)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ScheduleStep)
	for i := range nodes {
		if nodes[i].schedule_step_schedule_step_to_file_download == nil {
			continue
		}
		fk := *nodes[i].schedule_step_schedule_step_to_file_download
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(filedownload.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "schedule_step_schedule_step_to_file_download" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ssq *ScheduleStepQuery) loadScheduleStepToFileExtract(ctx context.Context, query *FileExtractQuery, nodes []*ScheduleStep, init func(*ScheduleStep), assign func(*ScheduleStep, *FileExtract)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ScheduleStep)
	for i := range nodes {
		if nodes[i].schedule_step_schedule_step_to_file_extract == nil {
			continue
		}
		fk := *nodes[i].schedule_step_schedule_step_to_file_extract
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(fileextract.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "schedule_step_schedule_step_to_file_extract" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ssq *ScheduleStepQuery) loadScheduleStepToAnsible(ctx context.Context, query *AnsibleQuery, nodes []*ScheduleStep, init func(*ScheduleStep), assign func(*ScheduleStep, *Ansible)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ScheduleStep)
	for i := range nodes {
		if nodes[i].schedule_step_schedule_step_to_ansible == nil {
			continue
		}
		fk := *nodes[i].schedule_step_schedule_step_to_ansible
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(ansible.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "schedule_step_schedule_step_to_ansible" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ssq *ScheduleStepQuery) loadScheduleStepToProvisionedScheduleStep(ctx context.Context, query *ProvisionedScheduleStepQuery, nodes []*ScheduleStep, init func(*ScheduleStep), assign func(*ScheduleStep, *ProvisionedScheduleStep)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*ScheduleStep)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ProvisionedScheduleStep(func(s *sql.Selector) {
		s.Where(sql.InValues(schedulestep.ScheduleStepToProvisionedScheduleStepColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.schedule_step_schedule_step_to_provisioned_schedule_step
		if fk == nil {
			return fmt.Errorf(`foreign-key "schedule_step_schedule_step_to_provisioned_schedule_step" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "schedule_step_schedule_step_to_provisioned_schedule_step" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (ssq *ScheduleStepQuery) loadScheduleStepToHost(ctx context.Context, query *HostQuery, nodes []*ScheduleStep, init func(*ScheduleStep), assign func(*ScheduleStep, *Host)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ScheduleStep)
	for i := range nodes {
		if nodes[i].host_host_to_schedule_step == nil {
			continue
		}
		fk := *nodes[i].host_host_to_schedule_step
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(host.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "host_host_to_schedule_step" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ssq *ScheduleStepQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ssq.querySpec()
	_spec.Node.Columns = ssq.fields
	if len(ssq.fields) > 0 {
		_spec.Unique = ssq.unique != nil && *ssq.unique
	}
	return sqlgraph.CountNodes(ctx, ssq.driver, _spec)
}

func (ssq *ScheduleStepQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := ssq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (ssq *ScheduleStepQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   schedulestep.Table,
			Columns: schedulestep.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: schedulestep.FieldID,
			},
		},
		From:   ssq.sql,
		Unique: true,
	}
	if unique := ssq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := ssq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, schedulestep.FieldID)
		for i := range fields {
			if fields[i] != schedulestep.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ssq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ssq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ssq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ssq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ssq *ScheduleStepQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ssq.driver.Dialect())
	t1 := builder.Table(schedulestep.Table)
	columns := ssq.fields
	if len(columns) == 0 {
		columns = schedulestep.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ssq.sql != nil {
		selector = ssq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ssq.unique != nil && *ssq.unique {
		selector.Distinct()
	}
	for _, p := range ssq.predicates {
		p(selector)
	}
	for _, p := range ssq.order {
		p(selector)
	}
	if offset := ssq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ssq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ScheduleStepGroupBy is the group-by builder for ScheduleStep entities.
type ScheduleStepGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ssgb *ScheduleStepGroupBy) Aggregate(fns ...AggregateFunc) *ScheduleStepGroupBy {
	ssgb.fns = append(ssgb.fns, fns...)
	return ssgb
}

// Scan applies the group-by query and scans the result into the given value.
func (ssgb *ScheduleStepGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := ssgb.path(ctx)
	if err != nil {
		return err
	}
	ssgb.sql = query
	return ssgb.sqlScan(ctx, v)
}

func (ssgb *ScheduleStepGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range ssgb.fields {
		if !schedulestep.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := ssgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ssgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ssgb *ScheduleStepGroupBy) sqlQuery() *sql.Selector {
	selector := ssgb.sql.Select()
	aggregation := make([]string, 0, len(ssgb.fns))
	for _, fn := range ssgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(ssgb.fields)+len(ssgb.fns))
		for _, f := range ssgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(ssgb.fields...)...)
}

// ScheduleStepSelect is the builder for selecting fields of ScheduleStep entities.
type ScheduleStepSelect struct {
	*ScheduleStepQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (sss *ScheduleStepSelect) Scan(ctx context.Context, v interface{}) error {
	if err := sss.prepareQuery(ctx); err != nil {
		return err
	}
	sss.sql = sss.ScheduleStepQuery.sqlQuery(ctx)
	return sss.sqlScan(ctx, v)
}

func (sss *ScheduleStepSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := sss.sql.Query()
	if err := sss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
