// Code generated by ent, DO NOT EDIT.

package schedulestep

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Repeated applies equality check predicate on the "repeated" field. It's identical to RepeatedEQ.
func Repeated(v bool) predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRepeated), v))
	})
}

// StartTime applies equality check predicate on the "start_time" field. It's identical to StartTimeEQ.
func StartTime(v time.Time) predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartTime), v))
	})
}

// EndTime applies equality check predicate on the "end_time" field. It's identical to EndTimeEQ.
func EndTime(v time.Time) predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndTime), v))
	})
}

// Interval applies equality check predicate on the "interval" field. It's identical to IntervalEQ.
func Interval(v int) predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInterval), v))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.ScheduleStep {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ScheduleStep(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.ScheduleStep {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ScheduleStep(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// RepeatedEQ applies the EQ predicate on the "repeated" field.
func RepeatedEQ(v bool) predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRepeated), v))
	})
}

// RepeatedNEQ applies the NEQ predicate on the "repeated" field.
func RepeatedNEQ(v bool) predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRepeated), v))
	})
}

// StartTimeEQ applies the EQ predicate on the "start_time" field.
func StartTimeEQ(v time.Time) predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartTime), v))
	})
}

// StartTimeNEQ applies the NEQ predicate on the "start_time" field.
func StartTimeNEQ(v time.Time) predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStartTime), v))
	})
}

// StartTimeIn applies the In predicate on the "start_time" field.
func StartTimeIn(vs ...time.Time) predicate.ScheduleStep {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ScheduleStep(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStartTime), v...))
	})
}

// StartTimeNotIn applies the NotIn predicate on the "start_time" field.
func StartTimeNotIn(vs ...time.Time) predicate.ScheduleStep {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ScheduleStep(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStartTime), v...))
	})
}

// StartTimeGT applies the GT predicate on the "start_time" field.
func StartTimeGT(v time.Time) predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStartTime), v))
	})
}

// StartTimeGTE applies the GTE predicate on the "start_time" field.
func StartTimeGTE(v time.Time) predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStartTime), v))
	})
}

// StartTimeLT applies the LT predicate on the "start_time" field.
func StartTimeLT(v time.Time) predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStartTime), v))
	})
}

// StartTimeLTE applies the LTE predicate on the "start_time" field.
func StartTimeLTE(v time.Time) predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStartTime), v))
	})
}

// EndTimeEQ applies the EQ predicate on the "end_time" field.
func EndTimeEQ(v time.Time) predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndTime), v))
	})
}

// EndTimeNEQ applies the NEQ predicate on the "end_time" field.
func EndTimeNEQ(v time.Time) predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEndTime), v))
	})
}

// EndTimeIn applies the In predicate on the "end_time" field.
func EndTimeIn(vs ...time.Time) predicate.ScheduleStep {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ScheduleStep(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEndTime), v...))
	})
}

// EndTimeNotIn applies the NotIn predicate on the "end_time" field.
func EndTimeNotIn(vs ...time.Time) predicate.ScheduleStep {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ScheduleStep(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEndTime), v...))
	})
}

// EndTimeGT applies the GT predicate on the "end_time" field.
func EndTimeGT(v time.Time) predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEndTime), v))
	})
}

// EndTimeGTE applies the GTE predicate on the "end_time" field.
func EndTimeGTE(v time.Time) predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEndTime), v))
	})
}

// EndTimeLT applies the LT predicate on the "end_time" field.
func EndTimeLT(v time.Time) predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEndTime), v))
	})
}

// EndTimeLTE applies the LTE predicate on the "end_time" field.
func EndTimeLTE(v time.Time) predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEndTime), v))
	})
}

// IntervalEQ applies the EQ predicate on the "interval" field.
func IntervalEQ(v int) predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInterval), v))
	})
}

// IntervalNEQ applies the NEQ predicate on the "interval" field.
func IntervalNEQ(v int) predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInterval), v))
	})
}

// IntervalIn applies the In predicate on the "interval" field.
func IntervalIn(vs ...int) predicate.ScheduleStep {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ScheduleStep(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldInterval), v...))
	})
}

// IntervalNotIn applies the NotIn predicate on the "interval" field.
func IntervalNotIn(vs ...int) predicate.ScheduleStep {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ScheduleStep(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldInterval), v...))
	})
}

// IntervalGT applies the GT predicate on the "interval" field.
func IntervalGT(v int) predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInterval), v))
	})
}

// IntervalGTE applies the GTE predicate on the "interval" field.
func IntervalGTE(v int) predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInterval), v))
	})
}

// IntervalLT applies the LT predicate on the "interval" field.
func IntervalLT(v int) predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInterval), v))
	})
}

// IntervalLTE applies the LTE predicate on the "interval" field.
func IntervalLTE(v int) predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInterval), v))
	})
}

// HasScheduleStepToStatus applies the HasEdge predicate on the "ScheduleStepToStatus" edge.
func HasScheduleStepToStatus() predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ScheduleStepToStatusTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ScheduleStepToStatusTable, ScheduleStepToStatusColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasScheduleStepToStatusWith applies the HasEdge predicate on the "ScheduleStepToStatus" edge with a given conditions (other predicates).
func HasScheduleStepToStatusWith(preds ...predicate.Status) predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ScheduleStepToStatusInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ScheduleStepToStatusTable, ScheduleStepToStatusColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasScheduleStepToScript applies the HasEdge predicate on the "ScheduleStepToScript" edge.
func HasScheduleStepToScript() predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ScheduleStepToScriptTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ScheduleStepToScriptTable, ScheduleStepToScriptColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasScheduleStepToScriptWith applies the HasEdge predicate on the "ScheduleStepToScript" edge with a given conditions (other predicates).
func HasScheduleStepToScriptWith(preds ...predicate.Script) predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ScheduleStepToScriptInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ScheduleStepToScriptTable, ScheduleStepToScriptColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasScheduleStepToCommand applies the HasEdge predicate on the "ScheduleStepToCommand" edge.
func HasScheduleStepToCommand() predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ScheduleStepToCommandTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ScheduleStepToCommandTable, ScheduleStepToCommandColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasScheduleStepToCommandWith applies the HasEdge predicate on the "ScheduleStepToCommand" edge with a given conditions (other predicates).
func HasScheduleStepToCommandWith(preds ...predicate.Command) predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ScheduleStepToCommandInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ScheduleStepToCommandTable, ScheduleStepToCommandColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasScheduleStepToFileDelete applies the HasEdge predicate on the "ScheduleStepToFileDelete" edge.
func HasScheduleStepToFileDelete() predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ScheduleStepToFileDeleteTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ScheduleStepToFileDeleteTable, ScheduleStepToFileDeleteColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasScheduleStepToFileDeleteWith applies the HasEdge predicate on the "ScheduleStepToFileDelete" edge with a given conditions (other predicates).
func HasScheduleStepToFileDeleteWith(preds ...predicate.FileDelete) predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ScheduleStepToFileDeleteInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ScheduleStepToFileDeleteTable, ScheduleStepToFileDeleteColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasScheduleStepToFileDownload applies the HasEdge predicate on the "ScheduleStepToFileDownload" edge.
func HasScheduleStepToFileDownload() predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ScheduleStepToFileDownloadTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ScheduleStepToFileDownloadTable, ScheduleStepToFileDownloadColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasScheduleStepToFileDownloadWith applies the HasEdge predicate on the "ScheduleStepToFileDownload" edge with a given conditions (other predicates).
func HasScheduleStepToFileDownloadWith(preds ...predicate.FileDownload) predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ScheduleStepToFileDownloadInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ScheduleStepToFileDownloadTable, ScheduleStepToFileDownloadColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasScheduleStepToFileExtract applies the HasEdge predicate on the "ScheduleStepToFileExtract" edge.
func HasScheduleStepToFileExtract() predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ScheduleStepToFileExtractTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ScheduleStepToFileExtractTable, ScheduleStepToFileExtractColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasScheduleStepToFileExtractWith applies the HasEdge predicate on the "ScheduleStepToFileExtract" edge with a given conditions (other predicates).
func HasScheduleStepToFileExtractWith(preds ...predicate.FileExtract) predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ScheduleStepToFileExtractInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ScheduleStepToFileExtractTable, ScheduleStepToFileExtractColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasScheduleStepToAnsible applies the HasEdge predicate on the "ScheduleStepToAnsible" edge.
func HasScheduleStepToAnsible() predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ScheduleStepToAnsibleTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ScheduleStepToAnsibleTable, ScheduleStepToAnsibleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasScheduleStepToAnsibleWith applies the HasEdge predicate on the "ScheduleStepToAnsible" edge with a given conditions (other predicates).
func HasScheduleStepToAnsibleWith(preds ...predicate.Ansible) predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ScheduleStepToAnsibleInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ScheduleStepToAnsibleTable, ScheduleStepToAnsibleColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasScheduleStepToProvisionedScheduleStep applies the HasEdge predicate on the "ScheduleStepToProvisionedScheduleStep" edge.
func HasScheduleStepToProvisionedScheduleStep() predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ScheduleStepToProvisionedScheduleStepTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ScheduleStepToProvisionedScheduleStepTable, ScheduleStepToProvisionedScheduleStepColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasScheduleStepToProvisionedScheduleStepWith applies the HasEdge predicate on the "ScheduleStepToProvisionedScheduleStep" edge with a given conditions (other predicates).
func HasScheduleStepToProvisionedScheduleStepWith(preds ...predicate.ProvisionedScheduleStep) predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ScheduleStepToProvisionedScheduleStepInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ScheduleStepToProvisionedScheduleStepTable, ScheduleStepToProvisionedScheduleStepColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasScheduleStepToHost applies the HasEdge predicate on the "ScheduleStepToHost" edge.
func HasScheduleStepToHost() predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ScheduleStepToHostTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ScheduleStepToHostTable, ScheduleStepToHostColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasScheduleStepToHostWith applies the HasEdge predicate on the "ScheduleStepToHost" edge with a given conditions (other predicates).
func HasScheduleStepToHostWith(preds ...predicate.Host) predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ScheduleStepToHostInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ScheduleStepToHostTable, ScheduleStepToHostColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ScheduleStep) predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ScheduleStep) predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ScheduleStep) predicate.ScheduleStep {
	return predicate.ScheduleStep(func(s *sql.Selector) {
		p(s.Not())
	})
}
