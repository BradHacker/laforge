// Code generated by ent, DO NOT EDIT.

package schedulestep

import (
	"fmt"
	"io"
	"strconv"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the schedulestep type in the database.
	Label = "schedule_step"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldRepeated holds the string denoting the repeated field in the database.
	FieldRepeated = "repeated"
	// FieldStartTime holds the string denoting the start_time field in the database.
	FieldStartTime = "start_time"
	// FieldEndTime holds the string denoting the end_time field in the database.
	FieldEndTime = "end_time"
	// FieldInterval holds the string denoting the interval field in the database.
	FieldInterval = "interval"
	// EdgeScheduleStepToStatus holds the string denoting the schedulesteptostatus edge name in mutations.
	EdgeScheduleStepToStatus = "ScheduleStepToStatus"
	// EdgeScheduleStepToScript holds the string denoting the schedulesteptoscript edge name in mutations.
	EdgeScheduleStepToScript = "ScheduleStepToScript"
	// EdgeScheduleStepToCommand holds the string denoting the schedulesteptocommand edge name in mutations.
	EdgeScheduleStepToCommand = "ScheduleStepToCommand"
	// EdgeScheduleStepToFileDelete holds the string denoting the schedulesteptofiledelete edge name in mutations.
	EdgeScheduleStepToFileDelete = "ScheduleStepToFileDelete"
	// EdgeScheduleStepToFileDownload holds the string denoting the schedulesteptofiledownload edge name in mutations.
	EdgeScheduleStepToFileDownload = "ScheduleStepToFileDownload"
	// EdgeScheduleStepToFileExtract holds the string denoting the schedulesteptofileextract edge name in mutations.
	EdgeScheduleStepToFileExtract = "ScheduleStepToFileExtract"
	// EdgeScheduleStepToAnsible holds the string denoting the schedulesteptoansible edge name in mutations.
	EdgeScheduleStepToAnsible = "ScheduleStepToAnsible"
	// EdgeScheduleStepToProvisionedScheduleStep holds the string denoting the schedulesteptoprovisionedschedulestep edge name in mutations.
	EdgeScheduleStepToProvisionedScheduleStep = "ScheduleStepToProvisionedScheduleStep"
	// EdgeScheduleStepToHost holds the string denoting the schedulesteptohost edge name in mutations.
	EdgeScheduleStepToHost = "ScheduleStepToHost"
	// Table holds the table name of the schedulestep in the database.
	Table = "schedule_steps"
	// ScheduleStepToStatusTable is the table that holds the ScheduleStepToStatus relation/edge.
	ScheduleStepToStatusTable = "status"
	// ScheduleStepToStatusInverseTable is the table name for the Status entity.
	// It exists in this package in order to avoid circular dependency with the "status" package.
	ScheduleStepToStatusInverseTable = "status"
	// ScheduleStepToStatusColumn is the table column denoting the ScheduleStepToStatus relation/edge.
	ScheduleStepToStatusColumn = "schedule_step_schedule_step_to_status"
	// ScheduleStepToScriptTable is the table that holds the ScheduleStepToScript relation/edge.
	ScheduleStepToScriptTable = "schedule_steps"
	// ScheduleStepToScriptInverseTable is the table name for the Script entity.
	// It exists in this package in order to avoid circular dependency with the "script" package.
	ScheduleStepToScriptInverseTable = "scripts"
	// ScheduleStepToScriptColumn is the table column denoting the ScheduleStepToScript relation/edge.
	ScheduleStepToScriptColumn = "schedule_step_schedule_step_to_script"
	// ScheduleStepToCommandTable is the table that holds the ScheduleStepToCommand relation/edge.
	ScheduleStepToCommandTable = "schedule_steps"
	// ScheduleStepToCommandInverseTable is the table name for the Command entity.
	// It exists in this package in order to avoid circular dependency with the "command" package.
	ScheduleStepToCommandInverseTable = "commands"
	// ScheduleStepToCommandColumn is the table column denoting the ScheduleStepToCommand relation/edge.
	ScheduleStepToCommandColumn = "schedule_step_schedule_step_to_command"
	// ScheduleStepToFileDeleteTable is the table that holds the ScheduleStepToFileDelete relation/edge.
	ScheduleStepToFileDeleteTable = "schedule_steps"
	// ScheduleStepToFileDeleteInverseTable is the table name for the FileDelete entity.
	// It exists in this package in order to avoid circular dependency with the "filedelete" package.
	ScheduleStepToFileDeleteInverseTable = "file_deletes"
	// ScheduleStepToFileDeleteColumn is the table column denoting the ScheduleStepToFileDelete relation/edge.
	ScheduleStepToFileDeleteColumn = "schedule_step_schedule_step_to_file_delete"
	// ScheduleStepToFileDownloadTable is the table that holds the ScheduleStepToFileDownload relation/edge.
	ScheduleStepToFileDownloadTable = "schedule_steps"
	// ScheduleStepToFileDownloadInverseTable is the table name for the FileDownload entity.
	// It exists in this package in order to avoid circular dependency with the "filedownload" package.
	ScheduleStepToFileDownloadInverseTable = "file_downloads"
	// ScheduleStepToFileDownloadColumn is the table column denoting the ScheduleStepToFileDownload relation/edge.
	ScheduleStepToFileDownloadColumn = "schedule_step_schedule_step_to_file_download"
	// ScheduleStepToFileExtractTable is the table that holds the ScheduleStepToFileExtract relation/edge.
	ScheduleStepToFileExtractTable = "schedule_steps"
	// ScheduleStepToFileExtractInverseTable is the table name for the FileExtract entity.
	// It exists in this package in order to avoid circular dependency with the "fileextract" package.
	ScheduleStepToFileExtractInverseTable = "file_extracts"
	// ScheduleStepToFileExtractColumn is the table column denoting the ScheduleStepToFileExtract relation/edge.
	ScheduleStepToFileExtractColumn = "schedule_step_schedule_step_to_file_extract"
	// ScheduleStepToAnsibleTable is the table that holds the ScheduleStepToAnsible relation/edge.
	ScheduleStepToAnsibleTable = "schedule_steps"
	// ScheduleStepToAnsibleInverseTable is the table name for the Ansible entity.
	// It exists in this package in order to avoid circular dependency with the "ansible" package.
	ScheduleStepToAnsibleInverseTable = "ansibles"
	// ScheduleStepToAnsibleColumn is the table column denoting the ScheduleStepToAnsible relation/edge.
	ScheduleStepToAnsibleColumn = "schedule_step_schedule_step_to_ansible"
	// ScheduleStepToProvisionedScheduleStepTable is the table that holds the ScheduleStepToProvisionedScheduleStep relation/edge.
	ScheduleStepToProvisionedScheduleStepTable = "provisioned_schedule_steps"
	// ScheduleStepToProvisionedScheduleStepInverseTable is the table name for the ProvisionedScheduleStep entity.
	// It exists in this package in order to avoid circular dependency with the "provisionedschedulestep" package.
	ScheduleStepToProvisionedScheduleStepInverseTable = "provisioned_schedule_steps"
	// ScheduleStepToProvisionedScheduleStepColumn is the table column denoting the ScheduleStepToProvisionedScheduleStep relation/edge.
	ScheduleStepToProvisionedScheduleStepColumn = "schedule_step_schedule_step_to_provisioned_schedule_step"
	// ScheduleStepToHostTable is the table that holds the ScheduleStepToHost relation/edge.
	ScheduleStepToHostTable = "schedule_steps"
	// ScheduleStepToHostInverseTable is the table name for the Host entity.
	// It exists in this package in order to avoid circular dependency with the "host" package.
	ScheduleStepToHostInverseTable = "hosts"
	// ScheduleStepToHostColumn is the table column denoting the ScheduleStepToHost relation/edge.
	ScheduleStepToHostColumn = "host_host_to_schedule_step"
)

// Columns holds all SQL columns for schedulestep fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldRepeated,
	FieldStartTime,
	FieldEndTime,
	FieldInterval,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "schedule_steps"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"host_host_to_schedule_step",
	"schedule_step_schedule_step_to_script",
	"schedule_step_schedule_step_to_command",
	"schedule_step_schedule_step_to_file_delete",
	"schedule_step_schedule_step_to_file_download",
	"schedule_step_schedule_step_to_file_extract",
	"schedule_step_schedule_step_to_ansible",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeScript       Type = "Script"
	TypeCommand      Type = "Command"
	TypeFileDelete   Type = "FileDelete"
	TypeFileDownload Type = "FileDownload"
	TypeFileExtract  Type = "FileExtract"
	TypeAnsible      Type = "Ansible"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeScript, TypeCommand, TypeFileDelete, TypeFileDownload, TypeFileExtract, TypeAnsible:
		return nil
	default:
		return fmt.Errorf("schedulestep: invalid enum value for type field: %q", _type)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (_type Type) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(_type.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (_type *Type) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*_type = Type(str)
	if err := TypeValidator(*_type); err != nil {
		return fmt.Errorf("%s is not a valid Type", str)
	}
	return nil
}
