// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/gen0cide/laforge/ent/agenttask"
	"github.com/gen0cide/laforge/ent/provisionedhost"
	"github.com/gen0cide/laforge/ent/provisionedschedulestep"
	"github.com/gen0cide/laforge/ent/schedulestep"
	"github.com/gen0cide/laforge/ent/status"
	"github.com/google/uuid"
)

// ProvisionedScheduleStep is the model entity for the ProvisionedScheduleStep schema.
type ProvisionedScheduleStep struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// RunTime holds the value of the "run_time" field.
	RunTime time.Time `json:"run_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProvisionedScheduleStepQuery when eager-loading is set.
	Edges ProvisionedScheduleStepEdges `json:"edges"`

	// Edges put into the main struct to be loaded via hcl
	// ProvisionedScheduleStepToStatus holds the value of the ProvisionedScheduleStepToStatus edge.
	HCLProvisionedScheduleStepToStatus *Status `json:"ProvisionedScheduleStepToStatus,omitempty"`
	// ProvisionedScheduleStepToScheduleStep holds the value of the ProvisionedScheduleStepToScheduleStep edge.
	HCLProvisionedScheduleStepToScheduleStep *ScheduleStep `json:"ProvisionedScheduleStepToScheduleStep,omitempty"`
	// ProvisionedScheduleStepToProvisionedHost holds the value of the ProvisionedScheduleStepToProvisionedHost edge.
	HCLProvisionedScheduleStepToProvisionedHost *ProvisionedHost `json:"ProvisionedScheduleStepToProvisionedHost,omitempty"`
	// ProvisionedScheduleStepToAgentTask holds the value of the ProvisionedScheduleStepToAgentTask edge.
	HCLProvisionedScheduleStepToAgentTask *AgentTask `json:"ProvisionedScheduleStepToAgentTask,omitempty"`
	//
	agent_task_agent_task_to_provisioned_schedule_step             *uuid.UUID
	provisioned_host_provisioned_host_to_provisioned_schedule_step *uuid.UUID
	schedule_step_schedule_step_to_provisioned_schedule_step       *uuid.UUID
}

// ProvisionedScheduleStepEdges holds the relations/edges for other nodes in the graph.
type ProvisionedScheduleStepEdges struct {
	// ProvisionedScheduleStepToStatus holds the value of the ProvisionedScheduleStepToStatus edge.
	ProvisionedScheduleStepToStatus *Status `json:"ProvisionedScheduleStepToStatus,omitempty"`
	// ProvisionedScheduleStepToScheduleStep holds the value of the ProvisionedScheduleStepToScheduleStep edge.
	ProvisionedScheduleStepToScheduleStep *ScheduleStep `json:"ProvisionedScheduleStepToScheduleStep,omitempty"`
	// ProvisionedScheduleStepToProvisionedHost holds the value of the ProvisionedScheduleStepToProvisionedHost edge.
	ProvisionedScheduleStepToProvisionedHost *ProvisionedHost `json:"ProvisionedScheduleStepToProvisionedHost,omitempty"`
	// ProvisionedScheduleStepToAgentTask holds the value of the ProvisionedScheduleStepToAgentTask edge.
	ProvisionedScheduleStepToAgentTask *AgentTask `json:"ProvisionedScheduleStepToAgentTask,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ProvisionedScheduleStepToStatusOrErr returns the ProvisionedScheduleStepToStatus value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProvisionedScheduleStepEdges) ProvisionedScheduleStepToStatusOrErr() (*Status, error) {
	if e.loadedTypes[0] {
		if e.ProvisionedScheduleStepToStatus == nil {
			// The edge ProvisionedScheduleStepToStatus was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: status.Label}
		}
		return e.ProvisionedScheduleStepToStatus, nil
	}
	return nil, &NotLoadedError{edge: "ProvisionedScheduleStepToStatus"}
}

// ProvisionedScheduleStepToScheduleStepOrErr returns the ProvisionedScheduleStepToScheduleStep value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProvisionedScheduleStepEdges) ProvisionedScheduleStepToScheduleStepOrErr() (*ScheduleStep, error) {
	if e.loadedTypes[1] {
		if e.ProvisionedScheduleStepToScheduleStep == nil {
			// The edge ProvisionedScheduleStepToScheduleStep was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: schedulestep.Label}
		}
		return e.ProvisionedScheduleStepToScheduleStep, nil
	}
	return nil, &NotLoadedError{edge: "ProvisionedScheduleStepToScheduleStep"}
}

// ProvisionedScheduleStepToProvisionedHostOrErr returns the ProvisionedScheduleStepToProvisionedHost value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProvisionedScheduleStepEdges) ProvisionedScheduleStepToProvisionedHostOrErr() (*ProvisionedHost, error) {
	if e.loadedTypes[2] {
		if e.ProvisionedScheduleStepToProvisionedHost == nil {
			// The edge ProvisionedScheduleStepToProvisionedHost was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: provisionedhost.Label}
		}
		return e.ProvisionedScheduleStepToProvisionedHost, nil
	}
	return nil, &NotLoadedError{edge: "ProvisionedScheduleStepToProvisionedHost"}
}

// ProvisionedScheduleStepToAgentTaskOrErr returns the ProvisionedScheduleStepToAgentTask value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProvisionedScheduleStepEdges) ProvisionedScheduleStepToAgentTaskOrErr() (*AgentTask, error) {
	if e.loadedTypes[3] {
		if e.ProvisionedScheduleStepToAgentTask == nil {
			// The edge ProvisionedScheduleStepToAgentTask was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: agenttask.Label}
		}
		return e.ProvisionedScheduleStepToAgentTask, nil
	}
	return nil, &NotLoadedError{edge: "ProvisionedScheduleStepToAgentTask"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProvisionedScheduleStep) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case provisionedschedulestep.FieldRunTime:
			values[i] = new(sql.NullTime)
		case provisionedschedulestep.FieldID:
			values[i] = new(uuid.UUID)
		case provisionedschedulestep.ForeignKeys[0]: // agent_task_agent_task_to_provisioned_schedule_step
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case provisionedschedulestep.ForeignKeys[1]: // provisioned_host_provisioned_host_to_provisioned_schedule_step
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case provisionedschedulestep.ForeignKeys[2]: // schedule_step_schedule_step_to_provisioned_schedule_step
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type ProvisionedScheduleStep", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProvisionedScheduleStep fields.
func (pss *ProvisionedScheduleStep) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case provisionedschedulestep.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pss.ID = *value
			}
		case provisionedschedulestep.FieldRunTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field run_time", values[i])
			} else if value.Valid {
				pss.RunTime = value.Time
			}
		case provisionedschedulestep.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field agent_task_agent_task_to_provisioned_schedule_step", values[i])
			} else if value.Valid {
				pss.agent_task_agent_task_to_provisioned_schedule_step = new(uuid.UUID)
				*pss.agent_task_agent_task_to_provisioned_schedule_step = *value.S.(*uuid.UUID)
			}
		case provisionedschedulestep.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field provisioned_host_provisioned_host_to_provisioned_schedule_step", values[i])
			} else if value.Valid {
				pss.provisioned_host_provisioned_host_to_provisioned_schedule_step = new(uuid.UUID)
				*pss.provisioned_host_provisioned_host_to_provisioned_schedule_step = *value.S.(*uuid.UUID)
			}
		case provisionedschedulestep.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field schedule_step_schedule_step_to_provisioned_schedule_step", values[i])
			} else if value.Valid {
				pss.schedule_step_schedule_step_to_provisioned_schedule_step = new(uuid.UUID)
				*pss.schedule_step_schedule_step_to_provisioned_schedule_step = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryProvisionedScheduleStepToStatus queries the "ProvisionedScheduleStepToStatus" edge of the ProvisionedScheduleStep entity.
func (pss *ProvisionedScheduleStep) QueryProvisionedScheduleStepToStatus() *StatusQuery {
	return (&ProvisionedScheduleStepClient{config: pss.config}).QueryProvisionedScheduleStepToStatus(pss)
}

// QueryProvisionedScheduleStepToScheduleStep queries the "ProvisionedScheduleStepToScheduleStep" edge of the ProvisionedScheduleStep entity.
func (pss *ProvisionedScheduleStep) QueryProvisionedScheduleStepToScheduleStep() *ScheduleStepQuery {
	return (&ProvisionedScheduleStepClient{config: pss.config}).QueryProvisionedScheduleStepToScheduleStep(pss)
}

// QueryProvisionedScheduleStepToProvisionedHost queries the "ProvisionedScheduleStepToProvisionedHost" edge of the ProvisionedScheduleStep entity.
func (pss *ProvisionedScheduleStep) QueryProvisionedScheduleStepToProvisionedHost() *ProvisionedHostQuery {
	return (&ProvisionedScheduleStepClient{config: pss.config}).QueryProvisionedScheduleStepToProvisionedHost(pss)
}

// QueryProvisionedScheduleStepToAgentTask queries the "ProvisionedScheduleStepToAgentTask" edge of the ProvisionedScheduleStep entity.
func (pss *ProvisionedScheduleStep) QueryProvisionedScheduleStepToAgentTask() *AgentTaskQuery {
	return (&ProvisionedScheduleStepClient{config: pss.config}).QueryProvisionedScheduleStepToAgentTask(pss)
}

// Update returns a builder for updating this ProvisionedScheduleStep.
// Note that you need to call ProvisionedScheduleStep.Unwrap() before calling this method if this ProvisionedScheduleStep
// was returned from a transaction, and the transaction was committed or rolled back.
func (pss *ProvisionedScheduleStep) Update() *ProvisionedScheduleStepUpdateOne {
	return (&ProvisionedScheduleStepClient{config: pss.config}).UpdateOne(pss)
}

// Unwrap unwraps the ProvisionedScheduleStep entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pss *ProvisionedScheduleStep) Unwrap() *ProvisionedScheduleStep {
	tx, ok := pss.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProvisionedScheduleStep is not a transactional entity")
	}
	pss.config.driver = tx.drv
	return pss
}

// String implements the fmt.Stringer.
func (pss *ProvisionedScheduleStep) String() string {
	var builder strings.Builder
	builder.WriteString("ProvisionedScheduleStep(")
	builder.WriteString(fmt.Sprintf("id=%v", pss.ID))
	builder.WriteString(", run_time=")
	builder.WriteString(pss.RunTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ProvisionedScheduleSteps is a parsable slice of ProvisionedScheduleStep.
type ProvisionedScheduleSteps []*ProvisionedScheduleStep

func (pss ProvisionedScheduleSteps) config(cfg config) {
	for _i := range pss {
		pss[_i].config = cfg
	}
}
