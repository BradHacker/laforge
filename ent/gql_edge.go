// Code generated by ent, DO NOT EDIT.

package ent

import "context"

func (ap *AdhocPlan) PrevAdhocPlan(ctx context.Context) ([]*AdhocPlan, error) {
	result, err := ap.Edges.PrevAdhocPlanOrErr()
	if IsNotLoaded(err) {
		result, err = ap.QueryPrevAdhocPlan().All(ctx)
	}
	return result, err
}

func (ap *AdhocPlan) NextAdhocPlans(ctx context.Context) ([]*AdhocPlan, error) {
	result, err := ap.Edges.NextAdhocPlansOrErr()
	if IsNotLoaded(err) {
		result, err = ap.QueryNextAdhocPlans().All(ctx)
	}
	return result, err
}

func (ap *AdhocPlan) Build(ctx context.Context) (*Build, error) {
	result, err := ap.Edges.BuildOrErr()
	if IsNotLoaded(err) {
		result, err = ap.QueryBuild().Only(ctx)
	}
	return result, err
}

func (ap *AdhocPlan) Status(ctx context.Context) (*Status, error) {
	result, err := ap.Edges.StatusOrErr()
	if IsNotLoaded(err) {
		result, err = ap.QueryStatus().Only(ctx)
	}
	return result, err
}

func (ap *AdhocPlan) AgentTask(ctx context.Context) (*AgentTask, error) {
	result, err := ap.Edges.AgentTaskOrErr()
	if IsNotLoaded(err) {
		result, err = ap.QueryAgentTask().Only(ctx)
	}
	return result, err
}

func (as *AgentStatus) ProvisionedHost(ctx context.Context) (*ProvisionedHost, error) {
	result, err := as.Edges.ProvisionedHostOrErr()
	if IsNotLoaded(err) {
		result, err = as.QueryProvisionedHost().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (as *AgentStatus) ProvisionedNetwork(ctx context.Context) (*ProvisionedNetwork, error) {
	result, err := as.Edges.ProvisionedNetworkOrErr()
	if IsNotLoaded(err) {
		result, err = as.QueryProvisionedNetwork().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (as *AgentStatus) Build(ctx context.Context) (*Build, error) {
	result, err := as.Edges.BuildOrErr()
	if IsNotLoaded(err) {
		result, err = as.QueryBuild().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (at *AgentTask) ProvisioningStep(ctx context.Context) (*ProvisioningStep, error) {
	result, err := at.Edges.ProvisioningStepOrErr()
	if IsNotLoaded(err) {
		result, err = at.QueryProvisioningStep().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (at *AgentTask) ProvisioningScheduledStep(ctx context.Context) (*ProvisioningScheduledStep, error) {
	result, err := at.Edges.ProvisioningScheduledStepOrErr()
	if IsNotLoaded(err) {
		result, err = at.QueryProvisioningScheduledStep().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (at *AgentTask) ProvisionedHost(ctx context.Context) (*ProvisionedHost, error) {
	result, err := at.Edges.ProvisionedHostOrErr()
	if IsNotLoaded(err) {
		result, err = at.QueryProvisionedHost().Only(ctx)
	}
	return result, err
}

func (at *AgentTask) AdhocPlans(ctx context.Context) ([]*AdhocPlan, error) {
	result, err := at.Edges.AdhocPlansOrErr()
	if IsNotLoaded(err) {
		result, err = at.QueryAdhocPlans().All(ctx)
	}
	return result, err
}

func (a *Ansible) Users(ctx context.Context) ([]*User, error) {
	result, err := a.Edges.UsersOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryUsers().All(ctx)
	}
	return result, err
}

func (a *Ansible) Environment(ctx context.Context) (*Environment, error) {
	result, err := a.Edges.EnvironmentOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryEnvironment().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (au *AuthUser) Tokens(ctx context.Context) ([]*Token, error) {
	result, err := au.Edges.TokensOrErr()
	if IsNotLoaded(err) {
		result, err = au.QueryTokens().All(ctx)
	}
	return result, err
}

func (au *AuthUser) ServerTasks(ctx context.Context) ([]*ServerTask, error) {
	result, err := au.Edges.ServerTasksOrErr()
	if IsNotLoaded(err) {
		result, err = au.QueryServerTasks().All(ctx)
	}
	return result, err
}

func (b *Build) Status(ctx context.Context) (*Status, error) {
	result, err := b.Edges.StatusOrErr()
	if IsNotLoaded(err) {
		result, err = b.QueryStatus().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (b *Build) Environment(ctx context.Context) (*Environment, error) {
	result, err := b.Edges.EnvironmentOrErr()
	if IsNotLoaded(err) {
		result, err = b.QueryEnvironment().Only(ctx)
	}
	return result, err
}

func (b *Build) Competition(ctx context.Context) (*Competition, error) {
	result, err := b.Edges.CompetitionOrErr()
	if IsNotLoaded(err) {
		result, err = b.QueryCompetition().Only(ctx)
	}
	return result, err
}

func (b *Build) LatestBuildCommit(ctx context.Context) (*BuildCommit, error) {
	result, err := b.Edges.LatestBuildCommitOrErr()
	if IsNotLoaded(err) {
		result, err = b.QueryLatestBuildCommit().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (b *Build) RepoCommits(ctx context.Context) (*RepoCommit, error) {
	result, err := b.Edges.RepoCommitsOrErr()
	if IsNotLoaded(err) {
		result, err = b.QueryRepoCommits().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (b *Build) ProvisionedNetworks(ctx context.Context) ([]*ProvisionedNetwork, error) {
	result, err := b.Edges.ProvisionedNetworksOrErr()
	if IsNotLoaded(err) {
		result, err = b.QueryProvisionedNetworks().All(ctx)
	}
	return result, err
}

func (b *Build) Teams(ctx context.Context) ([]*Team, error) {
	result, err := b.Edges.TeamsOrErr()
	if IsNotLoaded(err) {
		result, err = b.QueryTeams().All(ctx)
	}
	return result, err
}

func (b *Build) Plans(ctx context.Context) ([]*Plan, error) {
	result, err := b.Edges.PlansOrErr()
	if IsNotLoaded(err) {
		result, err = b.QueryPlans().All(ctx)
	}
	return result, err
}

func (b *Build) BuildCommits(ctx context.Context) ([]*BuildCommit, error) {
	result, err := b.Edges.BuildCommitsOrErr()
	if IsNotLoaded(err) {
		result, err = b.QueryBuildCommits().All(ctx)
	}
	return result, err
}

func (b *Build) AdhocPlans(ctx context.Context) ([]*AdhocPlan, error) {
	result, err := b.Edges.AdhocPlansOrErr()
	if IsNotLoaded(err) {
		result, err = b.QueryAdhocPlans().All(ctx)
	}
	return result, err
}

func (b *Build) AgentStatuses(ctx context.Context) ([]*AgentStatus, error) {
	result, err := b.Edges.AgentStatusesOrErr()
	if IsNotLoaded(err) {
		result, err = b.QueryAgentStatuses().All(ctx)
	}
	return result, err
}

func (b *Build) ServerTasks(ctx context.Context) ([]*ServerTask, error) {
	result, err := b.Edges.ServerTasksOrErr()
	if IsNotLoaded(err) {
		result, err = b.QueryServerTasks().All(ctx)
	}
	return result, err
}

func (bc *BuildCommit) Build(ctx context.Context) (*Build, error) {
	result, err := bc.Edges.BuildOrErr()
	if IsNotLoaded(err) {
		result, err = bc.QueryBuild().Only(ctx)
	}
	return result, err
}

func (bc *BuildCommit) ServerTasks(ctx context.Context) ([]*ServerTask, error) {
	result, err := bc.Edges.ServerTasksOrErr()
	if IsNotLoaded(err) {
		result, err = bc.QueryServerTasks().All(ctx)
	}
	return result, err
}

func (bc *BuildCommit) PlanDiffs(ctx context.Context) ([]*PlanDiff, error) {
	result, err := bc.Edges.PlanDiffsOrErr()
	if IsNotLoaded(err) {
		result, err = bc.QueryPlanDiffs().All(ctx)
	}
	return result, err
}

func (c *Command) Users(ctx context.Context) ([]*User, error) {
	result, err := c.Edges.UsersOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryUsers().All(ctx)
	}
	return result, err
}

func (c *Command) Environment(ctx context.Context) (*Environment, error) {
	result, err := c.Edges.EnvironmentOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryEnvironment().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (c *Competition) DNS(ctx context.Context) ([]*DNS, error) {
	result, err := c.Edges.DNSOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryDNS().All(ctx)
	}
	return result, err
}

func (c *Competition) Environment(ctx context.Context) (*Environment, error) {
	result, err := c.Edges.EnvironmentOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryEnvironment().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (c *Competition) Builds(ctx context.Context) ([]*Build, error) {
	result, err := c.Edges.BuildsOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryBuilds().All(ctx)
	}
	return result, err
}

func (d *DNS) Environments(ctx context.Context) ([]*Environment, error) {
	result, err := d.Edges.EnvironmentsOrErr()
	if IsNotLoaded(err) {
		result, err = d.QueryEnvironments().All(ctx)
	}
	return result, err
}

func (d *DNS) Competitions(ctx context.Context) ([]*Competition, error) {
	result, err := d.Edges.CompetitionsOrErr()
	if IsNotLoaded(err) {
		result, err = d.QueryCompetitions().All(ctx)
	}
	return result, err
}

func (dr *DNSRecord) Environment(ctx context.Context) (*Environment, error) {
	result, err := dr.Edges.EnvironmentOrErr()
	if IsNotLoaded(err) {
		result, err = dr.QueryEnvironment().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (d *Disk) Host(ctx context.Context) (*Host, error) {
	result, err := d.Edges.HostOrErr()
	if IsNotLoaded(err) {
		result, err = d.QueryHost().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Environment) Users(ctx context.Context) ([]*User, error) {
	result, err := e.Edges.UsersOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryUsers().All(ctx)
	}
	return result, err
}

func (e *Environment) Hosts(ctx context.Context) ([]*Host, error) {
	result, err := e.Edges.HostsOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryHosts().All(ctx)
	}
	return result, err
}

func (e *Environment) Competitions(ctx context.Context) ([]*Competition, error) {
	result, err := e.Edges.CompetitionsOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryCompetitions().All(ctx)
	}
	return result, err
}

func (e *Environment) Identities(ctx context.Context) ([]*Identity, error) {
	result, err := e.Edges.IdentitiesOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryIdentities().All(ctx)
	}
	return result, err
}

func (e *Environment) Commands(ctx context.Context) ([]*Command, error) {
	result, err := e.Edges.CommandsOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryCommands().All(ctx)
	}
	return result, err
}

func (e *Environment) Scripts(ctx context.Context) ([]*Script, error) {
	result, err := e.Edges.ScriptsOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryScripts().All(ctx)
	}
	return result, err
}

func (e *Environment) FileDownloads(ctx context.Context) ([]*FileDownload, error) {
	result, err := e.Edges.FileDownloadsOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryFileDownloads().All(ctx)
	}
	return result, err
}

func (e *Environment) FileDeletes(ctx context.Context) ([]*FileDelete, error) {
	result, err := e.Edges.FileDeletesOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryFileDeletes().All(ctx)
	}
	return result, err
}

func (e *Environment) FileExtracts(ctx context.Context) ([]*FileExtract, error) {
	result, err := e.Edges.FileExtractsOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryFileExtracts().All(ctx)
	}
	return result, err
}

func (e *Environment) IncludedNetworks(ctx context.Context) ([]*IncludedNetwork, error) {
	result, err := e.Edges.IncludedNetworksOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryIncludedNetworks().All(ctx)
	}
	return result, err
}

func (e *Environment) Findings(ctx context.Context) ([]*Finding, error) {
	result, err := e.Edges.FindingsOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryFindings().All(ctx)
	}
	return result, err
}

func (e *Environment) DNSRecords(ctx context.Context) ([]*DNSRecord, error) {
	result, err := e.Edges.DNSRecordsOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryDNSRecords().All(ctx)
	}
	return result, err
}

func (e *Environment) DNS(ctx context.Context) ([]*DNS, error) {
	result, err := e.Edges.DNSOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryDNS().All(ctx)
	}
	return result, err
}

func (e *Environment) Networks(ctx context.Context) ([]*Network, error) {
	result, err := e.Edges.NetworksOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryNetworks().All(ctx)
	}
	return result, err
}

func (e *Environment) HostDependencies(ctx context.Context) ([]*HostDependency, error) {
	result, err := e.Edges.HostDependenciesOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryHostDependencies().All(ctx)
	}
	return result, err
}

func (e *Environment) Ansibles(ctx context.Context) ([]*Ansible, error) {
	result, err := e.Edges.AnsiblesOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryAnsibles().All(ctx)
	}
	return result, err
}

func (e *Environment) ScheduledSteps(ctx context.Context) ([]*ScheduledStep, error) {
	result, err := e.Edges.ScheduledStepsOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryScheduledSteps().All(ctx)
	}
	return result, err
}

func (e *Environment) Builds(ctx context.Context) ([]*Build, error) {
	result, err := e.Edges.BuildsOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryBuilds().All(ctx)
	}
	return result, err
}

func (e *Environment) Repositories(ctx context.Context) ([]*Repository, error) {
	result, err := e.Edges.RepositoriesOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryRepositories().All(ctx)
	}
	return result, err
}

func (e *Environment) ServerTasks(ctx context.Context) ([]*ServerTask, error) {
	result, err := e.Edges.ServerTasksOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryServerTasks().All(ctx)
	}
	return result, err
}

func (fd *FileDelete) Environment(ctx context.Context) (*Environment, error) {
	result, err := fd.Edges.EnvironmentOrErr()
	if IsNotLoaded(err) {
		result, err = fd.QueryEnvironment().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (fd *FileDownload) Environment(ctx context.Context) (*Environment, error) {
	result, err := fd.Edges.EnvironmentOrErr()
	if IsNotLoaded(err) {
		result, err = fd.QueryEnvironment().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (fe *FileExtract) Environment(ctx context.Context) (*Environment, error) {
	result, err := fe.Edges.EnvironmentOrErr()
	if IsNotLoaded(err) {
		result, err = fe.QueryEnvironment().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (f *Finding) FindingToUser(ctx context.Context) ([]*User, error) {
	result, err := f.Edges.FindingToUserOrErr()
	if IsNotLoaded(err) {
		result, err = f.QueryFindingToUser().All(ctx)
	}
	return result, err
}

func (f *Finding) FindingToHost(ctx context.Context) (*Host, error) {
	result, err := f.Edges.FindingToHostOrErr()
	if IsNotLoaded(err) {
		result, err = f.QueryFindingToHost().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (f *Finding) FindingToScript(ctx context.Context) (*Script, error) {
	result, err := f.Edges.FindingToScriptOrErr()
	if IsNotLoaded(err) {
		result, err = f.QueryFindingToScript().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (f *Finding) FindingToEnvironment(ctx context.Context) (*Environment, error) {
	result, err := f.Edges.FindingToEnvironmentOrErr()
	if IsNotLoaded(err) {
		result, err = f.QueryFindingToEnvironment().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (gfm *GinFileMiddleware) GinFileMiddlewareToProvisionedHost(ctx context.Context) (*ProvisionedHost, error) {
	result, err := gfm.Edges.GinFileMiddlewareToProvisionedHostOrErr()
	if IsNotLoaded(err) {
		result, err = gfm.QueryGinFileMiddlewareToProvisionedHost().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (gfm *GinFileMiddleware) GinFileMiddlewareToProvisioningStep(ctx context.Context) (*ProvisioningStep, error) {
	result, err := gfm.Edges.GinFileMiddlewareToProvisioningStepOrErr()
	if IsNotLoaded(err) {
		result, err = gfm.QueryGinFileMiddlewareToProvisioningStep().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (gfm *GinFileMiddleware) GinFileMiddlewareToProvisioningScheduledStep(ctx context.Context) (*ProvisioningScheduledStep, error) {
	result, err := gfm.Edges.GinFileMiddlewareToProvisioningScheduledStepOrErr()
	if IsNotLoaded(err) {
		result, err = gfm.QueryGinFileMiddlewareToProvisioningScheduledStep().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (h *Host) HostToDisk(ctx context.Context) (*Disk, error) {
	result, err := h.Edges.HostToDiskOrErr()
	if IsNotLoaded(err) {
		result, err = h.QueryHostToDisk().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (h *Host) HostToUser(ctx context.Context) ([]*User, error) {
	result, err := h.Edges.HostToUserOrErr()
	if IsNotLoaded(err) {
		result, err = h.QueryHostToUser().All(ctx)
	}
	return result, err
}

func (h *Host) HostToEnvironment(ctx context.Context) (*Environment, error) {
	result, err := h.Edges.HostToEnvironmentOrErr()
	if IsNotLoaded(err) {
		result, err = h.QueryHostToEnvironment().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (h *Host) HostToIncludedNetwork(ctx context.Context) ([]*IncludedNetwork, error) {
	result, err := h.Edges.HostToIncludedNetworkOrErr()
	if IsNotLoaded(err) {
		result, err = h.QueryHostToIncludedNetwork().All(ctx)
	}
	return result, err
}

func (h *Host) DependOnHostToHostDependency(ctx context.Context) ([]*HostDependency, error) {
	result, err := h.Edges.DependOnHostToHostDependencyOrErr()
	if IsNotLoaded(err) {
		result, err = h.QueryDependOnHostToHostDependency().All(ctx)
	}
	return result, err
}

func (h *Host) DependByHostToHostDependency(ctx context.Context) ([]*HostDependency, error) {
	result, err := h.Edges.DependByHostToHostDependencyOrErr()
	if IsNotLoaded(err) {
		result, err = h.QueryDependByHostToHostDependency().All(ctx)
	}
	return result, err
}

func (hd *HostDependency) HostDependencyToDependOnHost(ctx context.Context) (*Host, error) {
	result, err := hd.Edges.HostDependencyToDependOnHostOrErr()
	if IsNotLoaded(err) {
		result, err = hd.QueryHostDependencyToDependOnHost().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (hd *HostDependency) HostDependencyToDependByHost(ctx context.Context) (*Host, error) {
	result, err := hd.Edges.HostDependencyToDependByHostOrErr()
	if IsNotLoaded(err) {
		result, err = hd.QueryHostDependencyToDependByHost().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (hd *HostDependency) HostDependencyToNetwork(ctx context.Context) (*Network, error) {
	result, err := hd.Edges.HostDependencyToNetworkOrErr()
	if IsNotLoaded(err) {
		result, err = hd.QueryHostDependencyToNetwork().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (hd *HostDependency) HostDependencyToEnvironment(ctx context.Context) (*Environment, error) {
	result, err := hd.Edges.HostDependencyToEnvironmentOrErr()
	if IsNotLoaded(err) {
		result, err = hd.QueryHostDependencyToEnvironment().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (i *Identity) IdentityToEnvironment(ctx context.Context) (*Environment, error) {
	result, err := i.Edges.IdentityToEnvironmentOrErr()
	if IsNotLoaded(err) {
		result, err = i.QueryIdentityToEnvironment().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (in *IncludedNetwork) IncludedNetworkToTag(ctx context.Context) ([]*Tag, error) {
	result, err := in.Edges.IncludedNetworkToTagOrErr()
	if IsNotLoaded(err) {
		result, err = in.QueryIncludedNetworkToTag().All(ctx)
	}
	return result, err
}

func (in *IncludedNetwork) IncludedNetworkToHost(ctx context.Context) ([]*Host, error) {
	result, err := in.Edges.IncludedNetworkToHostOrErr()
	if IsNotLoaded(err) {
		result, err = in.QueryIncludedNetworkToHost().All(ctx)
	}
	return result, err
}

func (in *IncludedNetwork) IncludedNetworkToNetwork(ctx context.Context) (*Network, error) {
	result, err := in.Edges.IncludedNetworkToNetworkOrErr()
	if IsNotLoaded(err) {
		result, err = in.QueryIncludedNetworkToNetwork().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (in *IncludedNetwork) IncludedNetworkToEnvironment(ctx context.Context) ([]*Environment, error) {
	result, err := in.Edges.IncludedNetworkToEnvironmentOrErr()
	if IsNotLoaded(err) {
		result, err = in.QueryIncludedNetworkToEnvironment().All(ctx)
	}
	return result, err
}

func (n *Network) NetworkToEnvironment(ctx context.Context) (*Environment, error) {
	result, err := n.Edges.NetworkToEnvironmentOrErr()
	if IsNotLoaded(err) {
		result, err = n.QueryNetworkToEnvironment().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (n *Network) NetworkToHostDependency(ctx context.Context) ([]*HostDependency, error) {
	result, err := n.Edges.NetworkToHostDependencyOrErr()
	if IsNotLoaded(err) {
		result, err = n.QueryNetworkToHostDependency().All(ctx)
	}
	return result, err
}

func (n *Network) NetworkToIncludedNetwork(ctx context.Context) ([]*IncludedNetwork, error) {
	result, err := n.Edges.NetworkToIncludedNetworkOrErr()
	if IsNotLoaded(err) {
		result, err = n.QueryNetworkToIncludedNetwork().All(ctx)
	}
	return result, err
}

func (pl *Plan) PrevPlan(ctx context.Context) ([]*Plan, error) {
	result, err := pl.Edges.PrevPlanOrErr()
	if IsNotLoaded(err) {
		result, err = pl.QueryPrevPlan().All(ctx)
	}
	return result, err
}

func (pl *Plan) NextPlan(ctx context.Context) ([]*Plan, error) {
	result, err := pl.Edges.NextPlanOrErr()
	if IsNotLoaded(err) {
		result, err = pl.QueryNextPlan().All(ctx)
	}
	return result, err
}

func (pl *Plan) PlanToBuild(ctx context.Context) (*Build, error) {
	result, err := pl.Edges.PlanToBuildOrErr()
	if IsNotLoaded(err) {
		result, err = pl.QueryPlanToBuild().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pl *Plan) PlanToTeam(ctx context.Context) (*Team, error) {
	result, err := pl.Edges.PlanToTeamOrErr()
	if IsNotLoaded(err) {
		result, err = pl.QueryPlanToTeam().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pl *Plan) PlanToProvisionedNetwork(ctx context.Context) (*ProvisionedNetwork, error) {
	result, err := pl.Edges.PlanToProvisionedNetworkOrErr()
	if IsNotLoaded(err) {
		result, err = pl.QueryPlanToProvisionedNetwork().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pl *Plan) PlanToProvisionedHost(ctx context.Context) (*ProvisionedHost, error) {
	result, err := pl.Edges.PlanToProvisionedHostOrErr()
	if IsNotLoaded(err) {
		result, err = pl.QueryPlanToProvisionedHost().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pl *Plan) PlanToProvisioningStep(ctx context.Context) (*ProvisioningStep, error) {
	result, err := pl.Edges.PlanToProvisioningStepOrErr()
	if IsNotLoaded(err) {
		result, err = pl.QueryPlanToProvisioningStep().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pl *Plan) PlanToProvisioningScheduledStep(ctx context.Context) (*ProvisioningScheduledStep, error) {
	result, err := pl.Edges.PlanToProvisioningScheduledStepOrErr()
	if IsNotLoaded(err) {
		result, err = pl.QueryPlanToProvisioningScheduledStep().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pl *Plan) PlanToStatus(ctx context.Context) (*Status, error) {
	result, err := pl.Edges.PlanToStatusOrErr()
	if IsNotLoaded(err) {
		result, err = pl.QueryPlanToStatus().Only(ctx)
	}
	return result, err
}

func (pl *Plan) PlanToPlanDiffs(ctx context.Context) ([]*PlanDiff, error) {
	result, err := pl.Edges.PlanToPlanDiffsOrErr()
	if IsNotLoaded(err) {
		result, err = pl.QueryPlanToPlanDiffs().All(ctx)
	}
	return result, err
}

func (pd *PlanDiff) PlanDiffToBuildCommit(ctx context.Context) (*BuildCommit, error) {
	result, err := pd.Edges.PlanDiffToBuildCommitOrErr()
	if IsNotLoaded(err) {
		result, err = pd.QueryPlanDiffToBuildCommit().Only(ctx)
	}
	return result, err
}

func (pd *PlanDiff) PlanDiffToPlan(ctx context.Context) (*Plan, error) {
	result, err := pd.Edges.PlanDiffToPlanOrErr()
	if IsNotLoaded(err) {
		result, err = pd.QueryPlanDiffToPlan().Only(ctx)
	}
	return result, err
}

func (ph *ProvisionedHost) ProvisionedHostToStatus(ctx context.Context) (*Status, error) {
	result, err := ph.Edges.ProvisionedHostToStatusOrErr()
	if IsNotLoaded(err) {
		result, err = ph.QueryProvisionedHostToStatus().Only(ctx)
	}
	return result, err
}

func (ph *ProvisionedHost) ProvisionedHostToProvisionedNetwork(ctx context.Context) (*ProvisionedNetwork, error) {
	result, err := ph.Edges.ProvisionedHostToProvisionedNetworkOrErr()
	if IsNotLoaded(err) {
		result, err = ph.QueryProvisionedHostToProvisionedNetwork().Only(ctx)
	}
	return result, err
}

func (ph *ProvisionedHost) ProvisionedHostToHost(ctx context.Context) (*Host, error) {
	result, err := ph.Edges.ProvisionedHostToHostOrErr()
	if IsNotLoaded(err) {
		result, err = ph.QueryProvisionedHostToHost().Only(ctx)
	}
	return result, err
}

func (ph *ProvisionedHost) ProvisionedHostToEndStepPlan(ctx context.Context) (*Plan, error) {
	result, err := ph.Edges.ProvisionedHostToEndStepPlanOrErr()
	if IsNotLoaded(err) {
		result, err = ph.QueryProvisionedHostToEndStepPlan().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ph *ProvisionedHost) ProvisionedHostToBuild(ctx context.Context) (*Build, error) {
	result, err := ph.Edges.ProvisionedHostToBuildOrErr()
	if IsNotLoaded(err) {
		result, err = ph.QueryProvisionedHostToBuild().Only(ctx)
	}
	return result, err
}

func (ph *ProvisionedHost) ProvisionedHostToProvisioningStep(ctx context.Context) ([]*ProvisioningStep, error) {
	result, err := ph.Edges.ProvisionedHostToProvisioningStepOrErr()
	if IsNotLoaded(err) {
		result, err = ph.QueryProvisionedHostToProvisioningStep().All(ctx)
	}
	return result, err
}

func (ph *ProvisionedHost) ProvisionedHostToProvisioningScheduledStep(ctx context.Context) ([]*ProvisioningScheduledStep, error) {
	result, err := ph.Edges.ProvisionedHostToProvisioningScheduledStepOrErr()
	if IsNotLoaded(err) {
		result, err = ph.QueryProvisionedHostToProvisioningScheduledStep().All(ctx)
	}
	return result, err
}

func (ph *ProvisionedHost) ProvisionedHostToAgentStatus(ctx context.Context) ([]*AgentStatus, error) {
	result, err := ph.Edges.ProvisionedHostToAgentStatusOrErr()
	if IsNotLoaded(err) {
		result, err = ph.QueryProvisionedHostToAgentStatus().All(ctx)
	}
	return result, err
}

func (ph *ProvisionedHost) ProvisionedHostToAgentTask(ctx context.Context) ([]*AgentTask, error) {
	result, err := ph.Edges.ProvisionedHostToAgentTaskOrErr()
	if IsNotLoaded(err) {
		result, err = ph.QueryProvisionedHostToAgentTask().All(ctx)
	}
	return result, err
}

func (ph *ProvisionedHost) ProvisionedHostToPlan(ctx context.Context) (*Plan, error) {
	result, err := ph.Edges.ProvisionedHostToPlanOrErr()
	if IsNotLoaded(err) {
		result, err = ph.QueryProvisionedHostToPlan().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ph *ProvisionedHost) ProvisionedHostToGinFileMiddleware(ctx context.Context) (*GinFileMiddleware, error) {
	result, err := ph.Edges.ProvisionedHostToGinFileMiddlewareOrErr()
	if IsNotLoaded(err) {
		result, err = ph.QueryProvisionedHostToGinFileMiddleware().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pn *ProvisionedNetwork) ProvisionedNetworkToStatus(ctx context.Context) (*Status, error) {
	result, err := pn.Edges.ProvisionedNetworkToStatusOrErr()
	if IsNotLoaded(err) {
		result, err = pn.QueryProvisionedNetworkToStatus().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pn *ProvisionedNetwork) ProvisionedNetworkToNetwork(ctx context.Context) (*Network, error) {
	result, err := pn.Edges.ProvisionedNetworkToNetworkOrErr()
	if IsNotLoaded(err) {
		result, err = pn.QueryProvisionedNetworkToNetwork().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pn *ProvisionedNetwork) ProvisionedNetworkToBuild(ctx context.Context) (*Build, error) {
	result, err := pn.Edges.ProvisionedNetworkToBuildOrErr()
	if IsNotLoaded(err) {
		result, err = pn.QueryProvisionedNetworkToBuild().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pn *ProvisionedNetwork) ProvisionedNetworkToTeam(ctx context.Context) (*Team, error) {
	result, err := pn.Edges.ProvisionedNetworkToTeamOrErr()
	if IsNotLoaded(err) {
		result, err = pn.QueryProvisionedNetworkToTeam().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pn *ProvisionedNetwork) ProvisionedNetworkToProvisionedHost(ctx context.Context) ([]*ProvisionedHost, error) {
	result, err := pn.Edges.ProvisionedNetworkToProvisionedHostOrErr()
	if IsNotLoaded(err) {
		result, err = pn.QueryProvisionedNetworkToProvisionedHost().All(ctx)
	}
	return result, err
}

func (pn *ProvisionedNetwork) ProvisionedNetworkToPlan(ctx context.Context) (*Plan, error) {
	result, err := pn.Edges.ProvisionedNetworkToPlanOrErr()
	if IsNotLoaded(err) {
		result, err = pn.QueryProvisionedNetworkToPlan().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pss *ProvisioningScheduledStep) Status(ctx context.Context) (*Status, error) {
	result, err := pss.Edges.StatusOrErr()
	if IsNotLoaded(err) {
		result, err = pss.QueryStatus().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pss *ProvisioningScheduledStep) ScheduledStep(ctx context.Context) (*ScheduledStep, error) {
	result, err := pss.Edges.ScheduledStepOrErr()
	if IsNotLoaded(err) {
		result, err = pss.QueryScheduledStep().Only(ctx)
	}
	return result, err
}

func (pss *ProvisioningScheduledStep) ProvisionedHost(ctx context.Context) (*ProvisionedHost, error) {
	result, err := pss.Edges.ProvisionedHostOrErr()
	if IsNotLoaded(err) {
		result, err = pss.QueryProvisionedHost().Only(ctx)
	}
	return result, err
}

func (pss *ProvisioningScheduledStep) Script(ctx context.Context) (*Script, error) {
	result, err := pss.Edges.ScriptOrErr()
	if IsNotLoaded(err) {
		result, err = pss.QueryScript().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pss *ProvisioningScheduledStep) Command(ctx context.Context) (*Command, error) {
	result, err := pss.Edges.CommandOrErr()
	if IsNotLoaded(err) {
		result, err = pss.QueryCommand().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pss *ProvisioningScheduledStep) DNSRecord(ctx context.Context) (*DNSRecord, error) {
	result, err := pss.Edges.DNSRecordOrErr()
	if IsNotLoaded(err) {
		result, err = pss.QueryDNSRecord().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pss *ProvisioningScheduledStep) FileDelete(ctx context.Context) (*FileDelete, error) {
	result, err := pss.Edges.FileDeleteOrErr()
	if IsNotLoaded(err) {
		result, err = pss.QueryFileDelete().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pss *ProvisioningScheduledStep) FileDownload(ctx context.Context) (*FileDownload, error) {
	result, err := pss.Edges.FileDownloadOrErr()
	if IsNotLoaded(err) {
		result, err = pss.QueryFileDownload().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pss *ProvisioningScheduledStep) FileExtract(ctx context.Context) (*FileExtract, error) {
	result, err := pss.Edges.FileExtractOrErr()
	if IsNotLoaded(err) {
		result, err = pss.QueryFileExtract().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pss *ProvisioningScheduledStep) Ansible(ctx context.Context) (*Ansible, error) {
	result, err := pss.Edges.AnsibleOrErr()
	if IsNotLoaded(err) {
		result, err = pss.QueryAnsible().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pss *ProvisioningScheduledStep) AgentTask(ctx context.Context) (*AgentTask, error) {
	result, err := pss.Edges.AgentTaskOrErr()
	if IsNotLoaded(err) {
		result, err = pss.QueryAgentTask().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pss *ProvisioningScheduledStep) Plan(ctx context.Context) (*Plan, error) {
	result, err := pss.Edges.PlanOrErr()
	if IsNotLoaded(err) {
		result, err = pss.QueryPlan().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pss *ProvisioningScheduledStep) GinFileMiddleware(ctx context.Context) (*GinFileMiddleware, error) {
	result, err := pss.Edges.GinFileMiddlewareOrErr()
	if IsNotLoaded(err) {
		result, err = pss.QueryGinFileMiddleware().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ps *ProvisioningStep) ProvisioningStepToStatus(ctx context.Context) (*Status, error) {
	result, err := ps.Edges.ProvisioningStepToStatusOrErr()
	if IsNotLoaded(err) {
		result, err = ps.QueryProvisioningStepToStatus().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ps *ProvisioningStep) ProvisioningStepToProvisionedHost(ctx context.Context) (*ProvisionedHost, error) {
	result, err := ps.Edges.ProvisioningStepToProvisionedHostOrErr()
	if IsNotLoaded(err) {
		result, err = ps.QueryProvisioningStepToProvisionedHost().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ps *ProvisioningStep) ProvisioningStepToScript(ctx context.Context) (*Script, error) {
	result, err := ps.Edges.ProvisioningStepToScriptOrErr()
	if IsNotLoaded(err) {
		result, err = ps.QueryProvisioningStepToScript().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ps *ProvisioningStep) ProvisioningStepToCommand(ctx context.Context) (*Command, error) {
	result, err := ps.Edges.ProvisioningStepToCommandOrErr()
	if IsNotLoaded(err) {
		result, err = ps.QueryProvisioningStepToCommand().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ps *ProvisioningStep) ProvisioningStepToDNSRecord(ctx context.Context) (*DNSRecord, error) {
	result, err := ps.Edges.ProvisioningStepToDNSRecordOrErr()
	if IsNotLoaded(err) {
		result, err = ps.QueryProvisioningStepToDNSRecord().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ps *ProvisioningStep) ProvisioningStepToFileDelete(ctx context.Context) (*FileDelete, error) {
	result, err := ps.Edges.ProvisioningStepToFileDeleteOrErr()
	if IsNotLoaded(err) {
		result, err = ps.QueryProvisioningStepToFileDelete().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ps *ProvisioningStep) ProvisioningStepToFileDownload(ctx context.Context) (*FileDownload, error) {
	result, err := ps.Edges.ProvisioningStepToFileDownloadOrErr()
	if IsNotLoaded(err) {
		result, err = ps.QueryProvisioningStepToFileDownload().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ps *ProvisioningStep) ProvisioningStepToFileExtract(ctx context.Context) (*FileExtract, error) {
	result, err := ps.Edges.ProvisioningStepToFileExtractOrErr()
	if IsNotLoaded(err) {
		result, err = ps.QueryProvisioningStepToFileExtract().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ps *ProvisioningStep) ProvisioningStepToAnsible(ctx context.Context) (*Ansible, error) {
	result, err := ps.Edges.ProvisioningStepToAnsibleOrErr()
	if IsNotLoaded(err) {
		result, err = ps.QueryProvisioningStepToAnsible().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ps *ProvisioningStep) ProvisioningStepToPlan(ctx context.Context) (*Plan, error) {
	result, err := ps.Edges.ProvisioningStepToPlanOrErr()
	if IsNotLoaded(err) {
		result, err = ps.QueryProvisioningStepToPlan().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ps *ProvisioningStep) ProvisioningStepToAgentTask(ctx context.Context) ([]*AgentTask, error) {
	result, err := ps.Edges.ProvisioningStepToAgentTaskOrErr()
	if IsNotLoaded(err) {
		result, err = ps.QueryProvisioningStepToAgentTask().All(ctx)
	}
	return result, err
}

func (ps *ProvisioningStep) ProvisioningStepToGinFileMiddleware(ctx context.Context) (*GinFileMiddleware, error) {
	result, err := ps.Edges.ProvisioningStepToGinFileMiddlewareOrErr()
	if IsNotLoaded(err) {
		result, err = ps.QueryProvisioningStepToGinFileMiddleware().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (rc *RepoCommit) RepoCommitToRepository(ctx context.Context) (*Repository, error) {
	result, err := rc.Edges.RepoCommitToRepositoryOrErr()
	if IsNotLoaded(err) {
		result, err = rc.QueryRepoCommitToRepository().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (r *Repository) RepositoryToEnvironment(ctx context.Context) ([]*Environment, error) {
	result, err := r.Edges.RepositoryToEnvironmentOrErr()
	if IsNotLoaded(err) {
		result, err = r.QueryRepositoryToEnvironment().All(ctx)
	}
	return result, err
}

func (r *Repository) RepositoryToRepoCommit(ctx context.Context) ([]*RepoCommit, error) {
	result, err := r.Edges.RepositoryToRepoCommitOrErr()
	if IsNotLoaded(err) {
		result, err = r.QueryRepositoryToRepoCommit().All(ctx)
	}
	return result, err
}

func (ss *ScheduledStep) ScheduledStepToEnvironment(ctx context.Context) (*Environment, error) {
	result, err := ss.Edges.ScheduledStepToEnvironmentOrErr()
	if IsNotLoaded(err) {
		result, err = ss.QueryScheduledStepToEnvironment().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Script) ScriptToUser(ctx context.Context) ([]*User, error) {
	result, err := s.Edges.ScriptToUserOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryScriptToUser().All(ctx)
	}
	return result, err
}

func (s *Script) ScriptToFinding(ctx context.Context) ([]*Finding, error) {
	result, err := s.Edges.ScriptToFindingOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryScriptToFinding().All(ctx)
	}
	return result, err
}

func (s *Script) ScriptToEnvironment(ctx context.Context) (*Environment, error) {
	result, err := s.Edges.ScriptToEnvironmentOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryScriptToEnvironment().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (st *ServerTask) ServerTaskToAuthUser(ctx context.Context) (*AuthUser, error) {
	result, err := st.Edges.ServerTaskToAuthUserOrErr()
	if IsNotLoaded(err) {
		result, err = st.QueryServerTaskToAuthUser().Only(ctx)
	}
	return result, err
}

func (st *ServerTask) ServerTaskToStatus(ctx context.Context) (*Status, error) {
	result, err := st.Edges.ServerTaskToStatusOrErr()
	if IsNotLoaded(err) {
		result, err = st.QueryServerTaskToStatus().Only(ctx)
	}
	return result, err
}

func (st *ServerTask) ServerTaskToEnvironment(ctx context.Context) (*Environment, error) {
	result, err := st.Edges.ServerTaskToEnvironmentOrErr()
	if IsNotLoaded(err) {
		result, err = st.QueryServerTaskToEnvironment().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (st *ServerTask) ServerTaskToBuild(ctx context.Context) (*Build, error) {
	result, err := st.Edges.ServerTaskToBuildOrErr()
	if IsNotLoaded(err) {
		result, err = st.QueryServerTaskToBuild().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (st *ServerTask) ServerTaskToBuildCommit(ctx context.Context) (*BuildCommit, error) {
	result, err := st.Edges.ServerTaskToBuildCommitOrErr()
	if IsNotLoaded(err) {
		result, err = st.QueryServerTaskToBuildCommit().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (st *ServerTask) ServerTaskToGinFileMiddleware(ctx context.Context) ([]*GinFileMiddleware, error) {
	result, err := st.Edges.ServerTaskToGinFileMiddlewareOrErr()
	if IsNotLoaded(err) {
		result, err = st.QueryServerTaskToGinFileMiddleware().All(ctx)
	}
	return result, err
}

func (s *Status) StatusToBuild(ctx context.Context) (*Build, error) {
	result, err := s.Edges.StatusToBuildOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryStatusToBuild().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Status) StatusToProvisionedNetwork(ctx context.Context) (*ProvisionedNetwork, error) {
	result, err := s.Edges.StatusToProvisionedNetworkOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryStatusToProvisionedNetwork().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Status) StatusToProvisionedHost(ctx context.Context) (*ProvisionedHost, error) {
	result, err := s.Edges.StatusToProvisionedHostOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryStatusToProvisionedHost().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Status) StatusToProvisioningStep(ctx context.Context) (*ProvisioningStep, error) {
	result, err := s.Edges.StatusToProvisioningStepOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryStatusToProvisioningStep().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Status) StatusToTeam(ctx context.Context) (*Team, error) {
	result, err := s.Edges.StatusToTeamOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryStatusToTeam().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Status) StatusToPlan(ctx context.Context) (*Plan, error) {
	result, err := s.Edges.StatusToPlanOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryStatusToPlan().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Status) StatusToServerTask(ctx context.Context) (*ServerTask, error) {
	result, err := s.Edges.StatusToServerTaskOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryStatusToServerTask().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Status) StatusToAdhocPlan(ctx context.Context) (*AdhocPlan, error) {
	result, err := s.Edges.StatusToAdhocPlanOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryStatusToAdhocPlan().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Status) StatusToProvisioningScheduledStep(ctx context.Context) (*ProvisioningScheduledStep, error) {
	result, err := s.Edges.StatusToProvisioningScheduledStepOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryStatusToProvisioningScheduledStep().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (t *Team) TeamToBuild(ctx context.Context) (*Build, error) {
	result, err := t.Edges.TeamToBuildOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryTeamToBuild().Only(ctx)
	}
	return result, err
}

func (t *Team) TeamToStatus(ctx context.Context) (*Status, error) {
	result, err := t.Edges.TeamToStatusOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryTeamToStatus().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (t *Team) TeamToProvisionedNetwork(ctx context.Context) ([]*ProvisionedNetwork, error) {
	result, err := t.Edges.TeamToProvisionedNetworkOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryTeamToProvisionedNetwork().All(ctx)
	}
	return result, err
}

func (t *Team) TeamToPlan(ctx context.Context) (*Plan, error) {
	result, err := t.Edges.TeamToPlanOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryTeamToPlan().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (t *Token) TokenToAuthUser(ctx context.Context) (*AuthUser, error) {
	result, err := t.Edges.TokenToAuthUserOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryTokenToAuthUser().Only(ctx)
	}
	return result, err
}

func (u *User) UserToTag(ctx context.Context) ([]*Tag, error) {
	result, err := u.Edges.UserToTagOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryUserToTag().All(ctx)
	}
	return result, err
}

func (u *User) UserToEnvironment(ctx context.Context) ([]*Environment, error) {
	result, err := u.Edges.UserToEnvironmentOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryUserToEnvironment().All(ctx)
	}
	return result, err
}
