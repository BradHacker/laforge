// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/authuser"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/buildcommit"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/ginfilemiddleware"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/servertask"
	"github.com/gen0cide/laforge/ent/status"
	"github.com/google/uuid"
)

// ServerTaskUpdate is the builder for updating ServerTask entities.
type ServerTaskUpdate struct {
	config
	hooks    []Hook
	mutation *ServerTaskMutation
}

// Where appends a list predicates to the ServerTaskUpdate builder.
func (stu *ServerTaskUpdate) Where(ps ...predicate.ServerTask) *ServerTaskUpdate {
	stu.mutation.Where(ps...)
	return stu
}

// SetType sets the "type" field.
func (stu *ServerTaskUpdate) SetType(s servertask.Type) *ServerTaskUpdate {
	stu.mutation.SetType(s)
	return stu
}

// SetStartTime sets the "start_time" field.
func (stu *ServerTaskUpdate) SetStartTime(t time.Time) *ServerTaskUpdate {
	stu.mutation.SetStartTime(t)
	return stu
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (stu *ServerTaskUpdate) SetNillableStartTime(t *time.Time) *ServerTaskUpdate {
	if t != nil {
		stu.SetStartTime(*t)
	}
	return stu
}

// ClearStartTime clears the value of the "start_time" field.
func (stu *ServerTaskUpdate) ClearStartTime() *ServerTaskUpdate {
	stu.mutation.ClearStartTime()
	return stu
}

// SetEndTime sets the "end_time" field.
func (stu *ServerTaskUpdate) SetEndTime(t time.Time) *ServerTaskUpdate {
	stu.mutation.SetEndTime(t)
	return stu
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (stu *ServerTaskUpdate) SetNillableEndTime(t *time.Time) *ServerTaskUpdate {
	if t != nil {
		stu.SetEndTime(*t)
	}
	return stu
}

// ClearEndTime clears the value of the "end_time" field.
func (stu *ServerTaskUpdate) ClearEndTime() *ServerTaskUpdate {
	stu.mutation.ClearEndTime()
	return stu
}

// SetErrors sets the "errors" field.
func (stu *ServerTaskUpdate) SetErrors(s []string) *ServerTaskUpdate {
	stu.mutation.SetErrors(s)
	return stu
}

// ClearErrors clears the value of the "errors" field.
func (stu *ServerTaskUpdate) ClearErrors() *ServerTaskUpdate {
	stu.mutation.ClearErrors()
	return stu
}

// SetLogFilePath sets the "log_file_path" field.
func (stu *ServerTaskUpdate) SetLogFilePath(s string) *ServerTaskUpdate {
	stu.mutation.SetLogFilePath(s)
	return stu
}

// SetNillableLogFilePath sets the "log_file_path" field if the given value is not nil.
func (stu *ServerTaskUpdate) SetNillableLogFilePath(s *string) *ServerTaskUpdate {
	if s != nil {
		stu.SetLogFilePath(*s)
	}
	return stu
}

// ClearLogFilePath clears the value of the "log_file_path" field.
func (stu *ServerTaskUpdate) ClearLogFilePath() *ServerTaskUpdate {
	stu.mutation.ClearLogFilePath()
	return stu
}

// SetServerTaskToAuthUserID sets the "ServerTaskToAuthUser" edge to the AuthUser entity by ID.
func (stu *ServerTaskUpdate) SetServerTaskToAuthUserID(id uuid.UUID) *ServerTaskUpdate {
	stu.mutation.SetServerTaskToAuthUserID(id)
	return stu
}

// SetServerTaskToAuthUser sets the "ServerTaskToAuthUser" edge to the AuthUser entity.
func (stu *ServerTaskUpdate) SetServerTaskToAuthUser(a *AuthUser) *ServerTaskUpdate {
	return stu.SetServerTaskToAuthUserID(a.ID)
}

// SetServerTaskToStatusID sets the "ServerTaskToStatus" edge to the Status entity by ID.
func (stu *ServerTaskUpdate) SetServerTaskToStatusID(id uuid.UUID) *ServerTaskUpdate {
	stu.mutation.SetServerTaskToStatusID(id)
	return stu
}

// SetServerTaskToStatus sets the "ServerTaskToStatus" edge to the Status entity.
func (stu *ServerTaskUpdate) SetServerTaskToStatus(s *Status) *ServerTaskUpdate {
	return stu.SetServerTaskToStatusID(s.ID)
}

// SetServerTaskToEnvironmentID sets the "ServerTaskToEnvironment" edge to the Environment entity by ID.
func (stu *ServerTaskUpdate) SetServerTaskToEnvironmentID(id uuid.UUID) *ServerTaskUpdate {
	stu.mutation.SetServerTaskToEnvironmentID(id)
	return stu
}

// SetNillableServerTaskToEnvironmentID sets the "ServerTaskToEnvironment" edge to the Environment entity by ID if the given value is not nil.
func (stu *ServerTaskUpdate) SetNillableServerTaskToEnvironmentID(id *uuid.UUID) *ServerTaskUpdate {
	if id != nil {
		stu = stu.SetServerTaskToEnvironmentID(*id)
	}
	return stu
}

// SetServerTaskToEnvironment sets the "ServerTaskToEnvironment" edge to the Environment entity.
func (stu *ServerTaskUpdate) SetServerTaskToEnvironment(e *Environment) *ServerTaskUpdate {
	return stu.SetServerTaskToEnvironmentID(e.ID)
}

// SetServerTaskToBuildID sets the "ServerTaskToBuild" edge to the Build entity by ID.
func (stu *ServerTaskUpdate) SetServerTaskToBuildID(id uuid.UUID) *ServerTaskUpdate {
	stu.mutation.SetServerTaskToBuildID(id)
	return stu
}

// SetNillableServerTaskToBuildID sets the "ServerTaskToBuild" edge to the Build entity by ID if the given value is not nil.
func (stu *ServerTaskUpdate) SetNillableServerTaskToBuildID(id *uuid.UUID) *ServerTaskUpdate {
	if id != nil {
		stu = stu.SetServerTaskToBuildID(*id)
	}
	return stu
}

// SetServerTaskToBuild sets the "ServerTaskToBuild" edge to the Build entity.
func (stu *ServerTaskUpdate) SetServerTaskToBuild(b *Build) *ServerTaskUpdate {
	return stu.SetServerTaskToBuildID(b.ID)
}

// SetServerTaskToBuildCommitID sets the "ServerTaskToBuildCommit" edge to the BuildCommit entity by ID.
func (stu *ServerTaskUpdate) SetServerTaskToBuildCommitID(id uuid.UUID) *ServerTaskUpdate {
	stu.mutation.SetServerTaskToBuildCommitID(id)
	return stu
}

// SetNillableServerTaskToBuildCommitID sets the "ServerTaskToBuildCommit" edge to the BuildCommit entity by ID if the given value is not nil.
func (stu *ServerTaskUpdate) SetNillableServerTaskToBuildCommitID(id *uuid.UUID) *ServerTaskUpdate {
	if id != nil {
		stu = stu.SetServerTaskToBuildCommitID(*id)
	}
	return stu
}

// SetServerTaskToBuildCommit sets the "ServerTaskToBuildCommit" edge to the BuildCommit entity.
func (stu *ServerTaskUpdate) SetServerTaskToBuildCommit(b *BuildCommit) *ServerTaskUpdate {
	return stu.SetServerTaskToBuildCommitID(b.ID)
}

// AddServerTaskToGinFileMiddlewareIDs adds the "ServerTaskToGinFileMiddleware" edge to the GinFileMiddleware entity by IDs.
func (stu *ServerTaskUpdate) AddServerTaskToGinFileMiddlewareIDs(ids ...uuid.UUID) *ServerTaskUpdate {
	stu.mutation.AddServerTaskToGinFileMiddlewareIDs(ids...)
	return stu
}

// AddServerTaskToGinFileMiddleware adds the "ServerTaskToGinFileMiddleware" edges to the GinFileMiddleware entity.
func (stu *ServerTaskUpdate) AddServerTaskToGinFileMiddleware(g ...*GinFileMiddleware) *ServerTaskUpdate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return stu.AddServerTaskToGinFileMiddlewareIDs(ids...)
}

// Mutation returns the ServerTaskMutation object of the builder.
func (stu *ServerTaskUpdate) Mutation() *ServerTaskMutation {
	return stu.mutation
}

// ClearServerTaskToAuthUser clears the "ServerTaskToAuthUser" edge to the AuthUser entity.
func (stu *ServerTaskUpdate) ClearServerTaskToAuthUser() *ServerTaskUpdate {
	stu.mutation.ClearServerTaskToAuthUser()
	return stu
}

// ClearServerTaskToStatus clears the "ServerTaskToStatus" edge to the Status entity.
func (stu *ServerTaskUpdate) ClearServerTaskToStatus() *ServerTaskUpdate {
	stu.mutation.ClearServerTaskToStatus()
	return stu
}

// ClearServerTaskToEnvironment clears the "ServerTaskToEnvironment" edge to the Environment entity.
func (stu *ServerTaskUpdate) ClearServerTaskToEnvironment() *ServerTaskUpdate {
	stu.mutation.ClearServerTaskToEnvironment()
	return stu
}

// ClearServerTaskToBuild clears the "ServerTaskToBuild" edge to the Build entity.
func (stu *ServerTaskUpdate) ClearServerTaskToBuild() *ServerTaskUpdate {
	stu.mutation.ClearServerTaskToBuild()
	return stu
}

// ClearServerTaskToBuildCommit clears the "ServerTaskToBuildCommit" edge to the BuildCommit entity.
func (stu *ServerTaskUpdate) ClearServerTaskToBuildCommit() *ServerTaskUpdate {
	stu.mutation.ClearServerTaskToBuildCommit()
	return stu
}

// ClearServerTaskToGinFileMiddleware clears all "ServerTaskToGinFileMiddleware" edges to the GinFileMiddleware entity.
func (stu *ServerTaskUpdate) ClearServerTaskToGinFileMiddleware() *ServerTaskUpdate {
	stu.mutation.ClearServerTaskToGinFileMiddleware()
	return stu
}

// RemoveServerTaskToGinFileMiddlewareIDs removes the "ServerTaskToGinFileMiddleware" edge to GinFileMiddleware entities by IDs.
func (stu *ServerTaskUpdate) RemoveServerTaskToGinFileMiddlewareIDs(ids ...uuid.UUID) *ServerTaskUpdate {
	stu.mutation.RemoveServerTaskToGinFileMiddlewareIDs(ids...)
	return stu
}

// RemoveServerTaskToGinFileMiddleware removes "ServerTaskToGinFileMiddleware" edges to GinFileMiddleware entities.
func (stu *ServerTaskUpdate) RemoveServerTaskToGinFileMiddleware(g ...*GinFileMiddleware) *ServerTaskUpdate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return stu.RemoveServerTaskToGinFileMiddlewareIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (stu *ServerTaskUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(stu.hooks) == 0 {
		if err = stu.check(); err != nil {
			return 0, err
		}
		affected, err = stu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ServerTaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = stu.check(); err != nil {
				return 0, err
			}
			stu.mutation = mutation
			affected, err = stu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(stu.hooks) - 1; i >= 0; i-- {
			if stu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = stu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, stu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (stu *ServerTaskUpdate) SaveX(ctx context.Context) int {
	affected, err := stu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (stu *ServerTaskUpdate) Exec(ctx context.Context) error {
	_, err := stu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stu *ServerTaskUpdate) ExecX(ctx context.Context) {
	if err := stu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stu *ServerTaskUpdate) check() error {
	if v, ok := stu.mutation.GetType(); ok {
		if err := servertask.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ServerTask.type": %w`, err)}
		}
	}
	if _, ok := stu.mutation.ServerTaskToAuthUserID(); stu.mutation.ServerTaskToAuthUserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ServerTask.ServerTaskToAuthUser"`)
	}
	if _, ok := stu.mutation.ServerTaskToStatusID(); stu.mutation.ServerTaskToStatusCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ServerTask.ServerTaskToStatus"`)
	}
	return nil
}

func (stu *ServerTaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   servertask.Table,
			Columns: servertask.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: servertask.FieldID,
			},
		},
	}
	if ps := stu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: servertask.FieldType,
		})
	}
	if value, ok := stu.mutation.StartTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: servertask.FieldStartTime,
		})
	}
	if stu.mutation.StartTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: servertask.FieldStartTime,
		})
	}
	if value, ok := stu.mutation.EndTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: servertask.FieldEndTime,
		})
	}
	if stu.mutation.EndTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: servertask.FieldEndTime,
		})
	}
	if value, ok := stu.mutation.Errors(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: servertask.FieldErrors,
		})
	}
	if stu.mutation.ErrorsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: servertask.FieldErrors,
		})
	}
	if value, ok := stu.mutation.LogFilePath(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: servertask.FieldLogFilePath,
		})
	}
	if stu.mutation.LogFilePathCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: servertask.FieldLogFilePath,
		})
	}
	if stu.mutation.ServerTaskToAuthUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   servertask.ServerTaskToAuthUserTable,
			Columns: []string{servertask.ServerTaskToAuthUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: authuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.ServerTaskToAuthUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   servertask.ServerTaskToAuthUserTable,
			Columns: []string{servertask.ServerTaskToAuthUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: authuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stu.mutation.ServerTaskToStatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   servertask.ServerTaskToStatusTable,
			Columns: []string{servertask.ServerTaskToStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: status.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.ServerTaskToStatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   servertask.ServerTaskToStatusTable,
			Columns: []string{servertask.ServerTaskToStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: status.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stu.mutation.ServerTaskToEnvironmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   servertask.ServerTaskToEnvironmentTable,
			Columns: []string{servertask.ServerTaskToEnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: environment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.ServerTaskToEnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   servertask.ServerTaskToEnvironmentTable,
			Columns: []string{servertask.ServerTaskToEnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: environment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stu.mutation.ServerTaskToBuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   servertask.ServerTaskToBuildTable,
			Columns: []string{servertask.ServerTaskToBuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: build.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.ServerTaskToBuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   servertask.ServerTaskToBuildTable,
			Columns: []string{servertask.ServerTaskToBuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: build.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stu.mutation.ServerTaskToBuildCommitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   servertask.ServerTaskToBuildCommitTable,
			Columns: []string{servertask.ServerTaskToBuildCommitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: buildcommit.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.ServerTaskToBuildCommitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   servertask.ServerTaskToBuildCommitTable,
			Columns: []string{servertask.ServerTaskToBuildCommitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: buildcommit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stu.mutation.ServerTaskToGinFileMiddlewareCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   servertask.ServerTaskToGinFileMiddlewareTable,
			Columns: []string{servertask.ServerTaskToGinFileMiddlewareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ginfilemiddleware.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.RemovedServerTaskToGinFileMiddlewareIDs(); len(nodes) > 0 && !stu.mutation.ServerTaskToGinFileMiddlewareCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   servertask.ServerTaskToGinFileMiddlewareTable,
			Columns: []string{servertask.ServerTaskToGinFileMiddlewareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ginfilemiddleware.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.ServerTaskToGinFileMiddlewareIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   servertask.ServerTaskToGinFileMiddlewareTable,
			Columns: []string{servertask.ServerTaskToGinFileMiddlewareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ginfilemiddleware.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, stu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{servertask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ServerTaskUpdateOne is the builder for updating a single ServerTask entity.
type ServerTaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ServerTaskMutation
}

// SetType sets the "type" field.
func (stuo *ServerTaskUpdateOne) SetType(s servertask.Type) *ServerTaskUpdateOne {
	stuo.mutation.SetType(s)
	return stuo
}

// SetStartTime sets the "start_time" field.
func (stuo *ServerTaskUpdateOne) SetStartTime(t time.Time) *ServerTaskUpdateOne {
	stuo.mutation.SetStartTime(t)
	return stuo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (stuo *ServerTaskUpdateOne) SetNillableStartTime(t *time.Time) *ServerTaskUpdateOne {
	if t != nil {
		stuo.SetStartTime(*t)
	}
	return stuo
}

// ClearStartTime clears the value of the "start_time" field.
func (stuo *ServerTaskUpdateOne) ClearStartTime() *ServerTaskUpdateOne {
	stuo.mutation.ClearStartTime()
	return stuo
}

// SetEndTime sets the "end_time" field.
func (stuo *ServerTaskUpdateOne) SetEndTime(t time.Time) *ServerTaskUpdateOne {
	stuo.mutation.SetEndTime(t)
	return stuo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (stuo *ServerTaskUpdateOne) SetNillableEndTime(t *time.Time) *ServerTaskUpdateOne {
	if t != nil {
		stuo.SetEndTime(*t)
	}
	return stuo
}

// ClearEndTime clears the value of the "end_time" field.
func (stuo *ServerTaskUpdateOne) ClearEndTime() *ServerTaskUpdateOne {
	stuo.mutation.ClearEndTime()
	return stuo
}

// SetErrors sets the "errors" field.
func (stuo *ServerTaskUpdateOne) SetErrors(s []string) *ServerTaskUpdateOne {
	stuo.mutation.SetErrors(s)
	return stuo
}

// ClearErrors clears the value of the "errors" field.
func (stuo *ServerTaskUpdateOne) ClearErrors() *ServerTaskUpdateOne {
	stuo.mutation.ClearErrors()
	return stuo
}

// SetLogFilePath sets the "log_file_path" field.
func (stuo *ServerTaskUpdateOne) SetLogFilePath(s string) *ServerTaskUpdateOne {
	stuo.mutation.SetLogFilePath(s)
	return stuo
}

// SetNillableLogFilePath sets the "log_file_path" field if the given value is not nil.
func (stuo *ServerTaskUpdateOne) SetNillableLogFilePath(s *string) *ServerTaskUpdateOne {
	if s != nil {
		stuo.SetLogFilePath(*s)
	}
	return stuo
}

// ClearLogFilePath clears the value of the "log_file_path" field.
func (stuo *ServerTaskUpdateOne) ClearLogFilePath() *ServerTaskUpdateOne {
	stuo.mutation.ClearLogFilePath()
	return stuo
}

// SetServerTaskToAuthUserID sets the "ServerTaskToAuthUser" edge to the AuthUser entity by ID.
func (stuo *ServerTaskUpdateOne) SetServerTaskToAuthUserID(id uuid.UUID) *ServerTaskUpdateOne {
	stuo.mutation.SetServerTaskToAuthUserID(id)
	return stuo
}

// SetServerTaskToAuthUser sets the "ServerTaskToAuthUser" edge to the AuthUser entity.
func (stuo *ServerTaskUpdateOne) SetServerTaskToAuthUser(a *AuthUser) *ServerTaskUpdateOne {
	return stuo.SetServerTaskToAuthUserID(a.ID)
}

// SetServerTaskToStatusID sets the "ServerTaskToStatus" edge to the Status entity by ID.
func (stuo *ServerTaskUpdateOne) SetServerTaskToStatusID(id uuid.UUID) *ServerTaskUpdateOne {
	stuo.mutation.SetServerTaskToStatusID(id)
	return stuo
}

// SetServerTaskToStatus sets the "ServerTaskToStatus" edge to the Status entity.
func (stuo *ServerTaskUpdateOne) SetServerTaskToStatus(s *Status) *ServerTaskUpdateOne {
	return stuo.SetServerTaskToStatusID(s.ID)
}

// SetServerTaskToEnvironmentID sets the "ServerTaskToEnvironment" edge to the Environment entity by ID.
func (stuo *ServerTaskUpdateOne) SetServerTaskToEnvironmentID(id uuid.UUID) *ServerTaskUpdateOne {
	stuo.mutation.SetServerTaskToEnvironmentID(id)
	return stuo
}

// SetNillableServerTaskToEnvironmentID sets the "ServerTaskToEnvironment" edge to the Environment entity by ID if the given value is not nil.
func (stuo *ServerTaskUpdateOne) SetNillableServerTaskToEnvironmentID(id *uuid.UUID) *ServerTaskUpdateOne {
	if id != nil {
		stuo = stuo.SetServerTaskToEnvironmentID(*id)
	}
	return stuo
}

// SetServerTaskToEnvironment sets the "ServerTaskToEnvironment" edge to the Environment entity.
func (stuo *ServerTaskUpdateOne) SetServerTaskToEnvironment(e *Environment) *ServerTaskUpdateOne {
	return stuo.SetServerTaskToEnvironmentID(e.ID)
}

// SetServerTaskToBuildID sets the "ServerTaskToBuild" edge to the Build entity by ID.
func (stuo *ServerTaskUpdateOne) SetServerTaskToBuildID(id uuid.UUID) *ServerTaskUpdateOne {
	stuo.mutation.SetServerTaskToBuildID(id)
	return stuo
}

// SetNillableServerTaskToBuildID sets the "ServerTaskToBuild" edge to the Build entity by ID if the given value is not nil.
func (stuo *ServerTaskUpdateOne) SetNillableServerTaskToBuildID(id *uuid.UUID) *ServerTaskUpdateOne {
	if id != nil {
		stuo = stuo.SetServerTaskToBuildID(*id)
	}
	return stuo
}

// SetServerTaskToBuild sets the "ServerTaskToBuild" edge to the Build entity.
func (stuo *ServerTaskUpdateOne) SetServerTaskToBuild(b *Build) *ServerTaskUpdateOne {
	return stuo.SetServerTaskToBuildID(b.ID)
}

// SetServerTaskToBuildCommitID sets the "ServerTaskToBuildCommit" edge to the BuildCommit entity by ID.
func (stuo *ServerTaskUpdateOne) SetServerTaskToBuildCommitID(id uuid.UUID) *ServerTaskUpdateOne {
	stuo.mutation.SetServerTaskToBuildCommitID(id)
	return stuo
}

// SetNillableServerTaskToBuildCommitID sets the "ServerTaskToBuildCommit" edge to the BuildCommit entity by ID if the given value is not nil.
func (stuo *ServerTaskUpdateOne) SetNillableServerTaskToBuildCommitID(id *uuid.UUID) *ServerTaskUpdateOne {
	if id != nil {
		stuo = stuo.SetServerTaskToBuildCommitID(*id)
	}
	return stuo
}

// SetServerTaskToBuildCommit sets the "ServerTaskToBuildCommit" edge to the BuildCommit entity.
func (stuo *ServerTaskUpdateOne) SetServerTaskToBuildCommit(b *BuildCommit) *ServerTaskUpdateOne {
	return stuo.SetServerTaskToBuildCommitID(b.ID)
}

// AddServerTaskToGinFileMiddlewareIDs adds the "ServerTaskToGinFileMiddleware" edge to the GinFileMiddleware entity by IDs.
func (stuo *ServerTaskUpdateOne) AddServerTaskToGinFileMiddlewareIDs(ids ...uuid.UUID) *ServerTaskUpdateOne {
	stuo.mutation.AddServerTaskToGinFileMiddlewareIDs(ids...)
	return stuo
}

// AddServerTaskToGinFileMiddleware adds the "ServerTaskToGinFileMiddleware" edges to the GinFileMiddleware entity.
func (stuo *ServerTaskUpdateOne) AddServerTaskToGinFileMiddleware(g ...*GinFileMiddleware) *ServerTaskUpdateOne {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return stuo.AddServerTaskToGinFileMiddlewareIDs(ids...)
}

// Mutation returns the ServerTaskMutation object of the builder.
func (stuo *ServerTaskUpdateOne) Mutation() *ServerTaskMutation {
	return stuo.mutation
}

// ClearServerTaskToAuthUser clears the "ServerTaskToAuthUser" edge to the AuthUser entity.
func (stuo *ServerTaskUpdateOne) ClearServerTaskToAuthUser() *ServerTaskUpdateOne {
	stuo.mutation.ClearServerTaskToAuthUser()
	return stuo
}

// ClearServerTaskToStatus clears the "ServerTaskToStatus" edge to the Status entity.
func (stuo *ServerTaskUpdateOne) ClearServerTaskToStatus() *ServerTaskUpdateOne {
	stuo.mutation.ClearServerTaskToStatus()
	return stuo
}

// ClearServerTaskToEnvironment clears the "ServerTaskToEnvironment" edge to the Environment entity.
func (stuo *ServerTaskUpdateOne) ClearServerTaskToEnvironment() *ServerTaskUpdateOne {
	stuo.mutation.ClearServerTaskToEnvironment()
	return stuo
}

// ClearServerTaskToBuild clears the "ServerTaskToBuild" edge to the Build entity.
func (stuo *ServerTaskUpdateOne) ClearServerTaskToBuild() *ServerTaskUpdateOne {
	stuo.mutation.ClearServerTaskToBuild()
	return stuo
}

// ClearServerTaskToBuildCommit clears the "ServerTaskToBuildCommit" edge to the BuildCommit entity.
func (stuo *ServerTaskUpdateOne) ClearServerTaskToBuildCommit() *ServerTaskUpdateOne {
	stuo.mutation.ClearServerTaskToBuildCommit()
	return stuo
}

// ClearServerTaskToGinFileMiddleware clears all "ServerTaskToGinFileMiddleware" edges to the GinFileMiddleware entity.
func (stuo *ServerTaskUpdateOne) ClearServerTaskToGinFileMiddleware() *ServerTaskUpdateOne {
	stuo.mutation.ClearServerTaskToGinFileMiddleware()
	return stuo
}

// RemoveServerTaskToGinFileMiddlewareIDs removes the "ServerTaskToGinFileMiddleware" edge to GinFileMiddleware entities by IDs.
func (stuo *ServerTaskUpdateOne) RemoveServerTaskToGinFileMiddlewareIDs(ids ...uuid.UUID) *ServerTaskUpdateOne {
	stuo.mutation.RemoveServerTaskToGinFileMiddlewareIDs(ids...)
	return stuo
}

// RemoveServerTaskToGinFileMiddleware removes "ServerTaskToGinFileMiddleware" edges to GinFileMiddleware entities.
func (stuo *ServerTaskUpdateOne) RemoveServerTaskToGinFileMiddleware(g ...*GinFileMiddleware) *ServerTaskUpdateOne {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return stuo.RemoveServerTaskToGinFileMiddlewareIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (stuo *ServerTaskUpdateOne) Select(field string, fields ...string) *ServerTaskUpdateOne {
	stuo.fields = append([]string{field}, fields...)
	return stuo
}

// Save executes the query and returns the updated ServerTask entity.
func (stuo *ServerTaskUpdateOne) Save(ctx context.Context) (*ServerTask, error) {
	var (
		err  error
		node *ServerTask
	)
	if len(stuo.hooks) == 0 {
		if err = stuo.check(); err != nil {
			return nil, err
		}
		node, err = stuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ServerTaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = stuo.check(); err != nil {
				return nil, err
			}
			stuo.mutation = mutation
			node, err = stuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(stuo.hooks) - 1; i >= 0; i-- {
			if stuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = stuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, stuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (stuo *ServerTaskUpdateOne) SaveX(ctx context.Context) *ServerTask {
	node, err := stuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (stuo *ServerTaskUpdateOne) Exec(ctx context.Context) error {
	_, err := stuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stuo *ServerTaskUpdateOne) ExecX(ctx context.Context) {
	if err := stuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stuo *ServerTaskUpdateOne) check() error {
	if v, ok := stuo.mutation.GetType(); ok {
		if err := servertask.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ServerTask.type": %w`, err)}
		}
	}
	if _, ok := stuo.mutation.ServerTaskToAuthUserID(); stuo.mutation.ServerTaskToAuthUserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ServerTask.ServerTaskToAuthUser"`)
	}
	if _, ok := stuo.mutation.ServerTaskToStatusID(); stuo.mutation.ServerTaskToStatusCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ServerTask.ServerTaskToStatus"`)
	}
	return nil
}

func (stuo *ServerTaskUpdateOne) sqlSave(ctx context.Context) (_node *ServerTask, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   servertask.Table,
			Columns: servertask.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: servertask.FieldID,
			},
		},
	}
	id, ok := stuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ServerTask.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := stuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, servertask.FieldID)
		for _, f := range fields {
			if !servertask.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != servertask.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := stuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: servertask.FieldType,
		})
	}
	if value, ok := stuo.mutation.StartTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: servertask.FieldStartTime,
		})
	}
	if stuo.mutation.StartTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: servertask.FieldStartTime,
		})
	}
	if value, ok := stuo.mutation.EndTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: servertask.FieldEndTime,
		})
	}
	if stuo.mutation.EndTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: servertask.FieldEndTime,
		})
	}
	if value, ok := stuo.mutation.Errors(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: servertask.FieldErrors,
		})
	}
	if stuo.mutation.ErrorsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: servertask.FieldErrors,
		})
	}
	if value, ok := stuo.mutation.LogFilePath(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: servertask.FieldLogFilePath,
		})
	}
	if stuo.mutation.LogFilePathCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: servertask.FieldLogFilePath,
		})
	}
	if stuo.mutation.ServerTaskToAuthUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   servertask.ServerTaskToAuthUserTable,
			Columns: []string{servertask.ServerTaskToAuthUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: authuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.ServerTaskToAuthUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   servertask.ServerTaskToAuthUserTable,
			Columns: []string{servertask.ServerTaskToAuthUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: authuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stuo.mutation.ServerTaskToStatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   servertask.ServerTaskToStatusTable,
			Columns: []string{servertask.ServerTaskToStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: status.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.ServerTaskToStatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   servertask.ServerTaskToStatusTable,
			Columns: []string{servertask.ServerTaskToStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: status.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stuo.mutation.ServerTaskToEnvironmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   servertask.ServerTaskToEnvironmentTable,
			Columns: []string{servertask.ServerTaskToEnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: environment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.ServerTaskToEnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   servertask.ServerTaskToEnvironmentTable,
			Columns: []string{servertask.ServerTaskToEnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: environment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stuo.mutation.ServerTaskToBuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   servertask.ServerTaskToBuildTable,
			Columns: []string{servertask.ServerTaskToBuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: build.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.ServerTaskToBuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   servertask.ServerTaskToBuildTable,
			Columns: []string{servertask.ServerTaskToBuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: build.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stuo.mutation.ServerTaskToBuildCommitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   servertask.ServerTaskToBuildCommitTable,
			Columns: []string{servertask.ServerTaskToBuildCommitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: buildcommit.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.ServerTaskToBuildCommitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   servertask.ServerTaskToBuildCommitTable,
			Columns: []string{servertask.ServerTaskToBuildCommitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: buildcommit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stuo.mutation.ServerTaskToGinFileMiddlewareCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   servertask.ServerTaskToGinFileMiddlewareTable,
			Columns: []string{servertask.ServerTaskToGinFileMiddlewareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ginfilemiddleware.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.RemovedServerTaskToGinFileMiddlewareIDs(); len(nodes) > 0 && !stuo.mutation.ServerTaskToGinFileMiddlewareCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   servertask.ServerTaskToGinFileMiddlewareTable,
			Columns: []string{servertask.ServerTaskToGinFileMiddlewareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ginfilemiddleware.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.ServerTaskToGinFileMiddlewareIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   servertask.ServerTaskToGinFileMiddlewareTable,
			Columns: []string{servertask.ServerTaskToGinFileMiddlewareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ginfilemiddleware.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ServerTask{config: stuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, stuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{servertask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
