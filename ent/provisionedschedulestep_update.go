// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/agenttask"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/provisionedschedulestep"
	"github.com/gen0cide/laforge/ent/schedulestep"
	"github.com/gen0cide/laforge/ent/status"
	"github.com/google/uuid"
)

// ProvisionedScheduleStepUpdate is the builder for updating ProvisionedScheduleStep entities.
type ProvisionedScheduleStepUpdate struct {
	config
	hooks    []Hook
	mutation *ProvisionedScheduleStepMutation
}

// Where appends a list predicates to the ProvisionedScheduleStepUpdate builder.
func (pssu *ProvisionedScheduleStepUpdate) Where(ps ...predicate.ProvisionedScheduleStep) *ProvisionedScheduleStepUpdate {
	pssu.mutation.Where(ps...)
	return pssu
}

// SetRunTime sets the "run_time" field.
func (pssu *ProvisionedScheduleStepUpdate) SetRunTime(t time.Time) *ProvisionedScheduleStepUpdate {
	pssu.mutation.SetRunTime(t)
	return pssu
}

// SetProvisionedScheduleStepToStatusID sets the "ProvisionedScheduleStepToStatus" edge to the Status entity by ID.
func (pssu *ProvisionedScheduleStepUpdate) SetProvisionedScheduleStepToStatusID(id uuid.UUID) *ProvisionedScheduleStepUpdate {
	pssu.mutation.SetProvisionedScheduleStepToStatusID(id)
	return pssu
}

// SetNillableProvisionedScheduleStepToStatusID sets the "ProvisionedScheduleStepToStatus" edge to the Status entity by ID if the given value is not nil.
func (pssu *ProvisionedScheduleStepUpdate) SetNillableProvisionedScheduleStepToStatusID(id *uuid.UUID) *ProvisionedScheduleStepUpdate {
	if id != nil {
		pssu = pssu.SetProvisionedScheduleStepToStatusID(*id)
	}
	return pssu
}

// SetProvisionedScheduleStepToStatus sets the "ProvisionedScheduleStepToStatus" edge to the Status entity.
func (pssu *ProvisionedScheduleStepUpdate) SetProvisionedScheduleStepToStatus(s *Status) *ProvisionedScheduleStepUpdate {
	return pssu.SetProvisionedScheduleStepToStatusID(s.ID)
}

// SetProvisionedScheduleStepToScheduleStepID sets the "ProvisionedScheduleStepToScheduleStep" edge to the ScheduleStep entity by ID.
func (pssu *ProvisionedScheduleStepUpdate) SetProvisionedScheduleStepToScheduleStepID(id uuid.UUID) *ProvisionedScheduleStepUpdate {
	pssu.mutation.SetProvisionedScheduleStepToScheduleStepID(id)
	return pssu
}

// SetNillableProvisionedScheduleStepToScheduleStepID sets the "ProvisionedScheduleStepToScheduleStep" edge to the ScheduleStep entity by ID if the given value is not nil.
func (pssu *ProvisionedScheduleStepUpdate) SetNillableProvisionedScheduleStepToScheduleStepID(id *uuid.UUID) *ProvisionedScheduleStepUpdate {
	if id != nil {
		pssu = pssu.SetProvisionedScheduleStepToScheduleStepID(*id)
	}
	return pssu
}

// SetProvisionedScheduleStepToScheduleStep sets the "ProvisionedScheduleStepToScheduleStep" edge to the ScheduleStep entity.
func (pssu *ProvisionedScheduleStepUpdate) SetProvisionedScheduleStepToScheduleStep(s *ScheduleStep) *ProvisionedScheduleStepUpdate {
	return pssu.SetProvisionedScheduleStepToScheduleStepID(s.ID)
}

// SetProvisionedScheduleStepToAgentTaskID sets the "ProvisionedScheduleStepToAgentTask" edge to the AgentTask entity by ID.
func (pssu *ProvisionedScheduleStepUpdate) SetProvisionedScheduleStepToAgentTaskID(id uuid.UUID) *ProvisionedScheduleStepUpdate {
	pssu.mutation.SetProvisionedScheduleStepToAgentTaskID(id)
	return pssu
}

// SetNillableProvisionedScheduleStepToAgentTaskID sets the "ProvisionedScheduleStepToAgentTask" edge to the AgentTask entity by ID if the given value is not nil.
func (pssu *ProvisionedScheduleStepUpdate) SetNillableProvisionedScheduleStepToAgentTaskID(id *uuid.UUID) *ProvisionedScheduleStepUpdate {
	if id != nil {
		pssu = pssu.SetProvisionedScheduleStepToAgentTaskID(*id)
	}
	return pssu
}

// SetProvisionedScheduleStepToAgentTask sets the "ProvisionedScheduleStepToAgentTask" edge to the AgentTask entity.
func (pssu *ProvisionedScheduleStepUpdate) SetProvisionedScheduleStepToAgentTask(a *AgentTask) *ProvisionedScheduleStepUpdate {
	return pssu.SetProvisionedScheduleStepToAgentTaskID(a.ID)
}

// Mutation returns the ProvisionedScheduleStepMutation object of the builder.
func (pssu *ProvisionedScheduleStepUpdate) Mutation() *ProvisionedScheduleStepMutation {
	return pssu.mutation
}

// ClearProvisionedScheduleStepToStatus clears the "ProvisionedScheduleStepToStatus" edge to the Status entity.
func (pssu *ProvisionedScheduleStepUpdate) ClearProvisionedScheduleStepToStatus() *ProvisionedScheduleStepUpdate {
	pssu.mutation.ClearProvisionedScheduleStepToStatus()
	return pssu
}

// ClearProvisionedScheduleStepToScheduleStep clears the "ProvisionedScheduleStepToScheduleStep" edge to the ScheduleStep entity.
func (pssu *ProvisionedScheduleStepUpdate) ClearProvisionedScheduleStepToScheduleStep() *ProvisionedScheduleStepUpdate {
	pssu.mutation.ClearProvisionedScheduleStepToScheduleStep()
	return pssu
}

// ClearProvisionedScheduleStepToAgentTask clears the "ProvisionedScheduleStepToAgentTask" edge to the AgentTask entity.
func (pssu *ProvisionedScheduleStepUpdate) ClearProvisionedScheduleStepToAgentTask() *ProvisionedScheduleStepUpdate {
	pssu.mutation.ClearProvisionedScheduleStepToAgentTask()
	return pssu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pssu *ProvisionedScheduleStepUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pssu.hooks) == 0 {
		affected, err = pssu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProvisionedScheduleStepMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pssu.mutation = mutation
			affected, err = pssu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pssu.hooks) - 1; i >= 0; i-- {
			if pssu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pssu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pssu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pssu *ProvisionedScheduleStepUpdate) SaveX(ctx context.Context) int {
	affected, err := pssu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pssu *ProvisionedScheduleStepUpdate) Exec(ctx context.Context) error {
	_, err := pssu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pssu *ProvisionedScheduleStepUpdate) ExecX(ctx context.Context) {
	if err := pssu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pssu *ProvisionedScheduleStepUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   provisionedschedulestep.Table,
			Columns: provisionedschedulestep.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: provisionedschedulestep.FieldID,
			},
		},
	}
	if ps := pssu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pssu.mutation.RunTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: provisionedschedulestep.FieldRunTime,
		})
	}
	if pssu.mutation.ProvisionedScheduleStepToStatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   provisionedschedulestep.ProvisionedScheduleStepToStatusTable,
			Columns: []string{provisionedschedulestep.ProvisionedScheduleStepToStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: status.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssu.mutation.ProvisionedScheduleStepToStatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   provisionedschedulestep.ProvisionedScheduleStepToStatusTable,
			Columns: []string{provisionedschedulestep.ProvisionedScheduleStepToStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: status.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssu.mutation.ProvisionedScheduleStepToScheduleStepCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisionedschedulestep.ProvisionedScheduleStepToScheduleStepTable,
			Columns: []string{provisionedschedulestep.ProvisionedScheduleStepToScheduleStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: schedulestep.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssu.mutation.ProvisionedScheduleStepToScheduleStepIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisionedschedulestep.ProvisionedScheduleStepToScheduleStepTable,
			Columns: []string{provisionedschedulestep.ProvisionedScheduleStepToScheduleStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: schedulestep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssu.mutation.ProvisionedScheduleStepToAgentTaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisionedschedulestep.ProvisionedScheduleStepToAgentTaskTable,
			Columns: []string{provisionedschedulestep.ProvisionedScheduleStepToAgentTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: agenttask.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssu.mutation.ProvisionedScheduleStepToAgentTaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisionedschedulestep.ProvisionedScheduleStepToAgentTaskTable,
			Columns: []string{provisionedschedulestep.ProvisionedScheduleStepToAgentTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: agenttask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pssu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{provisionedschedulestep.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ProvisionedScheduleStepUpdateOne is the builder for updating a single ProvisionedScheduleStep entity.
type ProvisionedScheduleStepUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProvisionedScheduleStepMutation
}

// SetRunTime sets the "run_time" field.
func (pssuo *ProvisionedScheduleStepUpdateOne) SetRunTime(t time.Time) *ProvisionedScheduleStepUpdateOne {
	pssuo.mutation.SetRunTime(t)
	return pssuo
}

// SetProvisionedScheduleStepToStatusID sets the "ProvisionedScheduleStepToStatus" edge to the Status entity by ID.
func (pssuo *ProvisionedScheduleStepUpdateOne) SetProvisionedScheduleStepToStatusID(id uuid.UUID) *ProvisionedScheduleStepUpdateOne {
	pssuo.mutation.SetProvisionedScheduleStepToStatusID(id)
	return pssuo
}

// SetNillableProvisionedScheduleStepToStatusID sets the "ProvisionedScheduleStepToStatus" edge to the Status entity by ID if the given value is not nil.
func (pssuo *ProvisionedScheduleStepUpdateOne) SetNillableProvisionedScheduleStepToStatusID(id *uuid.UUID) *ProvisionedScheduleStepUpdateOne {
	if id != nil {
		pssuo = pssuo.SetProvisionedScheduleStepToStatusID(*id)
	}
	return pssuo
}

// SetProvisionedScheduleStepToStatus sets the "ProvisionedScheduleStepToStatus" edge to the Status entity.
func (pssuo *ProvisionedScheduleStepUpdateOne) SetProvisionedScheduleStepToStatus(s *Status) *ProvisionedScheduleStepUpdateOne {
	return pssuo.SetProvisionedScheduleStepToStatusID(s.ID)
}

// SetProvisionedScheduleStepToScheduleStepID sets the "ProvisionedScheduleStepToScheduleStep" edge to the ScheduleStep entity by ID.
func (pssuo *ProvisionedScheduleStepUpdateOne) SetProvisionedScheduleStepToScheduleStepID(id uuid.UUID) *ProvisionedScheduleStepUpdateOne {
	pssuo.mutation.SetProvisionedScheduleStepToScheduleStepID(id)
	return pssuo
}

// SetNillableProvisionedScheduleStepToScheduleStepID sets the "ProvisionedScheduleStepToScheduleStep" edge to the ScheduleStep entity by ID if the given value is not nil.
func (pssuo *ProvisionedScheduleStepUpdateOne) SetNillableProvisionedScheduleStepToScheduleStepID(id *uuid.UUID) *ProvisionedScheduleStepUpdateOne {
	if id != nil {
		pssuo = pssuo.SetProvisionedScheduleStepToScheduleStepID(*id)
	}
	return pssuo
}

// SetProvisionedScheduleStepToScheduleStep sets the "ProvisionedScheduleStepToScheduleStep" edge to the ScheduleStep entity.
func (pssuo *ProvisionedScheduleStepUpdateOne) SetProvisionedScheduleStepToScheduleStep(s *ScheduleStep) *ProvisionedScheduleStepUpdateOne {
	return pssuo.SetProvisionedScheduleStepToScheduleStepID(s.ID)
}

// SetProvisionedScheduleStepToAgentTaskID sets the "ProvisionedScheduleStepToAgentTask" edge to the AgentTask entity by ID.
func (pssuo *ProvisionedScheduleStepUpdateOne) SetProvisionedScheduleStepToAgentTaskID(id uuid.UUID) *ProvisionedScheduleStepUpdateOne {
	pssuo.mutation.SetProvisionedScheduleStepToAgentTaskID(id)
	return pssuo
}

// SetNillableProvisionedScheduleStepToAgentTaskID sets the "ProvisionedScheduleStepToAgentTask" edge to the AgentTask entity by ID if the given value is not nil.
func (pssuo *ProvisionedScheduleStepUpdateOne) SetNillableProvisionedScheduleStepToAgentTaskID(id *uuid.UUID) *ProvisionedScheduleStepUpdateOne {
	if id != nil {
		pssuo = pssuo.SetProvisionedScheduleStepToAgentTaskID(*id)
	}
	return pssuo
}

// SetProvisionedScheduleStepToAgentTask sets the "ProvisionedScheduleStepToAgentTask" edge to the AgentTask entity.
func (pssuo *ProvisionedScheduleStepUpdateOne) SetProvisionedScheduleStepToAgentTask(a *AgentTask) *ProvisionedScheduleStepUpdateOne {
	return pssuo.SetProvisionedScheduleStepToAgentTaskID(a.ID)
}

// Mutation returns the ProvisionedScheduleStepMutation object of the builder.
func (pssuo *ProvisionedScheduleStepUpdateOne) Mutation() *ProvisionedScheduleStepMutation {
	return pssuo.mutation
}

// ClearProvisionedScheduleStepToStatus clears the "ProvisionedScheduleStepToStatus" edge to the Status entity.
func (pssuo *ProvisionedScheduleStepUpdateOne) ClearProvisionedScheduleStepToStatus() *ProvisionedScheduleStepUpdateOne {
	pssuo.mutation.ClearProvisionedScheduleStepToStatus()
	return pssuo
}

// ClearProvisionedScheduleStepToScheduleStep clears the "ProvisionedScheduleStepToScheduleStep" edge to the ScheduleStep entity.
func (pssuo *ProvisionedScheduleStepUpdateOne) ClearProvisionedScheduleStepToScheduleStep() *ProvisionedScheduleStepUpdateOne {
	pssuo.mutation.ClearProvisionedScheduleStepToScheduleStep()
	return pssuo
}

// ClearProvisionedScheduleStepToAgentTask clears the "ProvisionedScheduleStepToAgentTask" edge to the AgentTask entity.
func (pssuo *ProvisionedScheduleStepUpdateOne) ClearProvisionedScheduleStepToAgentTask() *ProvisionedScheduleStepUpdateOne {
	pssuo.mutation.ClearProvisionedScheduleStepToAgentTask()
	return pssuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pssuo *ProvisionedScheduleStepUpdateOne) Select(field string, fields ...string) *ProvisionedScheduleStepUpdateOne {
	pssuo.fields = append([]string{field}, fields...)
	return pssuo
}

// Save executes the query and returns the updated ProvisionedScheduleStep entity.
func (pssuo *ProvisionedScheduleStepUpdateOne) Save(ctx context.Context) (*ProvisionedScheduleStep, error) {
	var (
		err  error
		node *ProvisionedScheduleStep
	)
	if len(pssuo.hooks) == 0 {
		node, err = pssuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProvisionedScheduleStepMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pssuo.mutation = mutation
			node, err = pssuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pssuo.hooks) - 1; i >= 0; i-- {
			if pssuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pssuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pssuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ProvisionedScheduleStep)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ProvisionedScheduleStepMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pssuo *ProvisionedScheduleStepUpdateOne) SaveX(ctx context.Context) *ProvisionedScheduleStep {
	node, err := pssuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pssuo *ProvisionedScheduleStepUpdateOne) Exec(ctx context.Context) error {
	_, err := pssuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pssuo *ProvisionedScheduleStepUpdateOne) ExecX(ctx context.Context) {
	if err := pssuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pssuo *ProvisionedScheduleStepUpdateOne) sqlSave(ctx context.Context) (_node *ProvisionedScheduleStep, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   provisionedschedulestep.Table,
			Columns: provisionedschedulestep.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: provisionedschedulestep.FieldID,
			},
		},
	}
	id, ok := pssuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProvisionedScheduleStep.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pssuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, provisionedschedulestep.FieldID)
		for _, f := range fields {
			if !provisionedschedulestep.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != provisionedschedulestep.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pssuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pssuo.mutation.RunTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: provisionedschedulestep.FieldRunTime,
		})
	}
	if pssuo.mutation.ProvisionedScheduleStepToStatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   provisionedschedulestep.ProvisionedScheduleStepToStatusTable,
			Columns: []string{provisionedschedulestep.ProvisionedScheduleStepToStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: status.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssuo.mutation.ProvisionedScheduleStepToStatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   provisionedschedulestep.ProvisionedScheduleStepToStatusTable,
			Columns: []string{provisionedschedulestep.ProvisionedScheduleStepToStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: status.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssuo.mutation.ProvisionedScheduleStepToScheduleStepCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisionedschedulestep.ProvisionedScheduleStepToScheduleStepTable,
			Columns: []string{provisionedschedulestep.ProvisionedScheduleStepToScheduleStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: schedulestep.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssuo.mutation.ProvisionedScheduleStepToScheduleStepIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisionedschedulestep.ProvisionedScheduleStepToScheduleStepTable,
			Columns: []string{provisionedschedulestep.ProvisionedScheduleStepToScheduleStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: schedulestep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pssuo.mutation.ProvisionedScheduleStepToAgentTaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisionedschedulestep.ProvisionedScheduleStepToAgentTaskTable,
			Columns: []string{provisionedschedulestep.ProvisionedScheduleStepToAgentTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: agenttask.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pssuo.mutation.ProvisionedScheduleStepToAgentTaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisionedschedulestep.ProvisionedScheduleStepToAgentTaskTable,
			Columns: []string{provisionedschedulestep.ProvisionedScheduleStepToAgentTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: agenttask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProvisionedScheduleStep{config: pssuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pssuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{provisionedschedulestep.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
