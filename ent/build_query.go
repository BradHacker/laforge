// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/adhocplan"
	"github.com/gen0cide/laforge/ent/agentstatus"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/buildcommit"
	"github.com/gen0cide/laforge/ent/competition"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/plan"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/provisionednetwork"
	"github.com/gen0cide/laforge/ent/repocommit"
	"github.com/gen0cide/laforge/ent/servertask"
	"github.com/gen0cide/laforge/ent/status"
	"github.com/gen0cide/laforge/ent/team"
	"github.com/google/uuid"
)

// BuildQuery is the builder for querying Build entities.
type BuildQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.Build
	// eager-loading edges.
	withBuildToStatus             *StatusQuery
	withBuildToEnvironment        *EnvironmentQuery
	withBuildToCompetition        *CompetitionQuery
	withBuildToLatestBuildCommit  *BuildCommitQuery
	withBuildToRepoCommit         *RepoCommitQuery
	withBuildToProvisionedNetwork *ProvisionedNetworkQuery
	withBuildToTeam               *TeamQuery
	withBuildToPlan               *PlanQuery
	withBuildToBuildCommits       *BuildCommitQuery
	withBuildToAdhocPlans         *AdhocPlanQuery
	withBuildToAgentStatuses      *AgentStatusQuery
	withBuildToServerTasks        *ServerTaskQuery
	withFKs                       bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the BuildQuery builder.
func (bq *BuildQuery) Where(ps ...predicate.Build) *BuildQuery {
	bq.predicates = append(bq.predicates, ps...)
	return bq
}

// Limit adds a limit step to the query.
func (bq *BuildQuery) Limit(limit int) *BuildQuery {
	bq.limit = &limit
	return bq
}

// Offset adds an offset step to the query.
func (bq *BuildQuery) Offset(offset int) *BuildQuery {
	bq.offset = &offset
	return bq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (bq *BuildQuery) Unique(unique bool) *BuildQuery {
	bq.unique = &unique
	return bq
}

// Order adds an order step to the query.
func (bq *BuildQuery) Order(o ...OrderFunc) *BuildQuery {
	bq.order = append(bq.order, o...)
	return bq
}

// QueryBuildToStatus chains the current query on the "BuildToStatus" edge.
func (bq *BuildQuery) QueryBuildToStatus() *StatusQuery {
	query := &StatusQuery{config: bq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(build.Table, build.FieldID, selector),
			sqlgraph.To(status.Table, status.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, build.BuildToStatusTable, build.BuildToStatusColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBuildToEnvironment chains the current query on the "BuildToEnvironment" edge.
func (bq *BuildQuery) QueryBuildToEnvironment() *EnvironmentQuery {
	query := &EnvironmentQuery{config: bq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(build.Table, build.FieldID, selector),
			sqlgraph.To(environment.Table, environment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, build.BuildToEnvironmentTable, build.BuildToEnvironmentColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBuildToCompetition chains the current query on the "BuildToCompetition" edge.
func (bq *BuildQuery) QueryBuildToCompetition() *CompetitionQuery {
	query := &CompetitionQuery{config: bq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(build.Table, build.FieldID, selector),
			sqlgraph.To(competition.Table, competition.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, build.BuildToCompetitionTable, build.BuildToCompetitionColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBuildToLatestBuildCommit chains the current query on the "BuildToLatestBuildCommit" edge.
func (bq *BuildQuery) QueryBuildToLatestBuildCommit() *BuildCommitQuery {
	query := &BuildCommitQuery{config: bq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(build.Table, build.FieldID, selector),
			sqlgraph.To(buildcommit.Table, buildcommit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, build.BuildToLatestBuildCommitTable, build.BuildToLatestBuildCommitColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBuildToRepoCommit chains the current query on the "BuildToRepoCommit" edge.
func (bq *BuildQuery) QueryBuildToRepoCommit() *RepoCommitQuery {
	query := &RepoCommitQuery{config: bq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(build.Table, build.FieldID, selector),
			sqlgraph.To(repocommit.Table, repocommit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, build.BuildToRepoCommitTable, build.BuildToRepoCommitColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBuildToProvisionedNetwork chains the current query on the "BuildToProvisionedNetwork" edge.
func (bq *BuildQuery) QueryBuildToProvisionedNetwork() *ProvisionedNetworkQuery {
	query := &ProvisionedNetworkQuery{config: bq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(build.Table, build.FieldID, selector),
			sqlgraph.To(provisionednetwork.Table, provisionednetwork.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, build.BuildToProvisionedNetworkTable, build.BuildToProvisionedNetworkColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBuildToTeam chains the current query on the "BuildToTeam" edge.
func (bq *BuildQuery) QueryBuildToTeam() *TeamQuery {
	query := &TeamQuery{config: bq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(build.Table, build.FieldID, selector),
			sqlgraph.To(team.Table, team.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, build.BuildToTeamTable, build.BuildToTeamColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBuildToPlan chains the current query on the "BuildToPlan" edge.
func (bq *BuildQuery) QueryBuildToPlan() *PlanQuery {
	query := &PlanQuery{config: bq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(build.Table, build.FieldID, selector),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, build.BuildToPlanTable, build.BuildToPlanColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBuildToBuildCommits chains the current query on the "BuildToBuildCommits" edge.
func (bq *BuildQuery) QueryBuildToBuildCommits() *BuildCommitQuery {
	query := &BuildCommitQuery{config: bq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(build.Table, build.FieldID, selector),
			sqlgraph.To(buildcommit.Table, buildcommit.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, build.BuildToBuildCommitsTable, build.BuildToBuildCommitsColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBuildToAdhocPlans chains the current query on the "BuildToAdhocPlans" edge.
func (bq *BuildQuery) QueryBuildToAdhocPlans() *AdhocPlanQuery {
	query := &AdhocPlanQuery{config: bq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(build.Table, build.FieldID, selector),
			sqlgraph.To(adhocplan.Table, adhocplan.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, build.BuildToAdhocPlansTable, build.BuildToAdhocPlansColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBuildToAgentStatuses chains the current query on the "BuildToAgentStatuses" edge.
func (bq *BuildQuery) QueryBuildToAgentStatuses() *AgentStatusQuery {
	query := &AgentStatusQuery{config: bq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(build.Table, build.FieldID, selector),
			sqlgraph.To(agentstatus.Table, agentstatus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, build.BuildToAgentStatusesTable, build.BuildToAgentStatusesColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBuildToServerTasks chains the current query on the "BuildToServerTasks" edge.
func (bq *BuildQuery) QueryBuildToServerTasks() *ServerTaskQuery {
	query := &ServerTaskQuery{config: bq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(build.Table, build.FieldID, selector),
			sqlgraph.To(servertask.Table, servertask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, build.BuildToServerTasksTable, build.BuildToServerTasksColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Build entity from the query.
// Returns a *NotFoundError when no Build was found.
func (bq *BuildQuery) First(ctx context.Context) (*Build, error) {
	nodes, err := bq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{build.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (bq *BuildQuery) FirstX(ctx context.Context) *Build {
	node, err := bq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Build ID from the query.
// Returns a *NotFoundError when no Build ID was found.
func (bq *BuildQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = bq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{build.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (bq *BuildQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := bq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Build entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Build entity is found.
// Returns a *NotFoundError when no Build entities are found.
func (bq *BuildQuery) Only(ctx context.Context) (*Build, error) {
	nodes, err := bq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{build.Label}
	default:
		return nil, &NotSingularError{build.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (bq *BuildQuery) OnlyX(ctx context.Context) *Build {
	node, err := bq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Build ID in the query.
// Returns a *NotSingularError when more than one Build ID is found.
// Returns a *NotFoundError when no entities are found.
func (bq *BuildQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = bq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{build.Label}
	default:
		err = &NotSingularError{build.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (bq *BuildQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := bq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Builds.
func (bq *BuildQuery) All(ctx context.Context) ([]*Build, error) {
	if err := bq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return bq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (bq *BuildQuery) AllX(ctx context.Context) []*Build {
	nodes, err := bq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Build IDs.
func (bq *BuildQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := bq.Select(build.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (bq *BuildQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := bq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (bq *BuildQuery) Count(ctx context.Context) (int, error) {
	if err := bq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return bq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (bq *BuildQuery) CountX(ctx context.Context) int {
	count, err := bq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (bq *BuildQuery) Exist(ctx context.Context) (bool, error) {
	if err := bq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return bq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (bq *BuildQuery) ExistX(ctx context.Context) bool {
	exist, err := bq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the BuildQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (bq *BuildQuery) Clone() *BuildQuery {
	if bq == nil {
		return nil
	}
	return &BuildQuery{
		config:                        bq.config,
		limit:                         bq.limit,
		offset:                        bq.offset,
		order:                         append([]OrderFunc{}, bq.order...),
		predicates:                    append([]predicate.Build{}, bq.predicates...),
		withBuildToStatus:             bq.withBuildToStatus.Clone(),
		withBuildToEnvironment:        bq.withBuildToEnvironment.Clone(),
		withBuildToCompetition:        bq.withBuildToCompetition.Clone(),
		withBuildToLatestBuildCommit:  bq.withBuildToLatestBuildCommit.Clone(),
		withBuildToRepoCommit:         bq.withBuildToRepoCommit.Clone(),
		withBuildToProvisionedNetwork: bq.withBuildToProvisionedNetwork.Clone(),
		withBuildToTeam:               bq.withBuildToTeam.Clone(),
		withBuildToPlan:               bq.withBuildToPlan.Clone(),
		withBuildToBuildCommits:       bq.withBuildToBuildCommits.Clone(),
		withBuildToAdhocPlans:         bq.withBuildToAdhocPlans.Clone(),
		withBuildToAgentStatuses:      bq.withBuildToAgentStatuses.Clone(),
		withBuildToServerTasks:        bq.withBuildToServerTasks.Clone(),
		// clone intermediate query.
		sql:    bq.sql.Clone(),
		path:   bq.path,
		unique: bq.unique,
	}
}

// WithBuildToStatus tells the query-builder to eager-load the nodes that are connected to
// the "BuildToStatus" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BuildQuery) WithBuildToStatus(opts ...func(*StatusQuery)) *BuildQuery {
	query := &StatusQuery{config: bq.config}
	for _, opt := range opts {
		opt(query)
	}
	bq.withBuildToStatus = query
	return bq
}

// WithBuildToEnvironment tells the query-builder to eager-load the nodes that are connected to
// the "BuildToEnvironment" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BuildQuery) WithBuildToEnvironment(opts ...func(*EnvironmentQuery)) *BuildQuery {
	query := &EnvironmentQuery{config: bq.config}
	for _, opt := range opts {
		opt(query)
	}
	bq.withBuildToEnvironment = query
	return bq
}

// WithBuildToCompetition tells the query-builder to eager-load the nodes that are connected to
// the "BuildToCompetition" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BuildQuery) WithBuildToCompetition(opts ...func(*CompetitionQuery)) *BuildQuery {
	query := &CompetitionQuery{config: bq.config}
	for _, opt := range opts {
		opt(query)
	}
	bq.withBuildToCompetition = query
	return bq
}

// WithBuildToLatestBuildCommit tells the query-builder to eager-load the nodes that are connected to
// the "BuildToLatestBuildCommit" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BuildQuery) WithBuildToLatestBuildCommit(opts ...func(*BuildCommitQuery)) *BuildQuery {
	query := &BuildCommitQuery{config: bq.config}
	for _, opt := range opts {
		opt(query)
	}
	bq.withBuildToLatestBuildCommit = query
	return bq
}

// WithBuildToRepoCommit tells the query-builder to eager-load the nodes that are connected to
// the "BuildToRepoCommit" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BuildQuery) WithBuildToRepoCommit(opts ...func(*RepoCommitQuery)) *BuildQuery {
	query := &RepoCommitQuery{config: bq.config}
	for _, opt := range opts {
		opt(query)
	}
	bq.withBuildToRepoCommit = query
	return bq
}

// WithBuildToProvisionedNetwork tells the query-builder to eager-load the nodes that are connected to
// the "BuildToProvisionedNetwork" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BuildQuery) WithBuildToProvisionedNetwork(opts ...func(*ProvisionedNetworkQuery)) *BuildQuery {
	query := &ProvisionedNetworkQuery{config: bq.config}
	for _, opt := range opts {
		opt(query)
	}
	bq.withBuildToProvisionedNetwork = query
	return bq
}

// WithBuildToTeam tells the query-builder to eager-load the nodes that are connected to
// the "BuildToTeam" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BuildQuery) WithBuildToTeam(opts ...func(*TeamQuery)) *BuildQuery {
	query := &TeamQuery{config: bq.config}
	for _, opt := range opts {
		opt(query)
	}
	bq.withBuildToTeam = query
	return bq
}

// WithBuildToPlan tells the query-builder to eager-load the nodes that are connected to
// the "BuildToPlan" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BuildQuery) WithBuildToPlan(opts ...func(*PlanQuery)) *BuildQuery {
	query := &PlanQuery{config: bq.config}
	for _, opt := range opts {
		opt(query)
	}
	bq.withBuildToPlan = query
	return bq
}

// WithBuildToBuildCommits tells the query-builder to eager-load the nodes that are connected to
// the "BuildToBuildCommits" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BuildQuery) WithBuildToBuildCommits(opts ...func(*BuildCommitQuery)) *BuildQuery {
	query := &BuildCommitQuery{config: bq.config}
	for _, opt := range opts {
		opt(query)
	}
	bq.withBuildToBuildCommits = query
	return bq
}

// WithBuildToAdhocPlans tells the query-builder to eager-load the nodes that are connected to
// the "BuildToAdhocPlans" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BuildQuery) WithBuildToAdhocPlans(opts ...func(*AdhocPlanQuery)) *BuildQuery {
	query := &AdhocPlanQuery{config: bq.config}
	for _, opt := range opts {
		opt(query)
	}
	bq.withBuildToAdhocPlans = query
	return bq
}

// WithBuildToAgentStatuses tells the query-builder to eager-load the nodes that are connected to
// the "BuildToAgentStatuses" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BuildQuery) WithBuildToAgentStatuses(opts ...func(*AgentStatusQuery)) *BuildQuery {
	query := &AgentStatusQuery{config: bq.config}
	for _, opt := range opts {
		opt(query)
	}
	bq.withBuildToAgentStatuses = query
	return bq
}

// WithBuildToServerTasks tells the query-builder to eager-load the nodes that are connected to
// the "BuildToServerTasks" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BuildQuery) WithBuildToServerTasks(opts ...func(*ServerTaskQuery)) *BuildQuery {
	query := &ServerTaskQuery{config: bq.config}
	for _, opt := range opts {
		opt(query)
	}
	bq.withBuildToServerTasks = query
	return bq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Revision int `json:"revision,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Build.Query().
//		GroupBy(build.FieldRevision).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (bq *BuildQuery) GroupBy(field string, fields ...string) *BuildGroupBy {
	group := &BuildGroupBy{config: bq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return bq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Revision int `json:"revision,omitempty"`
//	}
//
//	client.Build.Query().
//		Select(build.FieldRevision).
//		Scan(ctx, &v)
//
func (bq *BuildQuery) Select(fields ...string) *BuildSelect {
	bq.fields = append(bq.fields, fields...)
	return &BuildSelect{BuildQuery: bq}
}

func (bq *BuildQuery) prepareQuery(ctx context.Context) error {
	for _, f := range bq.fields {
		if !build.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if bq.path != nil {
		prev, err := bq.path(ctx)
		if err != nil {
			return err
		}
		bq.sql = prev
	}
	return nil
}

func (bq *BuildQuery) sqlAll(ctx context.Context) ([]*Build, error) {
	var (
		nodes       = []*Build{}
		withFKs     = bq.withFKs
		_spec       = bq.querySpec()
		loadedTypes = [12]bool{
			bq.withBuildToStatus != nil,
			bq.withBuildToEnvironment != nil,
			bq.withBuildToCompetition != nil,
			bq.withBuildToLatestBuildCommit != nil,
			bq.withBuildToRepoCommit != nil,
			bq.withBuildToProvisionedNetwork != nil,
			bq.withBuildToTeam != nil,
			bq.withBuildToPlan != nil,
			bq.withBuildToBuildCommits != nil,
			bq.withBuildToAdhocPlans != nil,
			bq.withBuildToAgentStatuses != nil,
			bq.withBuildToServerTasks != nil,
		}
	)
	if bq.withBuildToEnvironment != nil || bq.withBuildToCompetition != nil || bq.withBuildToLatestBuildCommit != nil || bq.withBuildToRepoCommit != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, build.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &Build{config: bq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, bq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := bq.withBuildToStatus; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[uuid.UUID]*Build)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.Status(func(s *sql.Selector) {
			s.Where(sql.InValues(build.BuildToStatusColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.build_build_to_status
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "build_build_to_status" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "build_build_to_status" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.BuildToStatus = n
		}
	}

	if query := bq.withBuildToEnvironment; query != nil {
		ids := make([]uuid.UUID, 0, len(nodes))
		nodeids := make(map[uuid.UUID][]*Build)
		for i := range nodes {
			if nodes[i].build_build_to_environment == nil {
				continue
			}
			fk := *nodes[i].build_build_to_environment
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(environment.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "build_build_to_environment" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.BuildToEnvironment = n
			}
		}
	}

	if query := bq.withBuildToCompetition; query != nil {
		ids := make([]uuid.UUID, 0, len(nodes))
		nodeids := make(map[uuid.UUID][]*Build)
		for i := range nodes {
			if nodes[i].build_build_to_competition == nil {
				continue
			}
			fk := *nodes[i].build_build_to_competition
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(competition.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "build_build_to_competition" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.BuildToCompetition = n
			}
		}
	}

	if query := bq.withBuildToLatestBuildCommit; query != nil {
		ids := make([]uuid.UUID, 0, len(nodes))
		nodeids := make(map[uuid.UUID][]*Build)
		for i := range nodes {
			if nodes[i].build_build_to_latest_build_commit == nil {
				continue
			}
			fk := *nodes[i].build_build_to_latest_build_commit
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(buildcommit.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "build_build_to_latest_build_commit" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.BuildToLatestBuildCommit = n
			}
		}
	}

	if query := bq.withBuildToRepoCommit; query != nil {
		ids := make([]uuid.UUID, 0, len(nodes))
		nodeids := make(map[uuid.UUID][]*Build)
		for i := range nodes {
			if nodes[i].build_build_to_repo_commit == nil {
				continue
			}
			fk := *nodes[i].build_build_to_repo_commit
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(repocommit.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "build_build_to_repo_commit" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.BuildToRepoCommit = n
			}
		}
	}

	if query := bq.withBuildToProvisionedNetwork; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[uuid.UUID]*Build)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.BuildToProvisionedNetwork = []*ProvisionedNetwork{}
		}
		query.withFKs = true
		query.Where(predicate.ProvisionedNetwork(func(s *sql.Selector) {
			s.Where(sql.InValues(build.BuildToProvisionedNetworkColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.provisioned_network_provisioned_network_to_build
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "provisioned_network_provisioned_network_to_build" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "provisioned_network_provisioned_network_to_build" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.BuildToProvisionedNetwork = append(node.Edges.BuildToProvisionedNetwork, n)
		}
	}

	if query := bq.withBuildToTeam; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[uuid.UUID]*Build)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.BuildToTeam = []*Team{}
		}
		query.withFKs = true
		query.Where(predicate.Team(func(s *sql.Selector) {
			s.Where(sql.InValues(build.BuildToTeamColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.team_team_to_build
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "team_team_to_build" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "team_team_to_build" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.BuildToTeam = append(node.Edges.BuildToTeam, n)
		}
	}

	if query := bq.withBuildToPlan; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[uuid.UUID]*Build)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.BuildToPlan = []*Plan{}
		}
		query.withFKs = true
		query.Where(predicate.Plan(func(s *sql.Selector) {
			s.Where(sql.InValues(build.BuildToPlanColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.plan_plan_to_build
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "plan_plan_to_build" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "plan_plan_to_build" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.BuildToPlan = append(node.Edges.BuildToPlan, n)
		}
	}

	if query := bq.withBuildToBuildCommits; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[uuid.UUID]*Build)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.BuildToBuildCommits = []*BuildCommit{}
		}
		query.withFKs = true
		query.Where(predicate.BuildCommit(func(s *sql.Selector) {
			s.Where(sql.InValues(build.BuildToBuildCommitsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.build_commit_build_commit_to_build
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "build_commit_build_commit_to_build" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "build_commit_build_commit_to_build" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.BuildToBuildCommits = append(node.Edges.BuildToBuildCommits, n)
		}
	}

	if query := bq.withBuildToAdhocPlans; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[uuid.UUID]*Build)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.BuildToAdhocPlans = []*AdhocPlan{}
		}
		query.withFKs = true
		query.Where(predicate.AdhocPlan(func(s *sql.Selector) {
			s.Where(sql.InValues(build.BuildToAdhocPlansColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.adhoc_plan_adhoc_plan_to_build
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "adhoc_plan_adhoc_plan_to_build" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "adhoc_plan_adhoc_plan_to_build" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.BuildToAdhocPlans = append(node.Edges.BuildToAdhocPlans, n)
		}
	}

	if query := bq.withBuildToAgentStatuses; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[uuid.UUID]*Build)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.BuildToAgentStatuses = []*AgentStatus{}
		}
		query.withFKs = true
		query.Where(predicate.AgentStatus(func(s *sql.Selector) {
			s.Where(sql.InValues(build.BuildToAgentStatusesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.agent_status_agent_status_to_build
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "agent_status_agent_status_to_build" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "agent_status_agent_status_to_build" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.BuildToAgentStatuses = append(node.Edges.BuildToAgentStatuses, n)
		}
	}

	if query := bq.withBuildToServerTasks; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[uuid.UUID]*Build)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.BuildToServerTasks = []*ServerTask{}
		}
		query.withFKs = true
		query.Where(predicate.ServerTask(func(s *sql.Selector) {
			s.Where(sql.InValues(build.BuildToServerTasksColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.server_task_server_task_to_build
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "server_task_server_task_to_build" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "server_task_server_task_to_build" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.BuildToServerTasks = append(node.Edges.BuildToServerTasks, n)
		}
	}

	return nodes, nil
}

func (bq *BuildQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := bq.querySpec()
	_spec.Node.Columns = bq.fields
	if len(bq.fields) > 0 {
		_spec.Unique = bq.unique != nil && *bq.unique
	}
	return sqlgraph.CountNodes(ctx, bq.driver, _spec)
}

func (bq *BuildQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := bq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (bq *BuildQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   build.Table,
			Columns: build.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: build.FieldID,
			},
		},
		From:   bq.sql,
		Unique: true,
	}
	if unique := bq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := bq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, build.FieldID)
		for i := range fields {
			if fields[i] != build.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := bq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := bq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := bq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := bq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (bq *BuildQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(bq.driver.Dialect())
	t1 := builder.Table(build.Table)
	columns := bq.fields
	if len(columns) == 0 {
		columns = build.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if bq.sql != nil {
		selector = bq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if bq.unique != nil && *bq.unique {
		selector.Distinct()
	}
	for _, p := range bq.predicates {
		p(selector)
	}
	for _, p := range bq.order {
		p(selector)
	}
	if offset := bq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := bq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// BuildGroupBy is the group-by builder for Build entities.
type BuildGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (bgb *BuildGroupBy) Aggregate(fns ...AggregateFunc) *BuildGroupBy {
	bgb.fns = append(bgb.fns, fns...)
	return bgb
}

// Scan applies the group-by query and scans the result into the given value.
func (bgb *BuildGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := bgb.path(ctx)
	if err != nil {
		return err
	}
	bgb.sql = query
	return bgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (bgb *BuildGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := bgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (bgb *BuildGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(bgb.fields) > 1 {
		return nil, errors.New("ent: BuildGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := bgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (bgb *BuildGroupBy) StringsX(ctx context.Context) []string {
	v, err := bgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (bgb *BuildGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = bgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{build.Label}
	default:
		err = fmt.Errorf("ent: BuildGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (bgb *BuildGroupBy) StringX(ctx context.Context) string {
	v, err := bgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (bgb *BuildGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(bgb.fields) > 1 {
		return nil, errors.New("ent: BuildGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := bgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (bgb *BuildGroupBy) IntsX(ctx context.Context) []int {
	v, err := bgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (bgb *BuildGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = bgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{build.Label}
	default:
		err = fmt.Errorf("ent: BuildGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (bgb *BuildGroupBy) IntX(ctx context.Context) int {
	v, err := bgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (bgb *BuildGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(bgb.fields) > 1 {
		return nil, errors.New("ent: BuildGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := bgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (bgb *BuildGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := bgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (bgb *BuildGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = bgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{build.Label}
	default:
		err = fmt.Errorf("ent: BuildGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (bgb *BuildGroupBy) Float64X(ctx context.Context) float64 {
	v, err := bgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (bgb *BuildGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(bgb.fields) > 1 {
		return nil, errors.New("ent: BuildGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := bgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (bgb *BuildGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := bgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (bgb *BuildGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = bgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{build.Label}
	default:
		err = fmt.Errorf("ent: BuildGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (bgb *BuildGroupBy) BoolX(ctx context.Context) bool {
	v, err := bgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (bgb *BuildGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range bgb.fields {
		if !build.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := bgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (bgb *BuildGroupBy) sqlQuery() *sql.Selector {
	selector := bgb.sql.Select()
	aggregation := make([]string, 0, len(bgb.fns))
	for _, fn := range bgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(bgb.fields)+len(bgb.fns))
		for _, f := range bgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(bgb.fields...)...)
}

// BuildSelect is the builder for selecting fields of Build entities.
type BuildSelect struct {
	*BuildQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (bs *BuildSelect) Scan(ctx context.Context, v interface{}) error {
	if err := bs.prepareQuery(ctx); err != nil {
		return err
	}
	bs.sql = bs.BuildQuery.sqlQuery(ctx)
	return bs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (bs *BuildSelect) ScanX(ctx context.Context, v interface{}) {
	if err := bs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (bs *BuildSelect) Strings(ctx context.Context) ([]string, error) {
	if len(bs.fields) > 1 {
		return nil, errors.New("ent: BuildSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := bs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (bs *BuildSelect) StringsX(ctx context.Context) []string {
	v, err := bs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (bs *BuildSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = bs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{build.Label}
	default:
		err = fmt.Errorf("ent: BuildSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (bs *BuildSelect) StringX(ctx context.Context) string {
	v, err := bs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (bs *BuildSelect) Ints(ctx context.Context) ([]int, error) {
	if len(bs.fields) > 1 {
		return nil, errors.New("ent: BuildSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := bs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (bs *BuildSelect) IntsX(ctx context.Context) []int {
	v, err := bs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (bs *BuildSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = bs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{build.Label}
	default:
		err = fmt.Errorf("ent: BuildSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (bs *BuildSelect) IntX(ctx context.Context) int {
	v, err := bs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (bs *BuildSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(bs.fields) > 1 {
		return nil, errors.New("ent: BuildSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := bs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (bs *BuildSelect) Float64sX(ctx context.Context) []float64 {
	v, err := bs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (bs *BuildSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = bs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{build.Label}
	default:
		err = fmt.Errorf("ent: BuildSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (bs *BuildSelect) Float64X(ctx context.Context) float64 {
	v, err := bs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (bs *BuildSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(bs.fields) > 1 {
		return nil, errors.New("ent: BuildSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := bs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (bs *BuildSelect) BoolsX(ctx context.Context) []bool {
	v, err := bs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (bs *BuildSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = bs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{build.Label}
	default:
		err = fmt.Errorf("ent: BuildSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (bs *BuildSelect) BoolX(ctx context.Context) bool {
	v, err := bs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (bs *BuildSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := bs.sql.Query()
	if err := bs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
