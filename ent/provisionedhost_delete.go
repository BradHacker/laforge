// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/provisionedhost"
)

// ProvisionedHostDelete is the builder for deleting a ProvisionedHost entity.
type ProvisionedHostDelete struct {
	config
	hooks    []Hook
	mutation *ProvisionedHostMutation
}

// Where appends a list predicates to the ProvisionedHostDelete builder.
func (phd *ProvisionedHostDelete) Where(ps ...predicate.ProvisionedHost) *ProvisionedHostDelete {
	phd.mutation.Where(ps...)
	return phd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (phd *ProvisionedHostDelete) Exec(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(phd.hooks) == 0 {
		affected, err = phd.sqlExec(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProvisionedHostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			phd.mutation = mutation
			affected, err = phd.sqlExec(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(phd.hooks) - 1; i >= 0; i-- {
			if phd.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = phd.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, phd.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// ExecX is like Exec, but panics if an error occurs.
func (phd *ProvisionedHostDelete) ExecX(ctx context.Context) int {
	n, err := phd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (phd *ProvisionedHostDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := &sqlgraph.DeleteSpec{
		Node: &sqlgraph.NodeSpec{
			Table: provisionedhost.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: provisionedhost.FieldID,
			},
		},
	}
	if ps := phd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, phd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	return affected, err
}

// ProvisionedHostDeleteOne is the builder for deleting a single ProvisionedHost entity.
type ProvisionedHostDeleteOne struct {
	phd *ProvisionedHostDelete
}

// Exec executes the deletion query.
func (phdo *ProvisionedHostDeleteOne) Exec(ctx context.Context) error {
	n, err := phdo.phd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{provisionedhost.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (phdo *ProvisionedHostDeleteOne) ExecX(ctx context.Context) {
	phdo.phd.ExecX(ctx)
}
