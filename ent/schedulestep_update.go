// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/ansible"
	"github.com/gen0cide/laforge/ent/command"
	"github.com/gen0cide/laforge/ent/filedelete"
	"github.com/gen0cide/laforge/ent/filedownload"
	"github.com/gen0cide/laforge/ent/fileextract"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/provisionedhost"
	"github.com/gen0cide/laforge/ent/provisionedschedulestep"
	"github.com/gen0cide/laforge/ent/schedulestep"
	"github.com/gen0cide/laforge/ent/script"
	"github.com/gen0cide/laforge/ent/status"
	"github.com/google/uuid"
)

// ScheduleStepUpdate is the builder for updating ScheduleStep entities.
type ScheduleStepUpdate struct {
	config
	hooks    []Hook
	mutation *ScheduleStepMutation
}

// Where appends a list predicates to the ScheduleStepUpdate builder.
func (ssu *ScheduleStepUpdate) Where(ps ...predicate.ScheduleStep) *ScheduleStepUpdate {
	ssu.mutation.Where(ps...)
	return ssu
}

// SetType sets the "type" field.
func (ssu *ScheduleStepUpdate) SetType(s schedulestep.Type) *ScheduleStepUpdate {
	ssu.mutation.SetType(s)
	return ssu
}

// SetRepeated sets the "repeated" field.
func (ssu *ScheduleStepUpdate) SetRepeated(b bool) *ScheduleStepUpdate {
	ssu.mutation.SetRepeated(b)
	return ssu
}

// SetStartTime sets the "start_time" field.
func (ssu *ScheduleStepUpdate) SetStartTime(t time.Time) *ScheduleStepUpdate {
	ssu.mutation.SetStartTime(t)
	return ssu
}

// SetEndTime sets the "end_time" field.
func (ssu *ScheduleStepUpdate) SetEndTime(t time.Time) *ScheduleStepUpdate {
	ssu.mutation.SetEndTime(t)
	return ssu
}

// SetInterval sets the "interval" field.
func (ssu *ScheduleStepUpdate) SetInterval(i int) *ScheduleStepUpdate {
	ssu.mutation.ResetInterval()
	ssu.mutation.SetInterval(i)
	return ssu
}

// AddInterval adds i to the "interval" field.
func (ssu *ScheduleStepUpdate) AddInterval(i int) *ScheduleStepUpdate {
	ssu.mutation.AddInterval(i)
	return ssu
}

// SetScheduleStepToStatusID sets the "ScheduleStepToStatus" edge to the Status entity by ID.
func (ssu *ScheduleStepUpdate) SetScheduleStepToStatusID(id uuid.UUID) *ScheduleStepUpdate {
	ssu.mutation.SetScheduleStepToStatusID(id)
	return ssu
}

// SetNillableScheduleStepToStatusID sets the "ScheduleStepToStatus" edge to the Status entity by ID if the given value is not nil.
func (ssu *ScheduleStepUpdate) SetNillableScheduleStepToStatusID(id *uuid.UUID) *ScheduleStepUpdate {
	if id != nil {
		ssu = ssu.SetScheduleStepToStatusID(*id)
	}
	return ssu
}

// SetScheduleStepToStatus sets the "ScheduleStepToStatus" edge to the Status entity.
func (ssu *ScheduleStepUpdate) SetScheduleStepToStatus(s *Status) *ScheduleStepUpdate {
	return ssu.SetScheduleStepToStatusID(s.ID)
}

// SetScheduleStepToProvisionedHostID sets the "ScheduleStepToProvisionedHost" edge to the ProvisionedHost entity by ID.
func (ssu *ScheduleStepUpdate) SetScheduleStepToProvisionedHostID(id uuid.UUID) *ScheduleStepUpdate {
	ssu.mutation.SetScheduleStepToProvisionedHostID(id)
	return ssu
}

// SetNillableScheduleStepToProvisionedHostID sets the "ScheduleStepToProvisionedHost" edge to the ProvisionedHost entity by ID if the given value is not nil.
func (ssu *ScheduleStepUpdate) SetNillableScheduleStepToProvisionedHostID(id *uuid.UUID) *ScheduleStepUpdate {
	if id != nil {
		ssu = ssu.SetScheduleStepToProvisionedHostID(*id)
	}
	return ssu
}

// SetScheduleStepToProvisionedHost sets the "ScheduleStepToProvisionedHost" edge to the ProvisionedHost entity.
func (ssu *ScheduleStepUpdate) SetScheduleStepToProvisionedHost(p *ProvisionedHost) *ScheduleStepUpdate {
	return ssu.SetScheduleStepToProvisionedHostID(p.ID)
}

// SetScheduleStepToScriptID sets the "ScheduleStepToScript" edge to the Script entity by ID.
func (ssu *ScheduleStepUpdate) SetScheduleStepToScriptID(id uuid.UUID) *ScheduleStepUpdate {
	ssu.mutation.SetScheduleStepToScriptID(id)
	return ssu
}

// SetNillableScheduleStepToScriptID sets the "ScheduleStepToScript" edge to the Script entity by ID if the given value is not nil.
func (ssu *ScheduleStepUpdate) SetNillableScheduleStepToScriptID(id *uuid.UUID) *ScheduleStepUpdate {
	if id != nil {
		ssu = ssu.SetScheduleStepToScriptID(*id)
	}
	return ssu
}

// SetScheduleStepToScript sets the "ScheduleStepToScript" edge to the Script entity.
func (ssu *ScheduleStepUpdate) SetScheduleStepToScript(s *Script) *ScheduleStepUpdate {
	return ssu.SetScheduleStepToScriptID(s.ID)
}

// SetScheduleStepToCommandID sets the "ScheduleStepToCommand" edge to the Command entity by ID.
func (ssu *ScheduleStepUpdate) SetScheduleStepToCommandID(id uuid.UUID) *ScheduleStepUpdate {
	ssu.mutation.SetScheduleStepToCommandID(id)
	return ssu
}

// SetNillableScheduleStepToCommandID sets the "ScheduleStepToCommand" edge to the Command entity by ID if the given value is not nil.
func (ssu *ScheduleStepUpdate) SetNillableScheduleStepToCommandID(id *uuid.UUID) *ScheduleStepUpdate {
	if id != nil {
		ssu = ssu.SetScheduleStepToCommandID(*id)
	}
	return ssu
}

// SetScheduleStepToCommand sets the "ScheduleStepToCommand" edge to the Command entity.
func (ssu *ScheduleStepUpdate) SetScheduleStepToCommand(c *Command) *ScheduleStepUpdate {
	return ssu.SetScheduleStepToCommandID(c.ID)
}

// SetScheduleStepToFileDeleteID sets the "ScheduleStepToFileDelete" edge to the FileDelete entity by ID.
func (ssu *ScheduleStepUpdate) SetScheduleStepToFileDeleteID(id uuid.UUID) *ScheduleStepUpdate {
	ssu.mutation.SetScheduleStepToFileDeleteID(id)
	return ssu
}

// SetNillableScheduleStepToFileDeleteID sets the "ScheduleStepToFileDelete" edge to the FileDelete entity by ID if the given value is not nil.
func (ssu *ScheduleStepUpdate) SetNillableScheduleStepToFileDeleteID(id *uuid.UUID) *ScheduleStepUpdate {
	if id != nil {
		ssu = ssu.SetScheduleStepToFileDeleteID(*id)
	}
	return ssu
}

// SetScheduleStepToFileDelete sets the "ScheduleStepToFileDelete" edge to the FileDelete entity.
func (ssu *ScheduleStepUpdate) SetScheduleStepToFileDelete(f *FileDelete) *ScheduleStepUpdate {
	return ssu.SetScheduleStepToFileDeleteID(f.ID)
}

// SetScheduleStepToFileDownloadID sets the "ScheduleStepToFileDownload" edge to the FileDownload entity by ID.
func (ssu *ScheduleStepUpdate) SetScheduleStepToFileDownloadID(id uuid.UUID) *ScheduleStepUpdate {
	ssu.mutation.SetScheduleStepToFileDownloadID(id)
	return ssu
}

// SetNillableScheduleStepToFileDownloadID sets the "ScheduleStepToFileDownload" edge to the FileDownload entity by ID if the given value is not nil.
func (ssu *ScheduleStepUpdate) SetNillableScheduleStepToFileDownloadID(id *uuid.UUID) *ScheduleStepUpdate {
	if id != nil {
		ssu = ssu.SetScheduleStepToFileDownloadID(*id)
	}
	return ssu
}

// SetScheduleStepToFileDownload sets the "ScheduleStepToFileDownload" edge to the FileDownload entity.
func (ssu *ScheduleStepUpdate) SetScheduleStepToFileDownload(f *FileDownload) *ScheduleStepUpdate {
	return ssu.SetScheduleStepToFileDownloadID(f.ID)
}

// SetScheduleStepToFileExtractID sets the "ScheduleStepToFileExtract" edge to the FileExtract entity by ID.
func (ssu *ScheduleStepUpdate) SetScheduleStepToFileExtractID(id uuid.UUID) *ScheduleStepUpdate {
	ssu.mutation.SetScheduleStepToFileExtractID(id)
	return ssu
}

// SetNillableScheduleStepToFileExtractID sets the "ScheduleStepToFileExtract" edge to the FileExtract entity by ID if the given value is not nil.
func (ssu *ScheduleStepUpdate) SetNillableScheduleStepToFileExtractID(id *uuid.UUID) *ScheduleStepUpdate {
	if id != nil {
		ssu = ssu.SetScheduleStepToFileExtractID(*id)
	}
	return ssu
}

// SetScheduleStepToFileExtract sets the "ScheduleStepToFileExtract" edge to the FileExtract entity.
func (ssu *ScheduleStepUpdate) SetScheduleStepToFileExtract(f *FileExtract) *ScheduleStepUpdate {
	return ssu.SetScheduleStepToFileExtractID(f.ID)
}

// SetScheduleStepToAnsibleID sets the "ScheduleStepToAnsible" edge to the Ansible entity by ID.
func (ssu *ScheduleStepUpdate) SetScheduleStepToAnsibleID(id uuid.UUID) *ScheduleStepUpdate {
	ssu.mutation.SetScheduleStepToAnsibleID(id)
	return ssu
}

// SetNillableScheduleStepToAnsibleID sets the "ScheduleStepToAnsible" edge to the Ansible entity by ID if the given value is not nil.
func (ssu *ScheduleStepUpdate) SetNillableScheduleStepToAnsibleID(id *uuid.UUID) *ScheduleStepUpdate {
	if id != nil {
		ssu = ssu.SetScheduleStepToAnsibleID(*id)
	}
	return ssu
}

// SetScheduleStepToAnsible sets the "ScheduleStepToAnsible" edge to the Ansible entity.
func (ssu *ScheduleStepUpdate) SetScheduleStepToAnsible(a *Ansible) *ScheduleStepUpdate {
	return ssu.SetScheduleStepToAnsibleID(a.ID)
}

// AddScheduleStepToProvisionedScheduleStepIDs adds the "ScheduleStepToProvisionedScheduleStep" edge to the ProvisionedScheduleStep entity by IDs.
func (ssu *ScheduleStepUpdate) AddScheduleStepToProvisionedScheduleStepIDs(ids ...uuid.UUID) *ScheduleStepUpdate {
	ssu.mutation.AddScheduleStepToProvisionedScheduleStepIDs(ids...)
	return ssu
}

// AddScheduleStepToProvisionedScheduleStep adds the "ScheduleStepToProvisionedScheduleStep" edges to the ProvisionedScheduleStep entity.
func (ssu *ScheduleStepUpdate) AddScheduleStepToProvisionedScheduleStep(p ...*ProvisionedScheduleStep) *ScheduleStepUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ssu.AddScheduleStepToProvisionedScheduleStepIDs(ids...)
}

// Mutation returns the ScheduleStepMutation object of the builder.
func (ssu *ScheduleStepUpdate) Mutation() *ScheduleStepMutation {
	return ssu.mutation
}

// ClearScheduleStepToStatus clears the "ScheduleStepToStatus" edge to the Status entity.
func (ssu *ScheduleStepUpdate) ClearScheduleStepToStatus() *ScheduleStepUpdate {
	ssu.mutation.ClearScheduleStepToStatus()
	return ssu
}

// ClearScheduleStepToProvisionedHost clears the "ScheduleStepToProvisionedHost" edge to the ProvisionedHost entity.
func (ssu *ScheduleStepUpdate) ClearScheduleStepToProvisionedHost() *ScheduleStepUpdate {
	ssu.mutation.ClearScheduleStepToProvisionedHost()
	return ssu
}

// ClearScheduleStepToScript clears the "ScheduleStepToScript" edge to the Script entity.
func (ssu *ScheduleStepUpdate) ClearScheduleStepToScript() *ScheduleStepUpdate {
	ssu.mutation.ClearScheduleStepToScript()
	return ssu
}

// ClearScheduleStepToCommand clears the "ScheduleStepToCommand" edge to the Command entity.
func (ssu *ScheduleStepUpdate) ClearScheduleStepToCommand() *ScheduleStepUpdate {
	ssu.mutation.ClearScheduleStepToCommand()
	return ssu
}

// ClearScheduleStepToFileDelete clears the "ScheduleStepToFileDelete" edge to the FileDelete entity.
func (ssu *ScheduleStepUpdate) ClearScheduleStepToFileDelete() *ScheduleStepUpdate {
	ssu.mutation.ClearScheduleStepToFileDelete()
	return ssu
}

// ClearScheduleStepToFileDownload clears the "ScheduleStepToFileDownload" edge to the FileDownload entity.
func (ssu *ScheduleStepUpdate) ClearScheduleStepToFileDownload() *ScheduleStepUpdate {
	ssu.mutation.ClearScheduleStepToFileDownload()
	return ssu
}

// ClearScheduleStepToFileExtract clears the "ScheduleStepToFileExtract" edge to the FileExtract entity.
func (ssu *ScheduleStepUpdate) ClearScheduleStepToFileExtract() *ScheduleStepUpdate {
	ssu.mutation.ClearScheduleStepToFileExtract()
	return ssu
}

// ClearScheduleStepToAnsible clears the "ScheduleStepToAnsible" edge to the Ansible entity.
func (ssu *ScheduleStepUpdate) ClearScheduleStepToAnsible() *ScheduleStepUpdate {
	ssu.mutation.ClearScheduleStepToAnsible()
	return ssu
}

// ClearScheduleStepToProvisionedScheduleStep clears all "ScheduleStepToProvisionedScheduleStep" edges to the ProvisionedScheduleStep entity.
func (ssu *ScheduleStepUpdate) ClearScheduleStepToProvisionedScheduleStep() *ScheduleStepUpdate {
	ssu.mutation.ClearScheduleStepToProvisionedScheduleStep()
	return ssu
}

// RemoveScheduleStepToProvisionedScheduleStepIDs removes the "ScheduleStepToProvisionedScheduleStep" edge to ProvisionedScheduleStep entities by IDs.
func (ssu *ScheduleStepUpdate) RemoveScheduleStepToProvisionedScheduleStepIDs(ids ...uuid.UUID) *ScheduleStepUpdate {
	ssu.mutation.RemoveScheduleStepToProvisionedScheduleStepIDs(ids...)
	return ssu
}

// RemoveScheduleStepToProvisionedScheduleStep removes "ScheduleStepToProvisionedScheduleStep" edges to ProvisionedScheduleStep entities.
func (ssu *ScheduleStepUpdate) RemoveScheduleStepToProvisionedScheduleStep(p ...*ProvisionedScheduleStep) *ScheduleStepUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ssu.RemoveScheduleStepToProvisionedScheduleStepIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ssu *ScheduleStepUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ssu.hooks) == 0 {
		if err = ssu.check(); err != nil {
			return 0, err
		}
		affected, err = ssu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ScheduleStepMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ssu.check(); err != nil {
				return 0, err
			}
			ssu.mutation = mutation
			affected, err = ssu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ssu.hooks) - 1; i >= 0; i-- {
			if ssu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ssu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ssu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ssu *ScheduleStepUpdate) SaveX(ctx context.Context) int {
	affected, err := ssu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ssu *ScheduleStepUpdate) Exec(ctx context.Context) error {
	_, err := ssu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssu *ScheduleStepUpdate) ExecX(ctx context.Context) {
	if err := ssu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ssu *ScheduleStepUpdate) check() error {
	if v, ok := ssu.mutation.GetType(); ok {
		if err := schedulestep.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ScheduleStep.type": %w`, err)}
		}
	}
	return nil
}

func (ssu *ScheduleStepUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   schedulestep.Table,
			Columns: schedulestep.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: schedulestep.FieldID,
			},
		},
	}
	if ps := ssu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ssu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: schedulestep.FieldType,
		})
	}
	if value, ok := ssu.mutation.Repeated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: schedulestep.FieldRepeated,
		})
	}
	if value, ok := ssu.mutation.StartTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: schedulestep.FieldStartTime,
		})
	}
	if value, ok := ssu.mutation.EndTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: schedulestep.FieldEndTime,
		})
	}
	if value, ok := ssu.mutation.Interval(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: schedulestep.FieldInterval,
		})
	}
	if value, ok := ssu.mutation.AddedInterval(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: schedulestep.FieldInterval,
		})
	}
	if ssu.mutation.ScheduleStepToStatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   schedulestep.ScheduleStepToStatusTable,
			Columns: []string{schedulestep.ScheduleStepToStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: status.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.ScheduleStepToStatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   schedulestep.ScheduleStepToStatusTable,
			Columns: []string{schedulestep.ScheduleStepToStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: status.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssu.mutation.ScheduleStepToProvisionedHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   schedulestep.ScheduleStepToProvisionedHostTable,
			Columns: []string{schedulestep.ScheduleStepToProvisionedHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionedhost.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.ScheduleStepToProvisionedHostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   schedulestep.ScheduleStepToProvisionedHostTable,
			Columns: []string{schedulestep.ScheduleStepToProvisionedHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionedhost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssu.mutation.ScheduleStepToScriptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   schedulestep.ScheduleStepToScriptTable,
			Columns: []string{schedulestep.ScheduleStepToScriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: script.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.ScheduleStepToScriptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   schedulestep.ScheduleStepToScriptTable,
			Columns: []string{schedulestep.ScheduleStepToScriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: script.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssu.mutation.ScheduleStepToCommandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   schedulestep.ScheduleStepToCommandTable,
			Columns: []string{schedulestep.ScheduleStepToCommandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: command.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.ScheduleStepToCommandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   schedulestep.ScheduleStepToCommandTable,
			Columns: []string{schedulestep.ScheduleStepToCommandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: command.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssu.mutation.ScheduleStepToFileDeleteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   schedulestep.ScheduleStepToFileDeleteTable,
			Columns: []string{schedulestep.ScheduleStepToFileDeleteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: filedelete.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.ScheduleStepToFileDeleteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   schedulestep.ScheduleStepToFileDeleteTable,
			Columns: []string{schedulestep.ScheduleStepToFileDeleteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: filedelete.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssu.mutation.ScheduleStepToFileDownloadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   schedulestep.ScheduleStepToFileDownloadTable,
			Columns: []string{schedulestep.ScheduleStepToFileDownloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: filedownload.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.ScheduleStepToFileDownloadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   schedulestep.ScheduleStepToFileDownloadTable,
			Columns: []string{schedulestep.ScheduleStepToFileDownloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: filedownload.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssu.mutation.ScheduleStepToFileExtractCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   schedulestep.ScheduleStepToFileExtractTable,
			Columns: []string{schedulestep.ScheduleStepToFileExtractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: fileextract.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.ScheduleStepToFileExtractIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   schedulestep.ScheduleStepToFileExtractTable,
			Columns: []string{schedulestep.ScheduleStepToFileExtractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: fileextract.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssu.mutation.ScheduleStepToAnsibleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   schedulestep.ScheduleStepToAnsibleTable,
			Columns: []string{schedulestep.ScheduleStepToAnsibleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ansible.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.ScheduleStepToAnsibleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   schedulestep.ScheduleStepToAnsibleTable,
			Columns: []string{schedulestep.ScheduleStepToAnsibleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ansible.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssu.mutation.ScheduleStepToProvisionedScheduleStepCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   schedulestep.ScheduleStepToProvisionedScheduleStepTable,
			Columns: []string{schedulestep.ScheduleStepToProvisionedScheduleStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionedschedulestep.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.RemovedScheduleStepToProvisionedScheduleStepIDs(); len(nodes) > 0 && !ssu.mutation.ScheduleStepToProvisionedScheduleStepCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   schedulestep.ScheduleStepToProvisionedScheduleStepTable,
			Columns: []string{schedulestep.ScheduleStepToProvisionedScheduleStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionedschedulestep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.ScheduleStepToProvisionedScheduleStepIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   schedulestep.ScheduleStepToProvisionedScheduleStepTable,
			Columns: []string{schedulestep.ScheduleStepToProvisionedScheduleStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionedschedulestep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ssu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{schedulestep.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ScheduleStepUpdateOne is the builder for updating a single ScheduleStep entity.
type ScheduleStepUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ScheduleStepMutation
}

// SetType sets the "type" field.
func (ssuo *ScheduleStepUpdateOne) SetType(s schedulestep.Type) *ScheduleStepUpdateOne {
	ssuo.mutation.SetType(s)
	return ssuo
}

// SetRepeated sets the "repeated" field.
func (ssuo *ScheduleStepUpdateOne) SetRepeated(b bool) *ScheduleStepUpdateOne {
	ssuo.mutation.SetRepeated(b)
	return ssuo
}

// SetStartTime sets the "start_time" field.
func (ssuo *ScheduleStepUpdateOne) SetStartTime(t time.Time) *ScheduleStepUpdateOne {
	ssuo.mutation.SetStartTime(t)
	return ssuo
}

// SetEndTime sets the "end_time" field.
func (ssuo *ScheduleStepUpdateOne) SetEndTime(t time.Time) *ScheduleStepUpdateOne {
	ssuo.mutation.SetEndTime(t)
	return ssuo
}

// SetInterval sets the "interval" field.
func (ssuo *ScheduleStepUpdateOne) SetInterval(i int) *ScheduleStepUpdateOne {
	ssuo.mutation.ResetInterval()
	ssuo.mutation.SetInterval(i)
	return ssuo
}

// AddInterval adds i to the "interval" field.
func (ssuo *ScheduleStepUpdateOne) AddInterval(i int) *ScheduleStepUpdateOne {
	ssuo.mutation.AddInterval(i)
	return ssuo
}

// SetScheduleStepToStatusID sets the "ScheduleStepToStatus" edge to the Status entity by ID.
func (ssuo *ScheduleStepUpdateOne) SetScheduleStepToStatusID(id uuid.UUID) *ScheduleStepUpdateOne {
	ssuo.mutation.SetScheduleStepToStatusID(id)
	return ssuo
}

// SetNillableScheduleStepToStatusID sets the "ScheduleStepToStatus" edge to the Status entity by ID if the given value is not nil.
func (ssuo *ScheduleStepUpdateOne) SetNillableScheduleStepToStatusID(id *uuid.UUID) *ScheduleStepUpdateOne {
	if id != nil {
		ssuo = ssuo.SetScheduleStepToStatusID(*id)
	}
	return ssuo
}

// SetScheduleStepToStatus sets the "ScheduleStepToStatus" edge to the Status entity.
func (ssuo *ScheduleStepUpdateOne) SetScheduleStepToStatus(s *Status) *ScheduleStepUpdateOne {
	return ssuo.SetScheduleStepToStatusID(s.ID)
}

// SetScheduleStepToProvisionedHostID sets the "ScheduleStepToProvisionedHost" edge to the ProvisionedHost entity by ID.
func (ssuo *ScheduleStepUpdateOne) SetScheduleStepToProvisionedHostID(id uuid.UUID) *ScheduleStepUpdateOne {
	ssuo.mutation.SetScheduleStepToProvisionedHostID(id)
	return ssuo
}

// SetNillableScheduleStepToProvisionedHostID sets the "ScheduleStepToProvisionedHost" edge to the ProvisionedHost entity by ID if the given value is not nil.
func (ssuo *ScheduleStepUpdateOne) SetNillableScheduleStepToProvisionedHostID(id *uuid.UUID) *ScheduleStepUpdateOne {
	if id != nil {
		ssuo = ssuo.SetScheduleStepToProvisionedHostID(*id)
	}
	return ssuo
}

// SetScheduleStepToProvisionedHost sets the "ScheduleStepToProvisionedHost" edge to the ProvisionedHost entity.
func (ssuo *ScheduleStepUpdateOne) SetScheduleStepToProvisionedHost(p *ProvisionedHost) *ScheduleStepUpdateOne {
	return ssuo.SetScheduleStepToProvisionedHostID(p.ID)
}

// SetScheduleStepToScriptID sets the "ScheduleStepToScript" edge to the Script entity by ID.
func (ssuo *ScheduleStepUpdateOne) SetScheduleStepToScriptID(id uuid.UUID) *ScheduleStepUpdateOne {
	ssuo.mutation.SetScheduleStepToScriptID(id)
	return ssuo
}

// SetNillableScheduleStepToScriptID sets the "ScheduleStepToScript" edge to the Script entity by ID if the given value is not nil.
func (ssuo *ScheduleStepUpdateOne) SetNillableScheduleStepToScriptID(id *uuid.UUID) *ScheduleStepUpdateOne {
	if id != nil {
		ssuo = ssuo.SetScheduleStepToScriptID(*id)
	}
	return ssuo
}

// SetScheduleStepToScript sets the "ScheduleStepToScript" edge to the Script entity.
func (ssuo *ScheduleStepUpdateOne) SetScheduleStepToScript(s *Script) *ScheduleStepUpdateOne {
	return ssuo.SetScheduleStepToScriptID(s.ID)
}

// SetScheduleStepToCommandID sets the "ScheduleStepToCommand" edge to the Command entity by ID.
func (ssuo *ScheduleStepUpdateOne) SetScheduleStepToCommandID(id uuid.UUID) *ScheduleStepUpdateOne {
	ssuo.mutation.SetScheduleStepToCommandID(id)
	return ssuo
}

// SetNillableScheduleStepToCommandID sets the "ScheduleStepToCommand" edge to the Command entity by ID if the given value is not nil.
func (ssuo *ScheduleStepUpdateOne) SetNillableScheduleStepToCommandID(id *uuid.UUID) *ScheduleStepUpdateOne {
	if id != nil {
		ssuo = ssuo.SetScheduleStepToCommandID(*id)
	}
	return ssuo
}

// SetScheduleStepToCommand sets the "ScheduleStepToCommand" edge to the Command entity.
func (ssuo *ScheduleStepUpdateOne) SetScheduleStepToCommand(c *Command) *ScheduleStepUpdateOne {
	return ssuo.SetScheduleStepToCommandID(c.ID)
}

// SetScheduleStepToFileDeleteID sets the "ScheduleStepToFileDelete" edge to the FileDelete entity by ID.
func (ssuo *ScheduleStepUpdateOne) SetScheduleStepToFileDeleteID(id uuid.UUID) *ScheduleStepUpdateOne {
	ssuo.mutation.SetScheduleStepToFileDeleteID(id)
	return ssuo
}

// SetNillableScheduleStepToFileDeleteID sets the "ScheduleStepToFileDelete" edge to the FileDelete entity by ID if the given value is not nil.
func (ssuo *ScheduleStepUpdateOne) SetNillableScheduleStepToFileDeleteID(id *uuid.UUID) *ScheduleStepUpdateOne {
	if id != nil {
		ssuo = ssuo.SetScheduleStepToFileDeleteID(*id)
	}
	return ssuo
}

// SetScheduleStepToFileDelete sets the "ScheduleStepToFileDelete" edge to the FileDelete entity.
func (ssuo *ScheduleStepUpdateOne) SetScheduleStepToFileDelete(f *FileDelete) *ScheduleStepUpdateOne {
	return ssuo.SetScheduleStepToFileDeleteID(f.ID)
}

// SetScheduleStepToFileDownloadID sets the "ScheduleStepToFileDownload" edge to the FileDownload entity by ID.
func (ssuo *ScheduleStepUpdateOne) SetScheduleStepToFileDownloadID(id uuid.UUID) *ScheduleStepUpdateOne {
	ssuo.mutation.SetScheduleStepToFileDownloadID(id)
	return ssuo
}

// SetNillableScheduleStepToFileDownloadID sets the "ScheduleStepToFileDownload" edge to the FileDownload entity by ID if the given value is not nil.
func (ssuo *ScheduleStepUpdateOne) SetNillableScheduleStepToFileDownloadID(id *uuid.UUID) *ScheduleStepUpdateOne {
	if id != nil {
		ssuo = ssuo.SetScheduleStepToFileDownloadID(*id)
	}
	return ssuo
}

// SetScheduleStepToFileDownload sets the "ScheduleStepToFileDownload" edge to the FileDownload entity.
func (ssuo *ScheduleStepUpdateOne) SetScheduleStepToFileDownload(f *FileDownload) *ScheduleStepUpdateOne {
	return ssuo.SetScheduleStepToFileDownloadID(f.ID)
}

// SetScheduleStepToFileExtractID sets the "ScheduleStepToFileExtract" edge to the FileExtract entity by ID.
func (ssuo *ScheduleStepUpdateOne) SetScheduleStepToFileExtractID(id uuid.UUID) *ScheduleStepUpdateOne {
	ssuo.mutation.SetScheduleStepToFileExtractID(id)
	return ssuo
}

// SetNillableScheduleStepToFileExtractID sets the "ScheduleStepToFileExtract" edge to the FileExtract entity by ID if the given value is not nil.
func (ssuo *ScheduleStepUpdateOne) SetNillableScheduleStepToFileExtractID(id *uuid.UUID) *ScheduleStepUpdateOne {
	if id != nil {
		ssuo = ssuo.SetScheduleStepToFileExtractID(*id)
	}
	return ssuo
}

// SetScheduleStepToFileExtract sets the "ScheduleStepToFileExtract" edge to the FileExtract entity.
func (ssuo *ScheduleStepUpdateOne) SetScheduleStepToFileExtract(f *FileExtract) *ScheduleStepUpdateOne {
	return ssuo.SetScheduleStepToFileExtractID(f.ID)
}

// SetScheduleStepToAnsibleID sets the "ScheduleStepToAnsible" edge to the Ansible entity by ID.
func (ssuo *ScheduleStepUpdateOne) SetScheduleStepToAnsibleID(id uuid.UUID) *ScheduleStepUpdateOne {
	ssuo.mutation.SetScheduleStepToAnsibleID(id)
	return ssuo
}

// SetNillableScheduleStepToAnsibleID sets the "ScheduleStepToAnsible" edge to the Ansible entity by ID if the given value is not nil.
func (ssuo *ScheduleStepUpdateOne) SetNillableScheduleStepToAnsibleID(id *uuid.UUID) *ScheduleStepUpdateOne {
	if id != nil {
		ssuo = ssuo.SetScheduleStepToAnsibleID(*id)
	}
	return ssuo
}

// SetScheduleStepToAnsible sets the "ScheduleStepToAnsible" edge to the Ansible entity.
func (ssuo *ScheduleStepUpdateOne) SetScheduleStepToAnsible(a *Ansible) *ScheduleStepUpdateOne {
	return ssuo.SetScheduleStepToAnsibleID(a.ID)
}

// AddScheduleStepToProvisionedScheduleStepIDs adds the "ScheduleStepToProvisionedScheduleStep" edge to the ProvisionedScheduleStep entity by IDs.
func (ssuo *ScheduleStepUpdateOne) AddScheduleStepToProvisionedScheduleStepIDs(ids ...uuid.UUID) *ScheduleStepUpdateOne {
	ssuo.mutation.AddScheduleStepToProvisionedScheduleStepIDs(ids...)
	return ssuo
}

// AddScheduleStepToProvisionedScheduleStep adds the "ScheduleStepToProvisionedScheduleStep" edges to the ProvisionedScheduleStep entity.
func (ssuo *ScheduleStepUpdateOne) AddScheduleStepToProvisionedScheduleStep(p ...*ProvisionedScheduleStep) *ScheduleStepUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ssuo.AddScheduleStepToProvisionedScheduleStepIDs(ids...)
}

// Mutation returns the ScheduleStepMutation object of the builder.
func (ssuo *ScheduleStepUpdateOne) Mutation() *ScheduleStepMutation {
	return ssuo.mutation
}

// ClearScheduleStepToStatus clears the "ScheduleStepToStatus" edge to the Status entity.
func (ssuo *ScheduleStepUpdateOne) ClearScheduleStepToStatus() *ScheduleStepUpdateOne {
	ssuo.mutation.ClearScheduleStepToStatus()
	return ssuo
}

// ClearScheduleStepToProvisionedHost clears the "ScheduleStepToProvisionedHost" edge to the ProvisionedHost entity.
func (ssuo *ScheduleStepUpdateOne) ClearScheduleStepToProvisionedHost() *ScheduleStepUpdateOne {
	ssuo.mutation.ClearScheduleStepToProvisionedHost()
	return ssuo
}

// ClearScheduleStepToScript clears the "ScheduleStepToScript" edge to the Script entity.
func (ssuo *ScheduleStepUpdateOne) ClearScheduleStepToScript() *ScheduleStepUpdateOne {
	ssuo.mutation.ClearScheduleStepToScript()
	return ssuo
}

// ClearScheduleStepToCommand clears the "ScheduleStepToCommand" edge to the Command entity.
func (ssuo *ScheduleStepUpdateOne) ClearScheduleStepToCommand() *ScheduleStepUpdateOne {
	ssuo.mutation.ClearScheduleStepToCommand()
	return ssuo
}

// ClearScheduleStepToFileDelete clears the "ScheduleStepToFileDelete" edge to the FileDelete entity.
func (ssuo *ScheduleStepUpdateOne) ClearScheduleStepToFileDelete() *ScheduleStepUpdateOne {
	ssuo.mutation.ClearScheduleStepToFileDelete()
	return ssuo
}

// ClearScheduleStepToFileDownload clears the "ScheduleStepToFileDownload" edge to the FileDownload entity.
func (ssuo *ScheduleStepUpdateOne) ClearScheduleStepToFileDownload() *ScheduleStepUpdateOne {
	ssuo.mutation.ClearScheduleStepToFileDownload()
	return ssuo
}

// ClearScheduleStepToFileExtract clears the "ScheduleStepToFileExtract" edge to the FileExtract entity.
func (ssuo *ScheduleStepUpdateOne) ClearScheduleStepToFileExtract() *ScheduleStepUpdateOne {
	ssuo.mutation.ClearScheduleStepToFileExtract()
	return ssuo
}

// ClearScheduleStepToAnsible clears the "ScheduleStepToAnsible" edge to the Ansible entity.
func (ssuo *ScheduleStepUpdateOne) ClearScheduleStepToAnsible() *ScheduleStepUpdateOne {
	ssuo.mutation.ClearScheduleStepToAnsible()
	return ssuo
}

// ClearScheduleStepToProvisionedScheduleStep clears all "ScheduleStepToProvisionedScheduleStep" edges to the ProvisionedScheduleStep entity.
func (ssuo *ScheduleStepUpdateOne) ClearScheduleStepToProvisionedScheduleStep() *ScheduleStepUpdateOne {
	ssuo.mutation.ClearScheduleStepToProvisionedScheduleStep()
	return ssuo
}

// RemoveScheduleStepToProvisionedScheduleStepIDs removes the "ScheduleStepToProvisionedScheduleStep" edge to ProvisionedScheduleStep entities by IDs.
func (ssuo *ScheduleStepUpdateOne) RemoveScheduleStepToProvisionedScheduleStepIDs(ids ...uuid.UUID) *ScheduleStepUpdateOne {
	ssuo.mutation.RemoveScheduleStepToProvisionedScheduleStepIDs(ids...)
	return ssuo
}

// RemoveScheduleStepToProvisionedScheduleStep removes "ScheduleStepToProvisionedScheduleStep" edges to ProvisionedScheduleStep entities.
func (ssuo *ScheduleStepUpdateOne) RemoveScheduleStepToProvisionedScheduleStep(p ...*ProvisionedScheduleStep) *ScheduleStepUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ssuo.RemoveScheduleStepToProvisionedScheduleStepIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ssuo *ScheduleStepUpdateOne) Select(field string, fields ...string) *ScheduleStepUpdateOne {
	ssuo.fields = append([]string{field}, fields...)
	return ssuo
}

// Save executes the query and returns the updated ScheduleStep entity.
func (ssuo *ScheduleStepUpdateOne) Save(ctx context.Context) (*ScheduleStep, error) {
	var (
		err  error
		node *ScheduleStep
	)
	if len(ssuo.hooks) == 0 {
		if err = ssuo.check(); err != nil {
			return nil, err
		}
		node, err = ssuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ScheduleStepMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ssuo.check(); err != nil {
				return nil, err
			}
			ssuo.mutation = mutation
			node, err = ssuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ssuo.hooks) - 1; i >= 0; i-- {
			if ssuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ssuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ssuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ScheduleStep)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ScheduleStepMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ssuo *ScheduleStepUpdateOne) SaveX(ctx context.Context) *ScheduleStep {
	node, err := ssuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ssuo *ScheduleStepUpdateOne) Exec(ctx context.Context) error {
	_, err := ssuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssuo *ScheduleStepUpdateOne) ExecX(ctx context.Context) {
	if err := ssuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ssuo *ScheduleStepUpdateOne) check() error {
	if v, ok := ssuo.mutation.GetType(); ok {
		if err := schedulestep.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ScheduleStep.type": %w`, err)}
		}
	}
	return nil
}

func (ssuo *ScheduleStepUpdateOne) sqlSave(ctx context.Context) (_node *ScheduleStep, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   schedulestep.Table,
			Columns: schedulestep.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: schedulestep.FieldID,
			},
		},
	}
	id, ok := ssuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ScheduleStep.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ssuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, schedulestep.FieldID)
		for _, f := range fields {
			if !schedulestep.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != schedulestep.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ssuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ssuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: schedulestep.FieldType,
		})
	}
	if value, ok := ssuo.mutation.Repeated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: schedulestep.FieldRepeated,
		})
	}
	if value, ok := ssuo.mutation.StartTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: schedulestep.FieldStartTime,
		})
	}
	if value, ok := ssuo.mutation.EndTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: schedulestep.FieldEndTime,
		})
	}
	if value, ok := ssuo.mutation.Interval(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: schedulestep.FieldInterval,
		})
	}
	if value, ok := ssuo.mutation.AddedInterval(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: schedulestep.FieldInterval,
		})
	}
	if ssuo.mutation.ScheduleStepToStatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   schedulestep.ScheduleStepToStatusTable,
			Columns: []string{schedulestep.ScheduleStepToStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: status.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.ScheduleStepToStatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   schedulestep.ScheduleStepToStatusTable,
			Columns: []string{schedulestep.ScheduleStepToStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: status.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssuo.mutation.ScheduleStepToProvisionedHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   schedulestep.ScheduleStepToProvisionedHostTable,
			Columns: []string{schedulestep.ScheduleStepToProvisionedHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionedhost.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.ScheduleStepToProvisionedHostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   schedulestep.ScheduleStepToProvisionedHostTable,
			Columns: []string{schedulestep.ScheduleStepToProvisionedHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionedhost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssuo.mutation.ScheduleStepToScriptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   schedulestep.ScheduleStepToScriptTable,
			Columns: []string{schedulestep.ScheduleStepToScriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: script.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.ScheduleStepToScriptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   schedulestep.ScheduleStepToScriptTable,
			Columns: []string{schedulestep.ScheduleStepToScriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: script.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssuo.mutation.ScheduleStepToCommandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   schedulestep.ScheduleStepToCommandTable,
			Columns: []string{schedulestep.ScheduleStepToCommandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: command.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.ScheduleStepToCommandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   schedulestep.ScheduleStepToCommandTable,
			Columns: []string{schedulestep.ScheduleStepToCommandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: command.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssuo.mutation.ScheduleStepToFileDeleteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   schedulestep.ScheduleStepToFileDeleteTable,
			Columns: []string{schedulestep.ScheduleStepToFileDeleteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: filedelete.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.ScheduleStepToFileDeleteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   schedulestep.ScheduleStepToFileDeleteTable,
			Columns: []string{schedulestep.ScheduleStepToFileDeleteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: filedelete.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssuo.mutation.ScheduleStepToFileDownloadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   schedulestep.ScheduleStepToFileDownloadTable,
			Columns: []string{schedulestep.ScheduleStepToFileDownloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: filedownload.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.ScheduleStepToFileDownloadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   schedulestep.ScheduleStepToFileDownloadTable,
			Columns: []string{schedulestep.ScheduleStepToFileDownloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: filedownload.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssuo.mutation.ScheduleStepToFileExtractCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   schedulestep.ScheduleStepToFileExtractTable,
			Columns: []string{schedulestep.ScheduleStepToFileExtractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: fileextract.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.ScheduleStepToFileExtractIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   schedulestep.ScheduleStepToFileExtractTable,
			Columns: []string{schedulestep.ScheduleStepToFileExtractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: fileextract.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssuo.mutation.ScheduleStepToAnsibleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   schedulestep.ScheduleStepToAnsibleTable,
			Columns: []string{schedulestep.ScheduleStepToAnsibleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ansible.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.ScheduleStepToAnsibleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   schedulestep.ScheduleStepToAnsibleTable,
			Columns: []string{schedulestep.ScheduleStepToAnsibleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ansible.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssuo.mutation.ScheduleStepToProvisionedScheduleStepCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   schedulestep.ScheduleStepToProvisionedScheduleStepTable,
			Columns: []string{schedulestep.ScheduleStepToProvisionedScheduleStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionedschedulestep.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.RemovedScheduleStepToProvisionedScheduleStepIDs(); len(nodes) > 0 && !ssuo.mutation.ScheduleStepToProvisionedScheduleStepCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   schedulestep.ScheduleStepToProvisionedScheduleStepTable,
			Columns: []string{schedulestep.ScheduleStepToProvisionedScheduleStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionedschedulestep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.ScheduleStepToProvisionedScheduleStepIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   schedulestep.ScheduleStepToProvisionedScheduleStepTable,
			Columns: []string{schedulestep.ScheduleStepToProvisionedScheduleStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provisionedschedulestep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ScheduleStep{config: ssuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ssuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{schedulestep.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
