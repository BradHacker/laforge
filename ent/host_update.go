// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/disk"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/host"
	"github.com/gen0cide/laforge/ent/hostdependency"
	"github.com/gen0cide/laforge/ent/includednetwork"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/user"
	"github.com/google/uuid"
)

// HostUpdate is the builder for updating Host entities.
type HostUpdate struct {
	config
	hooks    []Hook
	mutation *HostMutation
}

// Where appends a list predicates to the HostUpdate builder.
func (hu *HostUpdate) Where(ps ...predicate.Host) *HostUpdate {
	hu.mutation.Where(ps...)
	return hu
}

// SetHclID sets the "hcl_id" field.
func (hu *HostUpdate) SetHclID(s string) *HostUpdate {
	hu.mutation.SetHclID(s)
	return hu
}

// SetHostname sets the "hostname" field.
func (hu *HostUpdate) SetHostname(s string) *HostUpdate {
	hu.mutation.SetHostname(s)
	return hu
}

// SetDescription sets the "description" field.
func (hu *HostUpdate) SetDescription(s string) *HostUpdate {
	hu.mutation.SetDescription(s)
	return hu
}

// SetOS sets the "OS" field.
func (hu *HostUpdate) SetOS(s string) *HostUpdate {
	hu.mutation.SetOS(s)
	return hu
}

// SetLastOctet sets the "last_octet" field.
func (hu *HostUpdate) SetLastOctet(i int) *HostUpdate {
	hu.mutation.ResetLastOctet()
	hu.mutation.SetLastOctet(i)
	return hu
}

// AddLastOctet adds i to the "last_octet" field.
func (hu *HostUpdate) AddLastOctet(i int) *HostUpdate {
	hu.mutation.AddLastOctet(i)
	return hu
}

// SetInstanceSize sets the "instance_size" field.
func (hu *HostUpdate) SetInstanceSize(s string) *HostUpdate {
	hu.mutation.SetInstanceSize(s)
	return hu
}

// SetAllowMACChanges sets the "allow_mac_changes" field.
func (hu *HostUpdate) SetAllowMACChanges(b bool) *HostUpdate {
	hu.mutation.SetAllowMACChanges(b)
	return hu
}

// SetExposedTCPPorts sets the "exposed_tcp_ports" field.
func (hu *HostUpdate) SetExposedTCPPorts(s []string) *HostUpdate {
	hu.mutation.SetExposedTCPPorts(s)
	return hu
}

// SetExposedUDPPorts sets the "exposed_udp_ports" field.
func (hu *HostUpdate) SetExposedUDPPorts(s []string) *HostUpdate {
	hu.mutation.SetExposedUDPPorts(s)
	return hu
}

// SetOverridePassword sets the "override_password" field.
func (hu *HostUpdate) SetOverridePassword(s string) *HostUpdate {
	hu.mutation.SetOverridePassword(s)
	return hu
}

// SetVars sets the "vars" field.
func (hu *HostUpdate) SetVars(m map[string]string) *HostUpdate {
	hu.mutation.SetVars(m)
	return hu
}

// SetUserGroups sets the "user_groups" field.
func (hu *HostUpdate) SetUserGroups(s []string) *HostUpdate {
	hu.mutation.SetUserGroups(s)
	return hu
}

// SetProvisionSteps sets the "provision_steps" field.
func (hu *HostUpdate) SetProvisionSteps(s []string) *HostUpdate {
	hu.mutation.SetProvisionSteps(s)
	return hu
}

// ClearProvisionSteps clears the value of the "provision_steps" field.
func (hu *HostUpdate) ClearProvisionSteps() *HostUpdate {
	hu.mutation.ClearProvisionSteps()
	return hu
}

// SetTags sets the "tags" field.
func (hu *HostUpdate) SetTags(m map[string]string) *HostUpdate {
	hu.mutation.SetTags(m)
	return hu
}

// SetHostToDiskID sets the "HostToDisk" edge to the Disk entity by ID.
func (hu *HostUpdate) SetHostToDiskID(id uuid.UUID) *HostUpdate {
	hu.mutation.SetHostToDiskID(id)
	return hu
}

// SetNillableHostToDiskID sets the "HostToDisk" edge to the Disk entity by ID if the given value is not nil.
func (hu *HostUpdate) SetNillableHostToDiskID(id *uuid.UUID) *HostUpdate {
	if id != nil {
		hu = hu.SetHostToDiskID(*id)
	}
	return hu
}

// SetHostToDisk sets the "HostToDisk" edge to the Disk entity.
func (hu *HostUpdate) SetHostToDisk(d *Disk) *HostUpdate {
	return hu.SetHostToDiskID(d.ID)
}

// AddHostToUserIDs adds the "HostToUser" edge to the User entity by IDs.
func (hu *HostUpdate) AddHostToUserIDs(ids ...uuid.UUID) *HostUpdate {
	hu.mutation.AddHostToUserIDs(ids...)
	return hu
}

// AddHostToUser adds the "HostToUser" edges to the User entity.
func (hu *HostUpdate) AddHostToUser(u ...*User) *HostUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return hu.AddHostToUserIDs(ids...)
}

// SetHostToEnvironmentID sets the "HostToEnvironment" edge to the Environment entity by ID.
func (hu *HostUpdate) SetHostToEnvironmentID(id uuid.UUID) *HostUpdate {
	hu.mutation.SetHostToEnvironmentID(id)
	return hu
}

// SetNillableHostToEnvironmentID sets the "HostToEnvironment" edge to the Environment entity by ID if the given value is not nil.
func (hu *HostUpdate) SetNillableHostToEnvironmentID(id *uuid.UUID) *HostUpdate {
	if id != nil {
		hu = hu.SetHostToEnvironmentID(*id)
	}
	return hu
}

// SetHostToEnvironment sets the "HostToEnvironment" edge to the Environment entity.
func (hu *HostUpdate) SetHostToEnvironment(e *Environment) *HostUpdate {
	return hu.SetHostToEnvironmentID(e.ID)
}

// AddHostToIncludedNetworkIDs adds the "HostToIncludedNetwork" edge to the IncludedNetwork entity by IDs.
func (hu *HostUpdate) AddHostToIncludedNetworkIDs(ids ...uuid.UUID) *HostUpdate {
	hu.mutation.AddHostToIncludedNetworkIDs(ids...)
	return hu
}

// AddHostToIncludedNetwork adds the "HostToIncludedNetwork" edges to the IncludedNetwork entity.
func (hu *HostUpdate) AddHostToIncludedNetwork(i ...*IncludedNetwork) *HostUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return hu.AddHostToIncludedNetworkIDs(ids...)
}

// AddDependOnHostToHostDependencyIDs adds the "DependOnHostToHostDependency" edge to the HostDependency entity by IDs.
func (hu *HostUpdate) AddDependOnHostToHostDependencyIDs(ids ...uuid.UUID) *HostUpdate {
	hu.mutation.AddDependOnHostToHostDependencyIDs(ids...)
	return hu
}

// AddDependOnHostToHostDependency adds the "DependOnHostToHostDependency" edges to the HostDependency entity.
func (hu *HostUpdate) AddDependOnHostToHostDependency(h ...*HostDependency) *HostUpdate {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hu.AddDependOnHostToHostDependencyIDs(ids...)
}

// AddDependByHostToHostDependencyIDs adds the "DependByHostToHostDependency" edge to the HostDependency entity by IDs.
func (hu *HostUpdate) AddDependByHostToHostDependencyIDs(ids ...uuid.UUID) *HostUpdate {
	hu.mutation.AddDependByHostToHostDependencyIDs(ids...)
	return hu
}

// AddDependByHostToHostDependency adds the "DependByHostToHostDependency" edges to the HostDependency entity.
func (hu *HostUpdate) AddDependByHostToHostDependency(h ...*HostDependency) *HostUpdate {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hu.AddDependByHostToHostDependencyIDs(ids...)
}

// Mutation returns the HostMutation object of the builder.
func (hu *HostUpdate) Mutation() *HostMutation {
	return hu.mutation
}

// ClearHostToDisk clears the "HostToDisk" edge to the Disk entity.
func (hu *HostUpdate) ClearHostToDisk() *HostUpdate {
	hu.mutation.ClearHostToDisk()
	return hu
}

// ClearHostToUser clears all "HostToUser" edges to the User entity.
func (hu *HostUpdate) ClearHostToUser() *HostUpdate {
	hu.mutation.ClearHostToUser()
	return hu
}

// RemoveHostToUserIDs removes the "HostToUser" edge to User entities by IDs.
func (hu *HostUpdate) RemoveHostToUserIDs(ids ...uuid.UUID) *HostUpdate {
	hu.mutation.RemoveHostToUserIDs(ids...)
	return hu
}

// RemoveHostToUser removes "HostToUser" edges to User entities.
func (hu *HostUpdate) RemoveHostToUser(u ...*User) *HostUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return hu.RemoveHostToUserIDs(ids...)
}

// ClearHostToEnvironment clears the "HostToEnvironment" edge to the Environment entity.
func (hu *HostUpdate) ClearHostToEnvironment() *HostUpdate {
	hu.mutation.ClearHostToEnvironment()
	return hu
}

// ClearHostToIncludedNetwork clears all "HostToIncludedNetwork" edges to the IncludedNetwork entity.
func (hu *HostUpdate) ClearHostToIncludedNetwork() *HostUpdate {
	hu.mutation.ClearHostToIncludedNetwork()
	return hu
}

// RemoveHostToIncludedNetworkIDs removes the "HostToIncludedNetwork" edge to IncludedNetwork entities by IDs.
func (hu *HostUpdate) RemoveHostToIncludedNetworkIDs(ids ...uuid.UUID) *HostUpdate {
	hu.mutation.RemoveHostToIncludedNetworkIDs(ids...)
	return hu
}

// RemoveHostToIncludedNetwork removes "HostToIncludedNetwork" edges to IncludedNetwork entities.
func (hu *HostUpdate) RemoveHostToIncludedNetwork(i ...*IncludedNetwork) *HostUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return hu.RemoveHostToIncludedNetworkIDs(ids...)
}

// ClearDependOnHostToHostDependency clears all "DependOnHostToHostDependency" edges to the HostDependency entity.
func (hu *HostUpdate) ClearDependOnHostToHostDependency() *HostUpdate {
	hu.mutation.ClearDependOnHostToHostDependency()
	return hu
}

// RemoveDependOnHostToHostDependencyIDs removes the "DependOnHostToHostDependency" edge to HostDependency entities by IDs.
func (hu *HostUpdate) RemoveDependOnHostToHostDependencyIDs(ids ...uuid.UUID) *HostUpdate {
	hu.mutation.RemoveDependOnHostToHostDependencyIDs(ids...)
	return hu
}

// RemoveDependOnHostToHostDependency removes "DependOnHostToHostDependency" edges to HostDependency entities.
func (hu *HostUpdate) RemoveDependOnHostToHostDependency(h ...*HostDependency) *HostUpdate {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hu.RemoveDependOnHostToHostDependencyIDs(ids...)
}

// ClearDependByHostToHostDependency clears all "DependByHostToHostDependency" edges to the HostDependency entity.
func (hu *HostUpdate) ClearDependByHostToHostDependency() *HostUpdate {
	hu.mutation.ClearDependByHostToHostDependency()
	return hu
}

// RemoveDependByHostToHostDependencyIDs removes the "DependByHostToHostDependency" edge to HostDependency entities by IDs.
func (hu *HostUpdate) RemoveDependByHostToHostDependencyIDs(ids ...uuid.UUID) *HostUpdate {
	hu.mutation.RemoveDependByHostToHostDependencyIDs(ids...)
	return hu
}

// RemoveDependByHostToHostDependency removes "DependByHostToHostDependency" edges to HostDependency entities.
func (hu *HostUpdate) RemoveDependByHostToHostDependency(h ...*HostDependency) *HostUpdate {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hu.RemoveDependByHostToHostDependencyIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hu *HostUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(hu.hooks) == 0 {
		affected, err = hu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			hu.mutation = mutation
			affected, err = hu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(hu.hooks) - 1; i >= 0; i-- {
			if hu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = hu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, hu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (hu *HostUpdate) SaveX(ctx context.Context) int {
	affected, err := hu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hu *HostUpdate) Exec(ctx context.Context) error {
	_, err := hu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hu *HostUpdate) ExecX(ctx context.Context) {
	if err := hu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (hu *HostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   host.Table,
			Columns: host.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: host.FieldID,
			},
		},
	}
	if ps := hu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hu.mutation.HclID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: host.FieldHclID,
		})
	}
	if value, ok := hu.mutation.Hostname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: host.FieldHostname,
		})
	}
	if value, ok := hu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: host.FieldDescription,
		})
	}
	if value, ok := hu.mutation.OS(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: host.FieldOS,
		})
	}
	if value, ok := hu.mutation.LastOctet(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: host.FieldLastOctet,
		})
	}
	if value, ok := hu.mutation.AddedLastOctet(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: host.FieldLastOctet,
		})
	}
	if value, ok := hu.mutation.InstanceSize(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: host.FieldInstanceSize,
		})
	}
	if value, ok := hu.mutation.AllowMACChanges(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: host.FieldAllowMACChanges,
		})
	}
	if value, ok := hu.mutation.ExposedTCPPorts(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: host.FieldExposedTCPPorts,
		})
	}
	if value, ok := hu.mutation.ExposedUDPPorts(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: host.FieldExposedUDPPorts,
		})
	}
	if value, ok := hu.mutation.OverridePassword(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: host.FieldOverridePassword,
		})
	}
	if value, ok := hu.mutation.Vars(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: host.FieldVars,
		})
	}
	if value, ok := hu.mutation.UserGroups(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: host.FieldUserGroups,
		})
	}
	if value, ok := hu.mutation.ProvisionSteps(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: host.FieldProvisionSteps,
		})
	}
	if hu.mutation.ProvisionStepsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: host.FieldProvisionSteps,
		})
	}
	if value, ok := hu.mutation.Tags(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: host.FieldTags,
		})
	}
	if hu.mutation.HostToDiskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   host.HostToDiskTable,
			Columns: []string{host.HostToDiskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: disk.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.HostToDiskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   host.HostToDiskTable,
			Columns: []string{host.HostToDiskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: disk.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hu.mutation.HostToUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.HostToUserTable,
			Columns: []string{host.HostToUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.RemovedHostToUserIDs(); len(nodes) > 0 && !hu.mutation.HostToUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.HostToUserTable,
			Columns: []string{host.HostToUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.HostToUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.HostToUserTable,
			Columns: []string{host.HostToUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hu.mutation.HostToEnvironmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   host.HostToEnvironmentTable,
			Columns: []string{host.HostToEnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: environment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.HostToEnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   host.HostToEnvironmentTable,
			Columns: []string{host.HostToEnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: environment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hu.mutation.HostToIncludedNetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   host.HostToIncludedNetworkTable,
			Columns: host.HostToIncludedNetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: includednetwork.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.RemovedHostToIncludedNetworkIDs(); len(nodes) > 0 && !hu.mutation.HostToIncludedNetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   host.HostToIncludedNetworkTable,
			Columns: host.HostToIncludedNetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: includednetwork.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.HostToIncludedNetworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   host.HostToIncludedNetworkTable,
			Columns: host.HostToIncludedNetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: includednetwork.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hu.mutation.DependOnHostToHostDependencyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   host.DependOnHostToHostDependencyTable,
			Columns: []string{host.DependOnHostToHostDependencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: hostdependency.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.RemovedDependOnHostToHostDependencyIDs(); len(nodes) > 0 && !hu.mutation.DependOnHostToHostDependencyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   host.DependOnHostToHostDependencyTable,
			Columns: []string{host.DependOnHostToHostDependencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: hostdependency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.DependOnHostToHostDependencyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   host.DependOnHostToHostDependencyTable,
			Columns: []string{host.DependOnHostToHostDependencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: hostdependency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hu.mutation.DependByHostToHostDependencyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   host.DependByHostToHostDependencyTable,
			Columns: []string{host.DependByHostToHostDependencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: hostdependency.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.RemovedDependByHostToHostDependencyIDs(); len(nodes) > 0 && !hu.mutation.DependByHostToHostDependencyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   host.DependByHostToHostDependencyTable,
			Columns: []string{host.DependByHostToHostDependencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: hostdependency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.DependByHostToHostDependencyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   host.DependByHostToHostDependencyTable,
			Columns: []string{host.DependByHostToHostDependencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: hostdependency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{host.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// HostUpdateOne is the builder for updating a single Host entity.
type HostUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HostMutation
}

// SetHclID sets the "hcl_id" field.
func (huo *HostUpdateOne) SetHclID(s string) *HostUpdateOne {
	huo.mutation.SetHclID(s)
	return huo
}

// SetHostname sets the "hostname" field.
func (huo *HostUpdateOne) SetHostname(s string) *HostUpdateOne {
	huo.mutation.SetHostname(s)
	return huo
}

// SetDescription sets the "description" field.
func (huo *HostUpdateOne) SetDescription(s string) *HostUpdateOne {
	huo.mutation.SetDescription(s)
	return huo
}

// SetOS sets the "OS" field.
func (huo *HostUpdateOne) SetOS(s string) *HostUpdateOne {
	huo.mutation.SetOS(s)
	return huo
}

// SetLastOctet sets the "last_octet" field.
func (huo *HostUpdateOne) SetLastOctet(i int) *HostUpdateOne {
	huo.mutation.ResetLastOctet()
	huo.mutation.SetLastOctet(i)
	return huo
}

// AddLastOctet adds i to the "last_octet" field.
func (huo *HostUpdateOne) AddLastOctet(i int) *HostUpdateOne {
	huo.mutation.AddLastOctet(i)
	return huo
}

// SetInstanceSize sets the "instance_size" field.
func (huo *HostUpdateOne) SetInstanceSize(s string) *HostUpdateOne {
	huo.mutation.SetInstanceSize(s)
	return huo
}

// SetAllowMACChanges sets the "allow_mac_changes" field.
func (huo *HostUpdateOne) SetAllowMACChanges(b bool) *HostUpdateOne {
	huo.mutation.SetAllowMACChanges(b)
	return huo
}

// SetExposedTCPPorts sets the "exposed_tcp_ports" field.
func (huo *HostUpdateOne) SetExposedTCPPorts(s []string) *HostUpdateOne {
	huo.mutation.SetExposedTCPPorts(s)
	return huo
}

// SetExposedUDPPorts sets the "exposed_udp_ports" field.
func (huo *HostUpdateOne) SetExposedUDPPorts(s []string) *HostUpdateOne {
	huo.mutation.SetExposedUDPPorts(s)
	return huo
}

// SetOverridePassword sets the "override_password" field.
func (huo *HostUpdateOne) SetOverridePassword(s string) *HostUpdateOne {
	huo.mutation.SetOverridePassword(s)
	return huo
}

// SetVars sets the "vars" field.
func (huo *HostUpdateOne) SetVars(m map[string]string) *HostUpdateOne {
	huo.mutation.SetVars(m)
	return huo
}

// SetUserGroups sets the "user_groups" field.
func (huo *HostUpdateOne) SetUserGroups(s []string) *HostUpdateOne {
	huo.mutation.SetUserGroups(s)
	return huo
}

// SetProvisionSteps sets the "provision_steps" field.
func (huo *HostUpdateOne) SetProvisionSteps(s []string) *HostUpdateOne {
	huo.mutation.SetProvisionSteps(s)
	return huo
}

// ClearProvisionSteps clears the value of the "provision_steps" field.
func (huo *HostUpdateOne) ClearProvisionSteps() *HostUpdateOne {
	huo.mutation.ClearProvisionSteps()
	return huo
}

// SetTags sets the "tags" field.
func (huo *HostUpdateOne) SetTags(m map[string]string) *HostUpdateOne {
	huo.mutation.SetTags(m)
	return huo
}

// SetHostToDiskID sets the "HostToDisk" edge to the Disk entity by ID.
func (huo *HostUpdateOne) SetHostToDiskID(id uuid.UUID) *HostUpdateOne {
	huo.mutation.SetHostToDiskID(id)
	return huo
}

// SetNillableHostToDiskID sets the "HostToDisk" edge to the Disk entity by ID if the given value is not nil.
func (huo *HostUpdateOne) SetNillableHostToDiskID(id *uuid.UUID) *HostUpdateOne {
	if id != nil {
		huo = huo.SetHostToDiskID(*id)
	}
	return huo
}

// SetHostToDisk sets the "HostToDisk" edge to the Disk entity.
func (huo *HostUpdateOne) SetHostToDisk(d *Disk) *HostUpdateOne {
	return huo.SetHostToDiskID(d.ID)
}

// AddHostToUserIDs adds the "HostToUser" edge to the User entity by IDs.
func (huo *HostUpdateOne) AddHostToUserIDs(ids ...uuid.UUID) *HostUpdateOne {
	huo.mutation.AddHostToUserIDs(ids...)
	return huo
}

// AddHostToUser adds the "HostToUser" edges to the User entity.
func (huo *HostUpdateOne) AddHostToUser(u ...*User) *HostUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return huo.AddHostToUserIDs(ids...)
}

// SetHostToEnvironmentID sets the "HostToEnvironment" edge to the Environment entity by ID.
func (huo *HostUpdateOne) SetHostToEnvironmentID(id uuid.UUID) *HostUpdateOne {
	huo.mutation.SetHostToEnvironmentID(id)
	return huo
}

// SetNillableHostToEnvironmentID sets the "HostToEnvironment" edge to the Environment entity by ID if the given value is not nil.
func (huo *HostUpdateOne) SetNillableHostToEnvironmentID(id *uuid.UUID) *HostUpdateOne {
	if id != nil {
		huo = huo.SetHostToEnvironmentID(*id)
	}
	return huo
}

// SetHostToEnvironment sets the "HostToEnvironment" edge to the Environment entity.
func (huo *HostUpdateOne) SetHostToEnvironment(e *Environment) *HostUpdateOne {
	return huo.SetHostToEnvironmentID(e.ID)
}

// AddHostToIncludedNetworkIDs adds the "HostToIncludedNetwork" edge to the IncludedNetwork entity by IDs.
func (huo *HostUpdateOne) AddHostToIncludedNetworkIDs(ids ...uuid.UUID) *HostUpdateOne {
	huo.mutation.AddHostToIncludedNetworkIDs(ids...)
	return huo
}

// AddHostToIncludedNetwork adds the "HostToIncludedNetwork" edges to the IncludedNetwork entity.
func (huo *HostUpdateOne) AddHostToIncludedNetwork(i ...*IncludedNetwork) *HostUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return huo.AddHostToIncludedNetworkIDs(ids...)
}

// AddDependOnHostToHostDependencyIDs adds the "DependOnHostToHostDependency" edge to the HostDependency entity by IDs.
func (huo *HostUpdateOne) AddDependOnHostToHostDependencyIDs(ids ...uuid.UUID) *HostUpdateOne {
	huo.mutation.AddDependOnHostToHostDependencyIDs(ids...)
	return huo
}

// AddDependOnHostToHostDependency adds the "DependOnHostToHostDependency" edges to the HostDependency entity.
func (huo *HostUpdateOne) AddDependOnHostToHostDependency(h ...*HostDependency) *HostUpdateOne {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return huo.AddDependOnHostToHostDependencyIDs(ids...)
}

// AddDependByHostToHostDependencyIDs adds the "DependByHostToHostDependency" edge to the HostDependency entity by IDs.
func (huo *HostUpdateOne) AddDependByHostToHostDependencyIDs(ids ...uuid.UUID) *HostUpdateOne {
	huo.mutation.AddDependByHostToHostDependencyIDs(ids...)
	return huo
}

// AddDependByHostToHostDependency adds the "DependByHostToHostDependency" edges to the HostDependency entity.
func (huo *HostUpdateOne) AddDependByHostToHostDependency(h ...*HostDependency) *HostUpdateOne {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return huo.AddDependByHostToHostDependencyIDs(ids...)
}

// Mutation returns the HostMutation object of the builder.
func (huo *HostUpdateOne) Mutation() *HostMutation {
	return huo.mutation
}

// ClearHostToDisk clears the "HostToDisk" edge to the Disk entity.
func (huo *HostUpdateOne) ClearHostToDisk() *HostUpdateOne {
	huo.mutation.ClearHostToDisk()
	return huo
}

// ClearHostToUser clears all "HostToUser" edges to the User entity.
func (huo *HostUpdateOne) ClearHostToUser() *HostUpdateOne {
	huo.mutation.ClearHostToUser()
	return huo
}

// RemoveHostToUserIDs removes the "HostToUser" edge to User entities by IDs.
func (huo *HostUpdateOne) RemoveHostToUserIDs(ids ...uuid.UUID) *HostUpdateOne {
	huo.mutation.RemoveHostToUserIDs(ids...)
	return huo
}

// RemoveHostToUser removes "HostToUser" edges to User entities.
func (huo *HostUpdateOne) RemoveHostToUser(u ...*User) *HostUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return huo.RemoveHostToUserIDs(ids...)
}

// ClearHostToEnvironment clears the "HostToEnvironment" edge to the Environment entity.
func (huo *HostUpdateOne) ClearHostToEnvironment() *HostUpdateOne {
	huo.mutation.ClearHostToEnvironment()
	return huo
}

// ClearHostToIncludedNetwork clears all "HostToIncludedNetwork" edges to the IncludedNetwork entity.
func (huo *HostUpdateOne) ClearHostToIncludedNetwork() *HostUpdateOne {
	huo.mutation.ClearHostToIncludedNetwork()
	return huo
}

// RemoveHostToIncludedNetworkIDs removes the "HostToIncludedNetwork" edge to IncludedNetwork entities by IDs.
func (huo *HostUpdateOne) RemoveHostToIncludedNetworkIDs(ids ...uuid.UUID) *HostUpdateOne {
	huo.mutation.RemoveHostToIncludedNetworkIDs(ids...)
	return huo
}

// RemoveHostToIncludedNetwork removes "HostToIncludedNetwork" edges to IncludedNetwork entities.
func (huo *HostUpdateOne) RemoveHostToIncludedNetwork(i ...*IncludedNetwork) *HostUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return huo.RemoveHostToIncludedNetworkIDs(ids...)
}

// ClearDependOnHostToHostDependency clears all "DependOnHostToHostDependency" edges to the HostDependency entity.
func (huo *HostUpdateOne) ClearDependOnHostToHostDependency() *HostUpdateOne {
	huo.mutation.ClearDependOnHostToHostDependency()
	return huo
}

// RemoveDependOnHostToHostDependencyIDs removes the "DependOnHostToHostDependency" edge to HostDependency entities by IDs.
func (huo *HostUpdateOne) RemoveDependOnHostToHostDependencyIDs(ids ...uuid.UUID) *HostUpdateOne {
	huo.mutation.RemoveDependOnHostToHostDependencyIDs(ids...)
	return huo
}

// RemoveDependOnHostToHostDependency removes "DependOnHostToHostDependency" edges to HostDependency entities.
func (huo *HostUpdateOne) RemoveDependOnHostToHostDependency(h ...*HostDependency) *HostUpdateOne {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return huo.RemoveDependOnHostToHostDependencyIDs(ids...)
}

// ClearDependByHostToHostDependency clears all "DependByHostToHostDependency" edges to the HostDependency entity.
func (huo *HostUpdateOne) ClearDependByHostToHostDependency() *HostUpdateOne {
	huo.mutation.ClearDependByHostToHostDependency()
	return huo
}

// RemoveDependByHostToHostDependencyIDs removes the "DependByHostToHostDependency" edge to HostDependency entities by IDs.
func (huo *HostUpdateOne) RemoveDependByHostToHostDependencyIDs(ids ...uuid.UUID) *HostUpdateOne {
	huo.mutation.RemoveDependByHostToHostDependencyIDs(ids...)
	return huo
}

// RemoveDependByHostToHostDependency removes "DependByHostToHostDependency" edges to HostDependency entities.
func (huo *HostUpdateOne) RemoveDependByHostToHostDependency(h ...*HostDependency) *HostUpdateOne {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return huo.RemoveDependByHostToHostDependencyIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (huo *HostUpdateOne) Select(field string, fields ...string) *HostUpdateOne {
	huo.fields = append([]string{field}, fields...)
	return huo
}

// Save executes the query and returns the updated Host entity.
func (huo *HostUpdateOne) Save(ctx context.Context) (*Host, error) {
	var (
		err  error
		node *Host
	)
	if len(huo.hooks) == 0 {
		node, err = huo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			huo.mutation = mutation
			node, err = huo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(huo.hooks) - 1; i >= 0; i-- {
			if huo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = huo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, huo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (huo *HostUpdateOne) SaveX(ctx context.Context) *Host {
	node, err := huo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (huo *HostUpdateOne) Exec(ctx context.Context) error {
	_, err := huo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (huo *HostUpdateOne) ExecX(ctx context.Context) {
	if err := huo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (huo *HostUpdateOne) sqlSave(ctx context.Context) (_node *Host, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   host.Table,
			Columns: host.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: host.FieldID,
			},
		},
	}
	id, ok := huo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Host.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := huo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, host.FieldID)
		for _, f := range fields {
			if !host.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != host.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := huo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := huo.mutation.HclID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: host.FieldHclID,
		})
	}
	if value, ok := huo.mutation.Hostname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: host.FieldHostname,
		})
	}
	if value, ok := huo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: host.FieldDescription,
		})
	}
	if value, ok := huo.mutation.OS(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: host.FieldOS,
		})
	}
	if value, ok := huo.mutation.LastOctet(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: host.FieldLastOctet,
		})
	}
	if value, ok := huo.mutation.AddedLastOctet(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: host.FieldLastOctet,
		})
	}
	if value, ok := huo.mutation.InstanceSize(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: host.FieldInstanceSize,
		})
	}
	if value, ok := huo.mutation.AllowMACChanges(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: host.FieldAllowMACChanges,
		})
	}
	if value, ok := huo.mutation.ExposedTCPPorts(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: host.FieldExposedTCPPorts,
		})
	}
	if value, ok := huo.mutation.ExposedUDPPorts(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: host.FieldExposedUDPPorts,
		})
	}
	if value, ok := huo.mutation.OverridePassword(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: host.FieldOverridePassword,
		})
	}
	if value, ok := huo.mutation.Vars(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: host.FieldVars,
		})
	}
	if value, ok := huo.mutation.UserGroups(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: host.FieldUserGroups,
		})
	}
	if value, ok := huo.mutation.ProvisionSteps(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: host.FieldProvisionSteps,
		})
	}
	if huo.mutation.ProvisionStepsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: host.FieldProvisionSteps,
		})
	}
	if value, ok := huo.mutation.Tags(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: host.FieldTags,
		})
	}
	if huo.mutation.HostToDiskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   host.HostToDiskTable,
			Columns: []string{host.HostToDiskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: disk.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.HostToDiskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   host.HostToDiskTable,
			Columns: []string{host.HostToDiskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: disk.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if huo.mutation.HostToUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.HostToUserTable,
			Columns: []string{host.HostToUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.RemovedHostToUserIDs(); len(nodes) > 0 && !huo.mutation.HostToUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.HostToUserTable,
			Columns: []string{host.HostToUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.HostToUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.HostToUserTable,
			Columns: []string{host.HostToUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if huo.mutation.HostToEnvironmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   host.HostToEnvironmentTable,
			Columns: []string{host.HostToEnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: environment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.HostToEnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   host.HostToEnvironmentTable,
			Columns: []string{host.HostToEnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: environment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if huo.mutation.HostToIncludedNetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   host.HostToIncludedNetworkTable,
			Columns: host.HostToIncludedNetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: includednetwork.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.RemovedHostToIncludedNetworkIDs(); len(nodes) > 0 && !huo.mutation.HostToIncludedNetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   host.HostToIncludedNetworkTable,
			Columns: host.HostToIncludedNetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: includednetwork.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.HostToIncludedNetworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   host.HostToIncludedNetworkTable,
			Columns: host.HostToIncludedNetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: includednetwork.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if huo.mutation.DependOnHostToHostDependencyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   host.DependOnHostToHostDependencyTable,
			Columns: []string{host.DependOnHostToHostDependencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: hostdependency.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.RemovedDependOnHostToHostDependencyIDs(); len(nodes) > 0 && !huo.mutation.DependOnHostToHostDependencyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   host.DependOnHostToHostDependencyTable,
			Columns: []string{host.DependOnHostToHostDependencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: hostdependency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.DependOnHostToHostDependencyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   host.DependOnHostToHostDependencyTable,
			Columns: []string{host.DependOnHostToHostDependencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: hostdependency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if huo.mutation.DependByHostToHostDependencyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   host.DependByHostToHostDependencyTable,
			Columns: []string{host.DependByHostToHostDependencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: hostdependency.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.RemovedDependByHostToHostDependencyIDs(); len(nodes) > 0 && !huo.mutation.DependByHostToHostDependencyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   host.DependByHostToHostDependencyTable,
			Columns: []string{host.DependByHostToHostDependencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: hostdependency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.DependByHostToHostDependencyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   host.DependByHostToHostDependencyTable,
			Columns: []string{host.DependByHostToHostDependencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: hostdependency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Host{config: huo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, huo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{host.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
