// Code generated by ent, DO NOT EDIT.

package host

import (
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the host type in the database.
	Label = "host"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHclID holds the string denoting the hcl_id field in the database.
	FieldHclID = "hcl_id"
	// FieldHostname holds the string denoting the hostname field in the database.
	FieldHostname = "hostname"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldOS holds the string denoting the os field in the database.
	FieldOS = "os"
	// FieldLastOctet holds the string denoting the last_octet field in the database.
	FieldLastOctet = "last_octet"
	// FieldInstanceSize holds the string denoting the instance_size field in the database.
	FieldInstanceSize = "instance_size"
	// FieldAllowMACChanges holds the string denoting the allow_mac_changes field in the database.
	FieldAllowMACChanges = "allow_mac_changes"
	// FieldExposedTCPPorts holds the string denoting the exposed_tcp_ports field in the database.
	FieldExposedTCPPorts = "exposed_tcp_ports"
	// FieldExposedUDPPorts holds the string denoting the exposed_udp_ports field in the database.
	FieldExposedUDPPorts = "exposed_udp_ports"
	// FieldOverridePassword holds the string denoting the override_password field in the database.
	FieldOverridePassword = "override_password"
	// FieldVars holds the string denoting the vars field in the database.
	FieldVars = "vars"
	// FieldUserGroups holds the string denoting the user_groups field in the database.
	FieldUserGroups = "user_groups"
	// FieldProvisionSteps holds the string denoting the provision_steps field in the database.
	FieldProvisionSteps = "provision_steps"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// EdgeHostToDisk holds the string denoting the hosttodisk edge name in mutations.
	EdgeHostToDisk = "HostToDisk"
	// EdgeHostToUser holds the string denoting the hosttouser edge name in mutations.
	EdgeHostToUser = "HostToUser"
	// EdgeHostToEnvironment holds the string denoting the hosttoenvironment edge name in mutations.
	EdgeHostToEnvironment = "HostToEnvironment"
	// EdgeHostToIncludedNetwork holds the string denoting the hosttoincludednetwork edge name in mutations.
	EdgeHostToIncludedNetwork = "HostToIncludedNetwork"
	// EdgeDependOnHostToHostDependency holds the string denoting the dependonhosttohostdependency edge name in mutations.
	EdgeDependOnHostToHostDependency = "DependOnHostToHostDependency"
	// EdgeDependByHostToHostDependency holds the string denoting the dependbyhosttohostdependency edge name in mutations.
	EdgeDependByHostToHostDependency = "DependByHostToHostDependency"
	// Table holds the table name of the host in the database.
	Table = "hosts"
	// HostToDiskTable is the table that holds the HostToDisk relation/edge.
	HostToDiskTable = "disks"
	// HostToDiskInverseTable is the table name for the Disk entity.
	// It exists in this package in order to avoid circular dependency with the "disk" package.
	HostToDiskInverseTable = "disks"
	// HostToDiskColumn is the table column denoting the HostToDisk relation/edge.
	HostToDiskColumn = "host_host_to_disk"
	// HostToUserTable is the table that holds the HostToUser relation/edge.
	HostToUserTable = "users"
	// HostToUserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	HostToUserInverseTable = "users"
	// HostToUserColumn is the table column denoting the HostToUser relation/edge.
	HostToUserColumn = "host_host_to_user"
	// HostToEnvironmentTable is the table that holds the HostToEnvironment relation/edge.
	HostToEnvironmentTable = "hosts"
	// HostToEnvironmentInverseTable is the table name for the Environment entity.
	// It exists in this package in order to avoid circular dependency with the "environment" package.
	HostToEnvironmentInverseTable = "environments"
	// HostToEnvironmentColumn is the table column denoting the HostToEnvironment relation/edge.
	HostToEnvironmentColumn = "environment_environment_to_host"
	// HostToIncludedNetworkTable is the table that holds the HostToIncludedNetwork relation/edge. The primary key declared below.
	HostToIncludedNetworkTable = "included_network_IncludedNetworkToHost"
	// HostToIncludedNetworkInverseTable is the table name for the IncludedNetwork entity.
	// It exists in this package in order to avoid circular dependency with the "includednetwork" package.
	HostToIncludedNetworkInverseTable = "included_networks"
	// DependOnHostToHostDependencyTable is the table that holds the DependOnHostToHostDependency relation/edge.
	DependOnHostToHostDependencyTable = "host_dependencies"
	// DependOnHostToHostDependencyInverseTable is the table name for the HostDependency entity.
	// It exists in this package in order to avoid circular dependency with the "hostdependency" package.
	DependOnHostToHostDependencyInverseTable = "host_dependencies"
	// DependOnHostToHostDependencyColumn is the table column denoting the DependOnHostToHostDependency relation/edge.
	DependOnHostToHostDependencyColumn = "host_dependency_host_dependency_to_depend_on_host"
	// DependByHostToHostDependencyTable is the table that holds the DependByHostToHostDependency relation/edge.
	DependByHostToHostDependencyTable = "host_dependencies"
	// DependByHostToHostDependencyInverseTable is the table name for the HostDependency entity.
	// It exists in this package in order to avoid circular dependency with the "hostdependency" package.
	DependByHostToHostDependencyInverseTable = "host_dependencies"
	// DependByHostToHostDependencyColumn is the table column denoting the DependByHostToHostDependency relation/edge.
	DependByHostToHostDependencyColumn = "host_dependency_host_dependency_to_depend_by_host"
)

// Columns holds all SQL columns for host fields.
var Columns = []string{
	FieldID,
	FieldHclID,
	FieldHostname,
	FieldDescription,
	FieldOS,
	FieldLastOctet,
	FieldInstanceSize,
	FieldAllowMACChanges,
	FieldExposedTCPPorts,
	FieldExposedUDPPorts,
	FieldOverridePassword,
	FieldVars,
	FieldUserGroups,
	FieldProvisionSteps,
	FieldTags,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "hosts"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"environment_environment_to_host",
}

var (
	// HostToIncludedNetworkPrimaryKey and HostToIncludedNetworkColumn2 are the table columns denoting the
	// primary key for the HostToIncludedNetwork relation (M2M).
	HostToIncludedNetworkPrimaryKey = []string{"included_network_id", "host_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
