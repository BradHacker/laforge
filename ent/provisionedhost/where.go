// Code generated by ent, DO NOT EDIT.

package provisionedhost

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ProvisionedHost {
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ProvisionedHost {
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ProvisionedHost {
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ProvisionedHost {
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ProvisionedHost {
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ProvisionedHost {
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ProvisionedHost {
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ProvisionedHost {
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ProvisionedHost {
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// SubnetIP applies equality check predicate on the "subnet_ip" field. It's identical to SubnetIPEQ.
func SubnetIP(v string) predicate.ProvisionedHost {
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubnetIP), v))
	})
}

// SubnetIPEQ applies the EQ predicate on the "subnet_ip" field.
func SubnetIPEQ(v string) predicate.ProvisionedHost {
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubnetIP), v))
	})
}

// SubnetIPNEQ applies the NEQ predicate on the "subnet_ip" field.
func SubnetIPNEQ(v string) predicate.ProvisionedHost {
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSubnetIP), v))
	})
}

// SubnetIPIn applies the In predicate on the "subnet_ip" field.
func SubnetIPIn(vs ...string) predicate.ProvisionedHost {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSubnetIP), v...))
	})
}

// SubnetIPNotIn applies the NotIn predicate on the "subnet_ip" field.
func SubnetIPNotIn(vs ...string) predicate.ProvisionedHost {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSubnetIP), v...))
	})
}

// SubnetIPGT applies the GT predicate on the "subnet_ip" field.
func SubnetIPGT(v string) predicate.ProvisionedHost {
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSubnetIP), v))
	})
}

// SubnetIPGTE applies the GTE predicate on the "subnet_ip" field.
func SubnetIPGTE(v string) predicate.ProvisionedHost {
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSubnetIP), v))
	})
}

// SubnetIPLT applies the LT predicate on the "subnet_ip" field.
func SubnetIPLT(v string) predicate.ProvisionedHost {
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSubnetIP), v))
	})
}

// SubnetIPLTE applies the LTE predicate on the "subnet_ip" field.
func SubnetIPLTE(v string) predicate.ProvisionedHost {
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSubnetIP), v))
	})
}

// SubnetIPContains applies the Contains predicate on the "subnet_ip" field.
func SubnetIPContains(v string) predicate.ProvisionedHost {
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSubnetIP), v))
	})
}

// SubnetIPHasPrefix applies the HasPrefix predicate on the "subnet_ip" field.
func SubnetIPHasPrefix(v string) predicate.ProvisionedHost {
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSubnetIP), v))
	})
}

// SubnetIPHasSuffix applies the HasSuffix predicate on the "subnet_ip" field.
func SubnetIPHasSuffix(v string) predicate.ProvisionedHost {
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSubnetIP), v))
	})
}

// SubnetIPEqualFold applies the EqualFold predicate on the "subnet_ip" field.
func SubnetIPEqualFold(v string) predicate.ProvisionedHost {
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSubnetIP), v))
	})
}

// SubnetIPContainsFold applies the ContainsFold predicate on the "subnet_ip" field.
func SubnetIPContainsFold(v string) predicate.ProvisionedHost {
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSubnetIP), v))
	})
}

// AddonTypeEQ applies the EQ predicate on the "addon_type" field.
func AddonTypeEQ(v AddonType) predicate.ProvisionedHost {
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddonType), v))
	})
}

// AddonTypeNEQ applies the NEQ predicate on the "addon_type" field.
func AddonTypeNEQ(v AddonType) predicate.ProvisionedHost {
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAddonType), v))
	})
}

// AddonTypeIn applies the In predicate on the "addon_type" field.
func AddonTypeIn(vs ...AddonType) predicate.ProvisionedHost {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAddonType), v...))
	})
}

// AddonTypeNotIn applies the NotIn predicate on the "addon_type" field.
func AddonTypeNotIn(vs ...AddonType) predicate.ProvisionedHost {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAddonType), v...))
	})
}

// AddonTypeIsNil applies the IsNil predicate on the "addon_type" field.
func AddonTypeIsNil() predicate.ProvisionedHost {
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAddonType)))
	})
}

// AddonTypeNotNil applies the NotNil predicate on the "addon_type" field.
func AddonTypeNotNil() predicate.ProvisionedHost {
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAddonType)))
	})
}

// HasProvisionedHostToStatus applies the HasEdge predicate on the "ProvisionedHostToStatus" edge.
func HasProvisionedHostToStatus() predicate.ProvisionedHost {
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProvisionedHostToStatusTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ProvisionedHostToStatusTable, ProvisionedHostToStatusColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProvisionedHostToStatusWith applies the HasEdge predicate on the "ProvisionedHostToStatus" edge with a given conditions (other predicates).
func HasProvisionedHostToStatusWith(preds ...predicate.Status) predicate.ProvisionedHost {
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProvisionedHostToStatusInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ProvisionedHostToStatusTable, ProvisionedHostToStatusColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProvisionedHostToProvisionedNetwork applies the HasEdge predicate on the "ProvisionedHostToProvisionedNetwork" edge.
func HasProvisionedHostToProvisionedNetwork() predicate.ProvisionedHost {
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProvisionedHostToProvisionedNetworkTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProvisionedHostToProvisionedNetworkTable, ProvisionedHostToProvisionedNetworkColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProvisionedHostToProvisionedNetworkWith applies the HasEdge predicate on the "ProvisionedHostToProvisionedNetwork" edge with a given conditions (other predicates).
func HasProvisionedHostToProvisionedNetworkWith(preds ...predicate.ProvisionedNetwork) predicate.ProvisionedHost {
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProvisionedHostToProvisionedNetworkInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProvisionedHostToProvisionedNetworkTable, ProvisionedHostToProvisionedNetworkColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProvisionedHostToHost applies the HasEdge predicate on the "ProvisionedHostToHost" edge.
func HasProvisionedHostToHost() predicate.ProvisionedHost {
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProvisionedHostToHostTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProvisionedHostToHostTable, ProvisionedHostToHostColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProvisionedHostToHostWith applies the HasEdge predicate on the "ProvisionedHostToHost" edge with a given conditions (other predicates).
func HasProvisionedHostToHostWith(preds ...predicate.Host) predicate.ProvisionedHost {
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProvisionedHostToHostInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProvisionedHostToHostTable, ProvisionedHostToHostColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProvisionedHostToEndStepPlan applies the HasEdge predicate on the "ProvisionedHostToEndStepPlan" edge.
func HasProvisionedHostToEndStepPlan() predicate.ProvisionedHost {
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProvisionedHostToEndStepPlanTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProvisionedHostToEndStepPlanTable, ProvisionedHostToEndStepPlanColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProvisionedHostToEndStepPlanWith applies the HasEdge predicate on the "ProvisionedHostToEndStepPlan" edge with a given conditions (other predicates).
func HasProvisionedHostToEndStepPlanWith(preds ...predicate.Plan) predicate.ProvisionedHost {
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProvisionedHostToEndStepPlanInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProvisionedHostToEndStepPlanTable, ProvisionedHostToEndStepPlanColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProvisionedHostToBuild applies the HasEdge predicate on the "ProvisionedHostToBuild" edge.
func HasProvisionedHostToBuild() predicate.ProvisionedHost {
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProvisionedHostToBuildTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProvisionedHostToBuildTable, ProvisionedHostToBuildColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProvisionedHostToBuildWith applies the HasEdge predicate on the "ProvisionedHostToBuild" edge with a given conditions (other predicates).
func HasProvisionedHostToBuildWith(preds ...predicate.Build) predicate.ProvisionedHost {
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProvisionedHostToBuildInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProvisionedHostToBuildTable, ProvisionedHostToBuildColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProvisionedHostToProvisioningStep applies the HasEdge predicate on the "ProvisionedHostToProvisioningStep" edge.
func HasProvisionedHostToProvisioningStep() predicate.ProvisionedHost {
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProvisionedHostToProvisioningStepTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ProvisionedHostToProvisioningStepTable, ProvisionedHostToProvisioningStepColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProvisionedHostToProvisioningStepWith applies the HasEdge predicate on the "ProvisionedHostToProvisioningStep" edge with a given conditions (other predicates).
func HasProvisionedHostToProvisioningStepWith(preds ...predicate.ProvisioningStep) predicate.ProvisionedHost {
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProvisionedHostToProvisioningStepInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ProvisionedHostToProvisioningStepTable, ProvisionedHostToProvisioningStepColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProvisionedHostToProvisioningScheduleStep applies the HasEdge predicate on the "ProvisionedHostToProvisioningScheduleStep" edge.
func HasProvisionedHostToProvisioningScheduleStep() predicate.ProvisionedHost {
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProvisionedHostToProvisioningScheduleStepTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ProvisionedHostToProvisioningScheduleStepTable, ProvisionedHostToProvisioningScheduleStepColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProvisionedHostToProvisioningScheduleStepWith applies the HasEdge predicate on the "ProvisionedHostToProvisioningScheduleStep" edge with a given conditions (other predicates).
func HasProvisionedHostToProvisioningScheduleStepWith(preds ...predicate.ProvisioningScheduledStep) predicate.ProvisionedHost {
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProvisionedHostToProvisioningScheduleStepInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ProvisionedHostToProvisioningScheduleStepTable, ProvisionedHostToProvisioningScheduleStepColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProvisionedHostToAgentStatus applies the HasEdge predicate on the "ProvisionedHostToAgentStatus" edge.
func HasProvisionedHostToAgentStatus() predicate.ProvisionedHost {
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProvisionedHostToAgentStatusTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ProvisionedHostToAgentStatusTable, ProvisionedHostToAgentStatusColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProvisionedHostToAgentStatusWith applies the HasEdge predicate on the "ProvisionedHostToAgentStatus" edge with a given conditions (other predicates).
func HasProvisionedHostToAgentStatusWith(preds ...predicate.AgentStatus) predicate.ProvisionedHost {
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProvisionedHostToAgentStatusInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ProvisionedHostToAgentStatusTable, ProvisionedHostToAgentStatusColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProvisionedHostToAgentTask applies the HasEdge predicate on the "ProvisionedHostToAgentTask" edge.
func HasProvisionedHostToAgentTask() predicate.ProvisionedHost {
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProvisionedHostToAgentTaskTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ProvisionedHostToAgentTaskTable, ProvisionedHostToAgentTaskColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProvisionedHostToAgentTaskWith applies the HasEdge predicate on the "ProvisionedHostToAgentTask" edge with a given conditions (other predicates).
func HasProvisionedHostToAgentTaskWith(preds ...predicate.AgentTask) predicate.ProvisionedHost {
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProvisionedHostToAgentTaskInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ProvisionedHostToAgentTaskTable, ProvisionedHostToAgentTaskColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProvisionedHostToPlan applies the HasEdge predicate on the "ProvisionedHostToPlan" edge.
func HasProvisionedHostToPlan() predicate.ProvisionedHost {
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProvisionedHostToPlanTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ProvisionedHostToPlanTable, ProvisionedHostToPlanColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProvisionedHostToPlanWith applies the HasEdge predicate on the "ProvisionedHostToPlan" edge with a given conditions (other predicates).
func HasProvisionedHostToPlanWith(preds ...predicate.Plan) predicate.ProvisionedHost {
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProvisionedHostToPlanInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ProvisionedHostToPlanTable, ProvisionedHostToPlanColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProvisionedHostToGinFileMiddleware applies the HasEdge predicate on the "ProvisionedHostToGinFileMiddleware" edge.
func HasProvisionedHostToGinFileMiddleware() predicate.ProvisionedHost {
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProvisionedHostToGinFileMiddlewareTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ProvisionedHostToGinFileMiddlewareTable, ProvisionedHostToGinFileMiddlewareColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProvisionedHostToGinFileMiddlewareWith applies the HasEdge predicate on the "ProvisionedHostToGinFileMiddleware" edge with a given conditions (other predicates).
func HasProvisionedHostToGinFileMiddlewareWith(preds ...predicate.GinFileMiddleware) predicate.ProvisionedHost {
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProvisionedHostToGinFileMiddlewareInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ProvisionedHostToGinFileMiddlewareTable, ProvisionedHostToGinFileMiddlewareColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProvisionedHost) predicate.ProvisionedHost {
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProvisionedHost) predicate.ProvisionedHost {
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProvisionedHost) predicate.ProvisionedHost {
	return predicate.ProvisionedHost(func(s *sql.Selector) {
		p(s.Not())
	})
}
