// Code generated by ent, DO NOT EDIT.

package team

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// TeamNumber applies equality check predicate on the "team_number" field. It's identical to TeamNumberEQ.
func TeamNumber(v int) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTeamNumber), v))
	})
}

// TeamNumberEQ applies the EQ predicate on the "team_number" field.
func TeamNumberEQ(v int) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTeamNumber), v))
	})
}

// TeamNumberNEQ applies the NEQ predicate on the "team_number" field.
func TeamNumberNEQ(v int) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTeamNumber), v))
	})
}

// TeamNumberIn applies the In predicate on the "team_number" field.
func TeamNumberIn(vs ...int) predicate.Team {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTeamNumber), v...))
	})
}

// TeamNumberNotIn applies the NotIn predicate on the "team_number" field.
func TeamNumberNotIn(vs ...int) predicate.Team {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTeamNumber), v...))
	})
}

// TeamNumberGT applies the GT predicate on the "team_number" field.
func TeamNumberGT(v int) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTeamNumber), v))
	})
}

// TeamNumberGTE applies the GTE predicate on the "team_number" field.
func TeamNumberGTE(v int) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTeamNumber), v))
	})
}

// TeamNumberLT applies the LT predicate on the "team_number" field.
func TeamNumberLT(v int) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTeamNumber), v))
	})
}

// TeamNumberLTE applies the LTE predicate on the "team_number" field.
func TeamNumberLTE(v int) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTeamNumber), v))
	})
}

// HasTeamToBuild applies the HasEdge predicate on the "TeamToBuild" edge.
func HasTeamToBuild() predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TeamToBuildTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TeamToBuildTable, TeamToBuildColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTeamToBuildWith applies the HasEdge predicate on the "TeamToBuild" edge with a given conditions (other predicates).
func HasTeamToBuildWith(preds ...predicate.Build) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TeamToBuildInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TeamToBuildTable, TeamToBuildColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTeamToStatus applies the HasEdge predicate on the "TeamToStatus" edge.
func HasTeamToStatus() predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TeamToStatusTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, TeamToStatusTable, TeamToStatusColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTeamToStatusWith applies the HasEdge predicate on the "TeamToStatus" edge with a given conditions (other predicates).
func HasTeamToStatusWith(preds ...predicate.Status) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TeamToStatusInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, TeamToStatusTable, TeamToStatusColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTeamToProvisionedNetwork applies the HasEdge predicate on the "TeamToProvisionedNetwork" edge.
func HasTeamToProvisionedNetwork() predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TeamToProvisionedNetworkTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, TeamToProvisionedNetworkTable, TeamToProvisionedNetworkColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTeamToProvisionedNetworkWith applies the HasEdge predicate on the "TeamToProvisionedNetwork" edge with a given conditions (other predicates).
func HasTeamToProvisionedNetworkWith(preds ...predicate.ProvisionedNetwork) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TeamToProvisionedNetworkInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, TeamToProvisionedNetworkTable, TeamToProvisionedNetworkColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTeamToPlan applies the HasEdge predicate on the "TeamToPlan" edge.
func HasTeamToPlan() predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TeamToPlanTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, TeamToPlanTable, TeamToPlanColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTeamToPlanWith applies the HasEdge predicate on the "TeamToPlan" edge with a given conditions (other predicates).
func HasTeamToPlanWith(preds ...predicate.Plan) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TeamToPlanInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, TeamToPlanTable, TeamToPlanColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Team) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Team) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Team) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		p(s.Not())
	})
}
