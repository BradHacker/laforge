// Code generated by fileb0x at "2022-06-28 17:19:43.10272241 +0000 UTC m=+0.001272508" from config file "assets.toml" DO NOT EDIT.
// modification hash(d1696d6f37cc2d137800017a105f2835.963594ba69d0273dac33db44d8c13043)

package static

import (
	"bytes"
	"compress/gzip"
	"context"
	"io"
	"net/http"
	"os"
	"path"

	"golang.org/x/net/webdav"
)

var (
	// CTX is a context for webdav vfs
	CTX = context.Background()

	// FS is a virtual memory file system
	FS = webdav.NewMemFS()

	// Handler is used to server files through a http handler
	Handler *webdav.Handler

	// HTTP is the http file system
	HTTP http.FileSystem = new(HTTPFS)
)

// HTTPFS implements http.FileSystem
type HTTPFS struct {
	// Prefix allows to limit the path of all requests. F.e. a prefix "css" would allow only calls to /css/*
	Prefix string
}

// FileGitignore is ".gitignore"
var FileGitignore = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xd2\xd2\x2b\x48\xcd\x05\x04\x00\x00\xff\xff\xe2\xf2\xc6\x72\x05\x00\x00\x00")

// FileServicePem is "service.pem"
var FileServicePem = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\x64\x95\xb9\xb2\xab\xcc\x19\x45\x73\x9e\xc2\xb9\xca\x05\x08\x81\x50\x70\x83\x06\x9a\xb9\x11\xf3\x94\x31\x09\x81\x98\x41\x6a\xc4\xd3\xbb\xce\xb9\x89\xed\xbf\xc3\xb5\xab\x76\x7f\xc9\xaa\xfd\xef\x9f\x27\x40\x45\xb3\xfe\x25\x42\xd7\xd7\x64\x4d\x04\x3e\xfc\xa5\x04\xd2\x34\x39\x6e\x45\x11\x50\x59\x0d\xb0\x26\x80\x5a\x0b\xd4\x1a\x3e\x8c\x51\x2a\x48\x8f\xcf\xad\xc5\xa0\x4b\x4a\xc1\x73\xe0\xd7\x96\xac\x61\xc9\x49\x74\x63\x4c\xb5\xe7\xa7\xb0\x80\x03\x4d\x42\x70\x00\x36\x7d\x68\x22\xf0\x52\x00\x1d\x40\xe1\x89\xc4\x30\x44\xbb\x78\x00\x5d\xa8\xad\x50\x00\x35\x02\x2f\xd6\x40\x2e\xc4\x12\x4e\xa4\xd0\x71\x0c\x09\x3c\x25\xc7\xc3\xb5\x17\xb1\x2d\x61\xb6\xa0\x92\x31\xf5\x45\x2d\x38\xa3\xb6\xde\xad\x03\x32\xa8\xed\xb2\x5f\x76\xfc\x2f\x43\x30\xf8\xaf\xe2\xc4\x07\x5d\xe8\x13\xc8\x59\xb1\xe8\xfc\x36\x6b\x12\xd0\xef\x5e\x0b\x7d\x24\xc0\xdf\x6b\xc4\x1a\x1b\xa1\x12\x1e\xa5\xf8\xf7\x37\xb3\x85\x01\x12\xb4\xdf\x0c\x60\x6c\xe6\x8a\xdc\x13\x39\xa3\x0f\xa9\x47\xbf\xd2\x38\xc1\x75\xad\x35\x08\x50\x8a\xe8\xcd\x8a\xa7\xe5\x8c\xe4\x40\x01\x38\x01\x00\x17\x4d\x94\x30\xf8\xc9\x0d\x30\x6a\x22\x70\x24\x90\xcd\xed\xd0\x3c\xcc\x89\x70\x9d\xcc\x69\x8b\x70\xec\xc7\x43\xf6\xb2\x14\xdf\xe5\xab\xb8\x48\xe5\xde\x64\x69\xd2\x75\x60\x61\xb4\x71\x0a\x3e\x9b\xbe\xc9\x4c\x56\xfa\x5d\x5a\x28\x76\x67\xf3\x36\x15\x53\xe8\x23\x96\x2e\x49\xcc\x15\x69\x1f\x25\xfd\x8d\xb3\x4d\x74\x80\xe7\x33\x5d\x72\x3f\x35\xbe\xb1\xc4\xdc\x5a\x96\xde\xa0\x05\x93\xf8\xc8\xcb\xc3\x98\x3b\xbd\x27\x1d\x91\x8d\xf3\x2b\x2d\xf1\x86\x3b\x1c\x18\x44\xa9\x4b\x00\x91\x6f\x9c\xb6\xbc\x17\x8b\xc7\xcf\xed\xb0\x70\x62\x7c\x97\x82\xf1\xc5\xc7\xd3\xc9\x31\xe2\xd4\x8d\xbd\x0a\x1d\xdf\x02\x47\x62\xcf\x63\xd1\x19\xcf\x6a\x19\x32\x60\x3f\x35\x9d\x61\x8c\x0e\x22\x90\xa5\x0e\xda\x6b\x54\x9f\x6a\xc5\x1b\x27\x79\xc7\x92\xc5\x29\xba\xe8\x93\x3e\x77\xf6\xf6\x94\x8d\x9f\x2c\x5f\xf0\xc5\x70\x6a\x51\x66\xc6\x03\x43\x7b\x0d\xb5\xf1\x7b\x04\x2f\xef\x6a\x55\x0c\x99\x50\xeb\x51\x07\x7e\xfc\x65\xd5\xe8\x18\x82\x85\x65\x63\x3b\x23\x6f\xb7\xd7\x5d\x86\xf5\xbb\xde\xe9\x0c\x15\x66\x74\x22\x8f\xb8\x0b\xcd\xc7\x55\xe1\xcf\xa9\x20\xb4\xa7\x59\x90\x9d\xfb\xa1\xb3\x0f\x9a\xb8\xbb\x39\x26\x55\x10\xa8\xf5\xc5\xf1\x8c\x39\xc7\x1a\x2b\xef\xa8\xc7\x28\x43\x33\x67\x5b\x1d\xd3\x24\x42\x98\xce\xf7\xa3\x95\xe5\xaf\x4b\x33\xc0\x52\x03\x85\x9a\x8d\x4c\xec\xd6\xe8\xda\xaf\x44\x10\xae\xd7\xb3\xc7\x31\x4f\xc5\x22\x2b\xd7\xfb\x54\x03\xea\xa7\xb1\x89\x0a\xea\x92\xbe\xec\x36\xac\xdd\x29\x5b\xb4\xb9\xbe\x06\x2b\xf3\x7c\x7f\xb2\x93\x3f\xac\x6c\x27\x5b\x74\x6a\x9b\x00\x2c\x39\x61\xb6\x26\x88\xbe\x0b\x7f\xe4\xf9\xcd\x14\x6e\xce\xe8\x1e\x93\x07\xcd\xf5\x3d\x1a\x93\xf0\xf1\x63\xf8\xea\xb5\xa0\xad\x2e\xf3\x68\x2c\xd5\x73\xfe\x08\xe6\xf4\x39\x57\xdc\x5b\x49\x71\x4d\x1e\xcd\x9d\x50\x98\x3c\x2a\xd3\x42\xed\xae\xec\xfb\x26\x9c\xc5\x56\xe7\x0a\xf2\xc4\xca\x61\x3f\x44\x13\xae\xd4\x74\x0c\x76\xdb\x5e\x17\xfd\x5b\xe9\x17\xfc\xe6\x6f\xa4\x63\x39\x93\xf7\x89\x05\xde\xf2\x59\x5b\x26\x1e\x37\x46\x2b\x05\xd5\x30\x19\x19\x97\xb6\x73\x91\xd4\x7d\xc2\xb9\x91\xb0\xb7\x33\x30\x17\x5b\x3f\xb5\xfa\xb6\x71\xe1\x0a\xae\x7b\x5c\xc9\xcc\xb7\x9c\x19\x9c\x31\xf1\x13\x55\xbd\xf0\x66\xeb\x2f\x81\xf8\x2f\x94\x23\xbf\xf5\x87\xca\x21\x4f\xef\x46\xb9\x66\xdd\xe3\xdc\x6c\x85\xbd\xc3\xd3\x5c\x6f\xfb\x8f\x22\x0e\x10\x46\xfa\x82\x63\x09\x64\x3f\x22\xa9\x2e\x84\xf0\x00\x6e\x5d\x77\x2b\x91\x9f\xad\x67\xae\x3c\x3f\x05\xe3\xa9\x82\x06\x43\x2d\x41\x58\xfd\x91\xcb\xa5\xee\x82\x90\x40\x59\x50\xb2\x40\x58\xf5\xa0\xcb\x0f\x53\x5e\xf4\x07\xf5\xd6\xdd\xca\x54\xa3\x67\x04\x91\xc0\x2b\x04\xa0\x83\x52\xc3\x4e\x82\x84\x0c\xc8\x10\x24\xfd\xa3\x3a\x96\x4e\x60\x9a\x8b\xb7\x46\x9f\xe3\x99\x84\x74\xd4\x6f\x07\xfa\x7f\xc9\x44\xfc\x57\x32\x02\x38\xe2\xd1\x47\xe9\x29\xc5\xb5\xd0\x16\x0f\xb9\xa1\xe8\x3d\x6c\x19\xc4\x7c\xa0\xf4\x48\x5c\x81\x75\x21\xf7\x76\xec\xf9\x53\x3f\xac\xe6\x20\x31\xec\x15\xde\x9c\x62\xbd\xb5\x7a\xd6\x38\x2e\x24\x11\xa0\x79\x85\x3d\xd6\x22\x0d\x0d\xa6\x6a\x17\x76\x4a\x95\x4b\xc1\x69\x3a\xa9\x32\x85\xf1\x5d\xe2\x00\xa4\x46\x17\xc5\x67\x9d\xad\xe7\xef\xe1\xe7\x15\x19\xa5\xb1\x7e\x2b\xbb\x27\x07\xef\x86\x4a\xc4\xab\x2b\xbb\x35\x72\xc1\xc8\xa1\x98\xb1\xa3\xb8\xa4\xa4\xb3\xae\x4f\xa5\xd6\x0a\x96\x58\x8b\xe5\xc6\x79\xda\x53\x08\x73\x25\x26\x3b\x05\x33\x9a\xff\xbc\xca\xdf\xbd\x2c\x16\x3e\xb4\xb8\xaa\x23\x48\x93\xa7\xed\x6b\x63\xd5\xa1\x61\x37\x2c\x29\x54\xb4\x32\x3a\x45\xf3\xee\x3d\x8a\xfb\x44\xa5\xbb\xf2\xe7\x84\x3d\xef\xe8\x43\xf1\x69\x22\x30\x4c\x49\x3f\xc3\x4d\x66\x96\x3a\xb1\x1b\xe6\x90\x29\x02\xb5\x66\x4d\x6e\x90\x14\x2e\x8f\x7e\xca\x4b\xe5\x16\x71\x0c\x97\x3b\xb7\x54\x67\xe3\xeb\x21\x77\xed\xc5\xcd\xeb\xc6\x39\xb1\x9e\xa9\x40\xc7\xc2\x83\x7d\x66\x8e\x42\xd4\x1e\xb7\x49\x66\xdb\x92\x23\xb6\xed\x1d\x5f\xd0\x55\xeb\x7a\xe7\x89\x77\xb1\x04\x72\xfb\x18\xf1\x4d\x33\xcd\xd4\xb1\xd4\x29\x8e\xc6\x59\xd6\x55\xd5\x55\xbd\xc9\x00\x64\x92\xa1\xed\x34\xeb\x9b\x72\x6f\x34\x2f\x7f\xa9\x6e\x4b\xb8\x38\xa9\xe9\x5d\x60\xf4\xdc\x53\x8d\x3e\x1f\x25\x6f\xa3\xd6\x82\x2f\x92\xb5\x19\xda\xe4\x0a\xc6\xe0\x98\xbd\xfa\xf9\xba\x24\x1f\xca\xc7\x47\x18\xd2\xfa\xfd\xbb\x5c\xdb\xd9\xca\xaf\x79\xaf\xb5\x44\x12\xb7\xd5\x76\xbc\xe9\xab\xb4\x44\xb5\xe1\xce\x19\x04\xe5\x52\xfa\x85\xea\xe3\xd6\xb8\x5d\x31\x4e\x03\xc7\xff\x36\x9b\xac\x4a\x32\x2d\xc9\xfb\x4b\x25\x9d\x69\x12\xc2\xfb\xdd\xad\x36\xf8\x55\x88\xab\xb9\x3c\x53\x58\x72\xc6\xf0\x68\x03\x9e\xeb\x03\x0d\x7f\xa1\x8f\x71\x8a\xb8\x6f\x9e\xc5\xfa\xe4\x1f\xa1\xe6\xf5\x1f\xea\xce\x78\xd4\xfb\xf1\xb9\x5b\xa4\x01\x6d\x3d\x6e\xc5\x9b\xcd\xbe\x0a\x8b\xb0\x4f\x63\x54\x26\x10\xc4\x31\xbb\xba\x83\x54\x5d\xe8\x34\x12\xc7\x0e\x85\xb2\x36\xc6\x79\x5a\x51\x4b\xa5\xe1\xc0\xdb\x8e\x87\x6a\x3d\x8f\xeb\xb6\xb2\x39\xdb\xc4\xb6\x14\x5f\xac\xa5\xdd\x63\x9e\xa0\xf3\x3c\x62\x07\x14\xca\x89\x0d\x6a\x67\x1e\x34\x88\xc6\xb0\x18\xfc\xfd\x62\xbc\xbc\x28\xa6\xd5\x56\x37\xd8\x97\x3e\xb1\xd7\xcf\x42\xe3\x3f\x7f\x88\xdf\x49\x85\x96\xf4\xcf\x99\xfd\x4f\x00\x00\x00\xff\xff\x3f\xdf\x6a\xed\x83\x07\x00\x00")

func init() {
	err := CTX.Err()
	if err != nil {
		panic(err)
	}

	var f webdav.File

	var rb *bytes.Reader
	var r *gzip.Reader

	rb = bytes.NewReader(FileGitignore)
	r, err = gzip.NewReader(rb)
	if err != nil {
		panic(err)
	}

	err = r.Close()
	if err != nil {
		panic(err)
	}

	f, err = FS.OpenFile(CTX, ".gitignore", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
	if err != nil {
		panic(err)
	}

	_, err = io.Copy(f, r)
	if err != nil {
		panic(err)
	}

	err = f.Close()
	if err != nil {
		panic(err)
	}

	rb = bytes.NewReader(FileServicePem)
	r, err = gzip.NewReader(rb)
	if err != nil {
		panic(err)
	}

	err = r.Close()
	if err != nil {
		panic(err)
	}

	f, err = FS.OpenFile(CTX, "service.pem", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
	if err != nil {
		panic(err)
	}

	_, err = io.Copy(f, r)
	if err != nil {
		panic(err)
	}

	err = f.Close()
	if err != nil {
		panic(err)
	}

	Handler = &webdav.Handler{
		FileSystem: FS,
		LockSystem: webdav.NewMemLS(),
	}

}

// Open a file
func (hfs *HTTPFS) Open(path string) (http.File, error) {
	path = hfs.Prefix + path

	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	return f, nil
}

// ReadFile is adapTed from ioutil
func ReadFile(path string) ([]byte, error) {
	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	buf := bytes.NewBuffer(make([]byte, 0, bytes.MinRead))

	// If the buffer overflows, we will get bytes.ErrTooLarge.
	// Return that as an error. Any other panic remains.
	defer func() {
		e := recover()
		if e == nil {
			return
		}
		if panicErr, ok := e.(error); ok && panicErr == bytes.ErrTooLarge {
			err = panicErr
		} else {
			panic(e)
		}
	}()
	_, err = buf.ReadFrom(f)
	return buf.Bytes(), err
}

// WriteFile is adapTed from ioutil
func WriteFile(filename string, data []byte, perm os.FileMode) error {
	f, err := FS.OpenFile(CTX, filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, perm)
	if err != nil {
		return err
	}
	n, err := f.Write(data)
	if err == nil && n < len(data) {
		err = io.ErrShortWrite
	}
	if err1 := f.Close(); err == nil {
		err = err1
	}
	return err
}

// WalkDirs looks for files in the given dir and returns a list of files in it
// usage for all files in the b0x: WalkDirs("", false)
func WalkDirs(name string, includeDirsInList bool, files ...string) ([]string, error) {
	f, err := FS.OpenFile(CTX, name, os.O_RDONLY, 0)
	if err != nil {
		return nil, err
	}

	fileInfos, err := f.Readdir(0)
	if err != nil {
		return nil, err
	}

	err = f.Close()
	if err != nil {
		return nil, err
	}

	for _, info := range fileInfos {
		filename := path.Join(name, info.Name())

		if includeDirsInList || !info.IsDir() {
			files = append(files, filename)
		}

		if info.IsDir() {
			files, err = WalkDirs(filename, includeDirsInList, files...)
			if err != nil {
				return nil, err
			}
		}
	}

	return files, nil
}
