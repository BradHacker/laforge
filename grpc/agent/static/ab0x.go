// Code generated by fileb0x at "2023-05-04 17:25:53.465956706 +0000 UTC m=+0.009287496" from config file "assets.toml" DO NOT EDIT.
// modification hash(42e8a4ef0dcdaa9fcd5f0fd5295a453c.963594ba69d0273dac33db44d8c13043)

package static

import (
	"bytes"
	"compress/gzip"
	"context"
	"io"
	"net/http"
	"os"
	"path"

	"golang.org/x/net/webdav"
)

var (
	// CTX is a context for webdav vfs
	CTX = context.Background()

	// FS is a virtual memory file system
	FS = webdav.NewMemFS()

	// Handler is used to server files through a http handler
	Handler *webdav.Handler

	// HTTP is the http file system
	HTTP http.FileSystem = new(HTTPFS)
)

// HTTPFS implements http.FileSystem
type HTTPFS struct {
	// Prefix allows to limit the path of all requests. F.e. a prefix "css" would allow only calls to /css/*
	Prefix string
}

// FileGitignore is ".gitignore"
var FileGitignore = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xd2\xd2\x2b\x48\xcd\x05\x04\x00\x00\xff\xff\xe2\xf2\xc6\x72\x05\x00\x00\x00")

// FileServicePem is "service.pem"
var FileServicePem = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\x64\x95\xb9\xae\xab\x4c\x1a\x45\x73\x9e\xa2\x73\xd4\x62\x36\x26\xb8\x41\x01\x05\x94\x99\xcc\x3c\x64\xcc\x66\xb2\x19\x8c\xc1\x3c\x7d\xeb\x9c\x2b\xb5\x5a\xfd\x57\xb8\xb6\xb4\xeb\x4b\x96\xf6\xbf\x7f\x9e\x08\x55\x64\xfd\x4b\x82\xae\x8f\x14\x24\x01\x1f\xfe\x52\xcc\x44\x48\x89\x3b\x49\x02\x64\xd6\x80\x1d\x89\xa0\x41\x41\x50\x74\xde\xdd\xa7\xd5\xe9\x5b\x80\xb8\xd9\x99\x55\xd0\xf7\x4b\xf9\x94\x61\xc3\xee\xb2\x93\xdc\xf4\x57\x8a\x1e\x9f\xc2\x02\x0e\x34\x30\xd1\x01\xbb\xe1\x43\xc3\x04\xbd\x0a\xa8\x00\x8a\x0f\x53\x0a\x43\xf3\x90\x4e\x70\x13\x1b\x2b\x14\x41\x63\x82\x9e\xd3\x4d\x17\xee\xf2\x9e\xc8\xa1\xe3\xe8\x32\x78\xc8\x8e\xb7\x37\x5e\xc4\x75\x98\xd1\x81\x4a\xd9\xc9\xaf\x79\x02\xd2\xec\x82\xc3\xec\x20\x69\x9e\x65\xf6\xc3\x2c\xf9\x87\x39\xff\x65\x26\x0c\xfe\xa7\x38\xf1\xc1\x10\xfa\x98\xe9\xac\xbb\xe4\xfc\x36\x23\x19\xdc\x6c\xaf\x83\xbe\x29\xc2\xdf\x6b\xa4\x66\xd7\x43\x35\x3c\x4b\xe9\xef\x6f\x46\x07\x03\x53\x44\xbf\x19\xd8\x77\x23\x57\x95\x11\xcb\x99\xdb\x33\xf5\xa8\x3e\x8d\x93\xbd\x69\x50\x6b\x02\x52\x95\xbc\x59\xf5\x50\xce\xc8\x0e\x14\x81\x13\x00\xc0\x22\x49\xde\xc1\x4f\xae\x83\x17\x92\x80\x23\xc7\x47\xf5\x75\x02\x42\xe4\x30\xb4\x49\x22\xbb\x4c\xaf\x5d\x75\x7d\xad\xc9\xb4\x00\x76\x4b\xc5\xe4\xd9\x58\x59\x50\xa2\xfc\x6b\x39\x28\x82\x7b\x31\x83\x2a\xbf\x85\x84\xb6\x45\x5a\x5b\x3d\x6b\xdd\x38\x41\x2a\x36\x7c\x43\x24\x98\x93\x90\xbb\x9b\x77\x7c\xac\xb4\x97\xf2\x08\x74\x7f\x62\xe1\x62\xe1\x37\x8a\x2c\xf5\xad\x0e\x7a\x8e\x9c\x78\x93\x2b\xba\xb2\x4f\x88\x6c\x59\xde\xde\x4d\x4f\xd7\xcb\x38\x53\xc1\xed\xd9\xca\x5d\x82\x5d\xe9\xdd\x2e\x87\xfe\x79\x4a\x42\xee\x5f\xd3\xf1\x4d\x0b\xd2\x3b\x4a\x59\x2e\xaf\x0f\x00\x07\xb9\x33\x9d\x68\x35\xb3\x51\xe0\x6a\x9c\x6e\xb5\xce\xf6\x0c\x24\xdc\x41\xa0\x6c\x39\x61\xf5\x8b\x84\x7d\x02\x94\x3c\x1a\xab\xd8\x45\x24\xf6\xab\xcb\x3c\x1c\xb2\x05\x3d\x5e\x6a\xf6\x7b\x12\xf1\xcf\xea\x0a\xba\x92\xa1\xea\x2b\x2d\xd5\xde\x21\xc2\x44\x7e\xd6\xca\x54\x36\x4f\x9c\xfa\x51\xde\x3b\xc4\xba\x04\x22\xfd\x6c\x5b\xc7\x98\xce\x20\xf4\xbf\x19\x50\x95\x3e\xf5\x84\x4b\xe0\x95\x76\x75\x95\x4f\x7f\x75\xa7\x40\x2f\x2b\x24\x3e\x9e\xa5\x00\xee\x47\x99\x5c\x45\x3e\x62\xee\x83\xa7\xc9\x5e\x88\xbd\x7c\x5f\xa4\x82\x49\x80\xba\x80\xdf\x08\x7c\xd5\x6e\x77\x32\xd5\x75\x96\xb1\x86\xee\x7a\x61\xde\x09\x69\x5c\xfc\x35\xeb\xfc\x45\xfd\xd4\x1f\x83\x64\x9b\xd8\xb4\x3d\xe2\x5b\xa4\xd6\xb8\x4c\x74\x82\x81\x92\xd7\x71\x29\x31\xfa\xc3\xae\x38\x4b\x5f\x25\x2d\x6b\x83\x7b\xe1\x59\x57\x9a\x9c\x29\xbd\x46\xfc\xf6\x3e\xa1\x62\x05\xc5\x02\x6b\x3c\xd1\xf8\xd7\xe7\xc9\x70\x6b\xe1\x4d\xb5\xc7\xea\xd7\x1e\xab\x2e\xf1\x71\xeb\x5e\x6e\x50\x3d\x3f\x0a\x89\xfb\xdf\x7b\x70\xc0\x0f\xf9\x5a\xc5\x36\x6c\x11\x4a\x59\x16\x17\x1d\xe3\x14\x85\x32\x09\xd0\xab\x64\xc2\xd5\xb3\xdc\x8b\xde\x13\xed\x57\xd5\xa6\x31\xc4\xde\x90\xb8\x76\x0f\xb8\x1f\x39\x35\x5d\xc9\xf6\x49\x9e\xdd\x5b\xe5\x0b\x05\x8d\x71\xd4\x33\xf7\xf0\x1b\x6e\x55\xc9\x47\x6d\x9f\x2a\xec\x36\x65\xbe\x12\x80\x74\x7b\xe2\xf2\x35\xbb\x2c\x8d\x0e\x69\xec\x3d\xc8\x4b\xea\x5e\x1e\x49\xaa\xb1\x55\x36\x9b\xb6\x4a\x2f\xd3\x47\x48\x29\x10\x11\xb7\x20\xb9\x64\x1f\xd8\x96\x39\x7d\x8a\xaf\xee\xa6\xd9\x96\x1a\x70\x4f\x7d\x26\xc5\xe7\x92\x6f\x5d\x24\x0d\x3a\x96\x30\xc3\xb9\xda\x77\xef\x5e\x09\xf7\x23\x8f\xe1\xad\x52\xd8\x86\x38\x78\xa5\x5d\x65\xdb\x92\x42\xb4\x23\x19\x38\x40\x7c\x51\xec\x1e\xcb\x20\xfb\x11\x49\x73\x21\x84\x27\x70\x9b\x66\x58\xb1\x9c\xb6\x1e\xb9\xfa\xf8\x14\x8c\xa7\x89\x08\x86\x4a\x0c\x77\xed\x47\x2e\x97\xb4\x45\x31\x81\x8a\xf5\x6c\xf7\x90\x08\xbc\x15\x54\xde\x66\x02\x7b\x26\x27\xe4\x56\x77\xef\xda\x24\xa6\x78\x55\x31\x40\x05\x25\xda\x9d\xc4\x14\x33\xa0\x68\x26\x9f\xaa\x09\xe3\xe5\x8a\x27\x0f\x45\x1a\xa9\x5a\x65\xf8\x0b\x79\x11\x25\xfd\xff\x25\x93\xf6\xbf\x92\x61\xc0\x91\xf0\x4e\x1f\x1d\x33\x48\xb9\x9e\xac\x2d\x94\x64\x9d\xa2\x54\x8c\x7d\xee\x87\x68\x66\x80\x28\x0a\xb9\xd0\xb7\x9e\x14\x28\x49\xb2\x72\x37\xea\x7a\x94\xd5\x94\xad\x34\x1a\xa3\x9e\x81\x8e\x6d\x99\xb4\x31\x3b\x4d\xd0\x09\xa4\x39\x5e\x63\x6a\x8d\xb8\x78\x3b\x5e\x53\xc6\xec\x38\xf6\xe6\xd6\x2f\xf6\x1c\x83\xbe\x4d\x4d\x08\xcb\x2c\x3b\x5f\x25\x8b\x3c\x95\x89\x9e\x3c\x25\x0f\xeb\x64\x63\x91\xbb\x1c\xdc\xbe\x8c\x15\x54\xbe\xef\x8f\x6b\xce\xda\xea\xdb\xb3\x6f\xc4\xf4\xb4\x47\x8f\xda\x47\xd0\x3d\xd4\x14\x96\x05\x3d\xbe\xf3\xfb\xe9\x97\x7c\x06\xa1\x15\x7f\x2a\xe2\xa5\x55\x49\xed\x63\x44\xdd\xaa\x4d\xc2\xc9\xe5\x87\xe6\xef\x49\x89\xa4\x82\x52\xef\x1c\xe1\x3a\xd7\xd3\xcf\x16\x2e\x09\x0f\xf0\xb8\x40\x8f\x63\xb2\xe5\x39\x48\x41\xa3\x8b\x13\x80\xeb\xd2\xe4\x37\x08\x96\x78\x3f\x31\xb3\x6b\x73\xd0\x52\xbb\x46\x5c\x69\xe1\x50\xcf\x43\xd0\x2b\x67\x36\xc6\x45\xda\xc4\x87\x1a\x93\xb1\x5c\xc1\x55\x0e\x05\xa6\xe2\x75\xf1\x03\x78\xa5\xb8\x17\x61\xc1\xac\x6d\x31\x2c\xf5\x96\xd4\xd8\x7c\x70\xd7\x42\x59\xd8\x0f\x07\xc6\xcd\x5d\xce\xfd\x2e\xdc\x2f\x51\x76\xcc\x07\x93\xf8\x43\xb4\x44\xf8\x62\x99\xc9\x4b\xaa\xa5\x10\x17\xda\x86\x47\x52\x3f\xe0\xb6\x45\x75\x70\x66\xd1\xd8\xd1\xd8\xa3\x1e\xdb\xea\xa2\xc9\xfe\x02\x83\x37\x1e\x77\x65\x44\x53\x37\x37\x66\xef\x3c\x7d\x6b\x50\xb2\xaa\xa1\x4c\xe1\x82\xf8\xf2\x05\x95\x3c\x4f\xf2\xa5\xf0\x90\x94\xdf\x85\x7d\x73\x12\x6e\xb8\x3a\x26\x16\x96\x23\xbb\x1d\x7d\x37\xc9\xb3\x41\x8f\xea\x97\x18\xde\xd3\xac\x97\xf2\x93\xd2\x71\xa5\xb1\x36\x3f\x90\x36\x14\x1c\x22\xe8\xc2\xe7\x38\x1d\x5a\xa4\xd2\xce\x20\x7e\x1d\x06\x8f\xcd\x47\x4d\x73\xd8\x45\xca\x1d\x3a\x98\xe7\x78\x97\x6a\x80\x16\x7b\x66\x4c\x12\x8f\x38\xed\xcb\x50\x91\xa7\x08\x02\x68\xf8\xc6\x2a\xdf\xfa\x29\xd8\x54\xd5\xf6\xdf\x47\x9a\x40\xc2\xbb\x1a\xd9\x96\xf9\xd6\xcc\x99\xd8\x1a\x5e\x69\x2f\x30\x0a\xc8\xad\x17\x4e\x85\xed\x73\x50\xb7\x65\x9b\x73\xf6\x9e\x79\x03\x74\xcb\x45\xe2\x5e\x97\xbe\x6a\x57\x8e\x28\x4e\xb7\x32\xf8\x72\x1f\x9e\xdf\x43\x78\x05\xdc\x79\xdb\x7b\x15\xa3\xfd\x28\x19\x81\x1b\x9d\x29\x9e\xbb\x52\xa2\xc5\x87\x49\x6b\xe2\xd5\x6c\x1e\x59\x4c\xc9\xc5\xd8\x6d\xaf\xcf\xd6\xb1\x12\xd7\x38\x7b\xbb\xff\xf9\x83\xfd\x4e\x2a\xb4\xe4\x7f\xce\xec\x7f\x02\x00\x00\xff\xff\xf7\xf1\xc2\x5b\x83\x07\x00\x00")

func init() {
	err := CTX.Err()
	if err != nil {
		panic(err)
	}

	var f webdav.File

	var rb *bytes.Reader
	var r *gzip.Reader

	rb = bytes.NewReader(FileGitignore)
	r, err = gzip.NewReader(rb)
	if err != nil {
		panic(err)
	}

	err = r.Close()
	if err != nil {
		panic(err)
	}

	f, err = FS.OpenFile(CTX, ".gitignore", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
	if err != nil {
		panic(err)
	}

	_, err = io.Copy(f, r)
	if err != nil {
		panic(err)
	}

	err = f.Close()
	if err != nil {
		panic(err)
	}

	rb = bytes.NewReader(FileServicePem)
	r, err = gzip.NewReader(rb)
	if err != nil {
		panic(err)
	}

	err = r.Close()
	if err != nil {
		panic(err)
	}

	f, err = FS.OpenFile(CTX, "service.pem", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
	if err != nil {
		panic(err)
	}

	_, err = io.Copy(f, r)
	if err != nil {
		panic(err)
	}

	err = f.Close()
	if err != nil {
		panic(err)
	}

	Handler = &webdav.Handler{
		FileSystem: FS,
		LockSystem: webdav.NewMemLS(),
	}

}

// Open a file
func (hfs *HTTPFS) Open(path string) (http.File, error) {
	path = hfs.Prefix + path

	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	return f, nil
}

// ReadFile is adapTed from ioutil
func ReadFile(path string) ([]byte, error) {
	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	buf := bytes.NewBuffer(make([]byte, 0, bytes.MinRead))

	// If the buffer overflows, we will get bytes.ErrTooLarge.
	// Return that as an error. Any other panic remains.
	defer func() {
		e := recover()
		if e == nil {
			return
		}
		if panicErr, ok := e.(error); ok && panicErr == bytes.ErrTooLarge {
			err = panicErr
		} else {
			panic(e)
		}
	}()
	_, err = buf.ReadFrom(f)
	return buf.Bytes(), err
}

// WriteFile is adapTed from ioutil
func WriteFile(filename string, data []byte, perm os.FileMode) error {
	f, err := FS.OpenFile(CTX, filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, perm)
	if err != nil {
		return err
	}
	n, err := f.Write(data)
	if err == nil && n < len(data) {
		err = io.ErrShortWrite
	}
	if err1 := f.Close(); err == nil {
		err = err1
	}
	return err
}

// WalkDirs looks for files in the given dir and returns a list of files in it
// usage for all files in the b0x: WalkDirs("", false)
func WalkDirs(name string, includeDirsInList bool, files ...string) ([]string, error) {
	f, err := FS.OpenFile(CTX, name, os.O_RDONLY, 0)
	if err != nil {
		return nil, err
	}

	fileInfos, err := f.Readdir(0)
	if err != nil {
		return nil, err
	}

	err = f.Close()
	if err != nil {
		return nil, err
	}

	for _, info := range fileInfos {
		filename := path.Join(name, info.Name())

		if includeDirsInList || !info.IsDir() {
			files = append(files, filename)
		}

		if info.IsDir() {
			files, err = WalkDirs(filename, includeDirsInList, files...)
			if err != nil {
				return nil, err
			}
		}
	}

	return files, nil
}
